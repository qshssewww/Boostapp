<?php

require_once 'app/init.php';
require 'mail/class.phpmailer.php';

require_once __DIR__ . '/app/enums/ClassStudioDate/MeetingStatus.php';
require_once __DIR__ . '/office/Classes/Brand.php';
require_once __DIR__ . '/office/Classes/CalType.php';
require_once __DIR__ . '/office/Classes/Client.php';
require_once __DIR__ . '/office/Classes/ClientActivities.php';
require_once __DIR__ . '/office/Classes/ClassStudioAct.php';
require_once __DIR__ . '/office/Classes/ClassStudioDate.php';
require_once __DIR__ . '/office/Classes/Company.php';
require_once __DIR__ . '/office/Classes/CompanyProductSettings.php';
require_once __DIR__ . '/office/Classes/Docs.php';
require_once __DIR__ . '/office/Classes/docs2item.php';
require_once __DIR__ . '/office/Classes/DocsClientActivities.php';
require_once __DIR__ . '/office/Classes/DocsPayments.php';
require_once __DIR__ . '/office/Classes/PaymentDB.php';
require_once __DIR__ . '/office/Classes/PayToken.php';
require_once __DIR__ . '/office/Classes/Item.php';
require_once __DIR__ . '/office/Classes/ItemDetails.php';
require_once __DIR__ . '/office/Classes/ItemRoles.php';
require_once __DIR__ . '/office/Classes/AppNotification.php';
require_once __DIR__ . '/office/Classes/MembershipFreezeNotifications.php';
require_once __DIR__ . '/office/Classes/KevaActivity.php';
require_once __DIR__ . '/office/Classes/Notificationcontent.php';
require_once __DIR__ . '/office/Classes/OrderLogin.php';
require_once __DIR__ . '/office/Classes/Rank.php';
require_once __DIR__ . '/office/Classes/Settings.php';
require_once __DIR__ . '/office/Classes/Section.php';
require_once __DIR__ . '/office/Classes/TempReceiptPayment.php';
require_once __DIR__ . '/office/Classes/TempReceiptPaymentClient.php';
require_once __DIR__ . '/office/Classes/Token.php';
require_once __DIR__ . '/office/Classes/Utils.php';
require_once __DIR__ . '/office/Classes/ZoomClasses.php';
require_once __DIR__ . '/office/Classes/Models/Tags.php';
require_once __DIR__ . '/office/Classes/Models/TagsStudio.php';
require_once __DIR__ . '/office/Classes/TempReceiptItemList.php';
require_once __DIR__ . '/office/Classes/Users.php';
require_once __DIR__ . '/office/Classes/City.php';
require_once __DIR__ . '/office/services/DocumentService.php';
require_once __DIR__ . '/office/services/LoggerService.php';
require_once __DIR__ . '/office/services/OrderService.php';
require_once __DIR__ . '/office/services/PaymentService.php';
require_once __DIR__ . '/office/services/ClientService.php';
require_once __DIR__ . '/office/services/GoogleCalendarService.php';
require_once __DIR__ . '/office/services/meetings/EditMeetingService.php';
require_once __DIR__ . '/office/services/payment/PaymentStatusList.php';
require_once __DIR__ . '/office/services/payment/PaymentTypeEnum.php';
require_once __DIR__ . '/app/enums/NotificationContent/SendOption.php';
require_once __DIR__ . '/office/services/receipt/DocsService.php';
require_once __DIR__ . '/office/services/EmailService.php';
require_once __DIR__ . '/app/helpers/PasswordHelper.php';

$PhoneReplay = 'BOOSTAPP';

$EmailReplay = 'noreply@boostapp.co.il';

$EmailReplayName = 'BOOSTAPP';

$EmailsLogo = 'https://login.boostapp.co.il/assets/img/LogoMail.png';


/**
 * @param $ClassDesk_id
 * @param false $edit
 */
function insertIntoClass_zoom($ClassDesk_id, $edit = false){
    $single_reg = 0;
    $single_price=null;
    $CompanyNum = Auth::user()->CompanyNum;
    $zoomArr = array(
        "CompanyNum" => $CompanyNum,
        "class_id" => $ClassDesk_id,
        "meeting_id" => $_POST['meetingNumber'],
        'membership_type' => 10,
        'password' => $_POST['ZoomPassword'] ?? '',
        'chat' => $_POST['AllowChat'] ?? 0,
        'share_video' => $_POST['AllowVideoShare'] ?? 0,
        'audio' => $_POST['AllowSound'] ?? 0
    );

    if(isset($_POST['AllowSingleEntry']) && $_POST['AllowSingleEntry']== 'on' && isset($_POST["registerLimitZoom"]) && $_POST["registerLimitZoom"] == 1){
        $item = new Item();
        $itemRole = new ItemRoles();
        /**
         * @var $role ItemRoles
         */
        $role = $itemRole->getItemRoleByClassId($ClassDesk_id);
        if($role->id != null){
            $item->getItemById($role->__get("ItemId"));
        }
        if($edit == true && ($role->id == null || empty($role->id))){
            $item->createItemFromClasses($_POST,$ClassDesk_id,$CompanyNum);
        }
        else if($edit == false) {
            $item->createItemFromClasses($_POST, $ClassDesk_id, $CompanyNum);
        }
        else if($edit == true){
            $item->createItemFromClasses($_POST, $ClassDesk_id, $CompanyNum,true);
        }
        $zoomArr["single_price"] =  $_POST['singleEntryRate'];
        $zoomArr["single_reg"] = 1;
    }
    $video_link = 0;
    $external_video=null;
    if(isset($_POST['AllowWatchOutsideApp'])  && $_POST['AllowWatchOutsideApp']== 'on' ){
        $zoomArr["external_video"] =  $_POST['watchOutsideApp'];
        $zoomArr["video_link"] =  1;
    }
    $save_video = 0;
    $video_folder=null;
    if(isset($_POST['RecordAndStoreVideo'])  && $_POST['RecordAndStoreVideo']== 'on'){
        $zoomArr["save_video"] =  1;
        $zoomArr["video_folder"] = $_POST['RecordFile'];
    }
    $zoom = new ZoomClasses();
    $zoom->getZoomByClassId($ClassDesk_id);
    if($edit == false) {
        $AddClassZoom = DB::table('class_zoom')->insertGetId($zoomArr);
    }
    elseif($zoom->__get("id") == null){
        $AddClassZoom = DB::table('class_zoom')->insertGetId($zoomArr);
    }
    else{
        $zoom = new ZoomClasses();
        $zoom->getZoomByClassId($ClassDesk_id);
        if($zoom->__get("id") != null) {
            DB::table('class_zoom')->where("class_id", "=", $ClassDesk_id)->update($zoomArr);
        }

    }

}


function rand_string($length)

{

    $chars = "0123456789";

    return substr(str_shuffle($chars), 0, $length);

}



function get_tiny_url($url)

{

    $ch = curl_init();

    $timeout = 5;

    curl_setopt($ch, CURLOPT_URL, 'http://tinyurl.com/api-create.php?url=' . $url);

    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);

    $data = curl_exec($ch);

    curl_close($ch);

    return $data;

}





if (Auth::check()):

    $CompanyNum = Auth::user()->CompanyNum;
    $UserId = Auth::user()->id;

    $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

    $CompanySettingsDash = $SettingsInfo;

    $AppSettings = DB::table('appsettings')->where('CompanyNum', '=', $CompanyNum)->first();

    $BrandsMain = $SettingsInfo->BrandsMain;

    $MembershipType = @$AppSettings->MembershipType;



    if ($SettingsInfo->EmailCRM != '') {

        $EmailReplay = $SettingsInfo->EmailCRM;

        $EmailReplayName = $SettingsInfo->EmailCRM;

    }



    if ($SettingsInfo->PhoneSMSTitle != '') {

        $PhoneReplay = $SettingsInfo->PhoneSMSTitle;

    }



    if ($SettingsInfo->PhoneSMS != '') {

        $PhoneReplay = $SettingsInfo->PhoneSMS;

    }



    if ($SettingsInfo->Memotag == '1' && $SettingsInfo->DocsCompanyLogo != '') {

        $EmailsLogo = 'https://login.boostapp.co.il/office/files/' . $SettingsInfo->DocsCompanyLogo;

    }





endif;



$StatusreditCard = array(

    0 => lang('seccessfully_ajax'),

    1 => lang('doc_meshulam_1'),

    2 => lang('doc_meshulam_2'),

    3 => lang('doc_meshulam_3'),

    4 => lang('doc_meshulam_4'),

    5 => lang('doc_meshulam_5'),

    6 => lang('doc_meshulam_6'),

    7 => lang('doc_meshulam_7'),

    19 => lang('doc_meshulam_19'),

    33 => lang('doc_meshulam_33'),

    34 => lang('doc_meshulam_34'),

    35 => lang('doc_meshulam_35'),

    36 => lang('doc_meshulam_36'),

    37 => lang('doc_meshulam_37'),

    38 => lang('doc_meshulam_38'),

    39 => lang('doc_meshulam_39'),

    57 => lang('doc_meshulam_57'),

    58 => lang('doc_meshulam_58'),

    69 => lang('doc_meshulam_69'),

    101 => lang('doc_meshulam_101'),

    106 => lang('doc_meshulam_106'),

    107 => lang('doc_meshulam_107'),

    110 => lang('doc_meshulam_110'),

    111 => lang('doc_meshulam_111'),

    112 => lang('doc_meshulam_112'),

    113 => lang('doc_meshulam_113'),

    114 => lang('doc_meshulam_114'),

    118 => lang('doc_meshulam_118'),

    119 => lang('doc_meshulam_119'),

    124 => lang('doc_meshulam_124'),

    125 => lang('doc_meshulam_125'),

    127 => lang('doc_meshulam_127'),

    129 => lang('doc_meshulam_129'),

    133 => lang('doc_meshulam_133'),

    138 => lang('doc_meshulam_138'),

    146 => lang('doc_meshulam_146'),

    150 => lang('doc_meshulam_150'),

    151 => lang('doc_meshulam_151'),

    156 => lang('doc_meshulam_156'),

    160 => lang('doc_meshulam_160'),

    161 => lang('doc_meshulam_161'),

    162 => lang('doc_meshulam_162'),

    163 => lang('doc_meshulam_163'),

    164 => lang('doc_meshulam_164'),

    169 => lang('doc_meshulam_169'),

    171 => lang('doc_meshulam_171'),

    172 => lang('doc_meshulam_172'),

    173 => lang('doc_meshulam_173'),

    200 => lang('doc_meshulam_200'),

    251 => lang('doc_meshulam_251'),

    260 => lang('doc_meshulam_260'),

    280 => lang('doc_meshulam_280'),

    349 => lang('doc_meshulam_349'),

    418 => lang('status_card_ajax_418'),

    902 => lang('doc_meshulam_902'),

    920 => lang('doc_meshulam_920'),

    997 => lang('doc_receipt_997'),

    998 => lang('doc_meshulam_998'),

    999 => lang('doc_meshulam_999')



);



$Vaild_TypeOption = array(

    1 => "day",

    2 => "week",

    3 => "month",

    4 => "year"

);



use Hazzard\Support\MessageBag;



// CSRF check

if (Config::get('app.csrf') && function_exists('getallheaders')) {

    if (is_ajax_request()) {

        $headers = array_change_key_case(getallheaders());

        $token = isset($headers['x-csrf-token']) ? $headers['x-csrf-token'] : '';

    }



    if (empty($token)) {

        $token = isset($_GET['_token']) ? $_GET['_token'] : (isset($_POST['_token']) ? $_POST['_token'] : '');

    }



    if (Session::token() !== $token) {

        Session::regenerateToken();

        json_message(lang('error_refresh_ajax'), false);

    }

}





//$_POST = array_map("trim", $_POST);



if (isset($_POST['action'])) {





    switch ($_POST['action']) {

        // updateMasof

        case 'updateMasof':
            if (!Auth::user()->can('*')) return json_message('Not allowed', false);

            try {
                $data = [];
                $data['TypeShva'] = (int)$_POST['TypeShva'];

                switch ($data['TypeShva']) {
                    case PaymentTypeEnum::TYPE_YAAD:
                        $data['YaadzPass'] = '3544';
                        $data['LiveMeshulam'] = '0';
                        $data['YaadNumber'] = substr($_POST['YaadNumber'], 0, 10);

                        if (isset($_POST['Isracrd'])) $data['Isracrd'] = $_POST['Isracrd'];
                        if (isset($_POST['Amkas'])) $data['Amkas'] = $_POST['Amkas'];
                        if (isset($_POST['VisaCal'])) $data['VisaCal'] = $_POST['VisaCal'];
                        if (isset($_POST['Diners'])) $data['Diners'] = $_POST['Diners'];
                        if (isset($_POST['LeumiCard'])) $data['LeumiCard'] = $_POST['LeumiCard'];
                        break;

                    case PaymentTypeEnum::TYPE_MESHULAM:
                        $data['LiveMeshulam'] = '1';
                        $data['MeshulamAPI'] = '210c23bdb9be';
                        $data['MeshulamUserId'] = trim($_POST['MeshulamUserId']) ?? '0';
                        break;

                    case PaymentTypeEnum::TYPE_TRANZILA:
                        $data['TranzilaTerminal'] = $_POST['TranzilaTerminal'] ?? '';
                        $data['TranzilaPassword'] = Config::get('payment.tranzila.TranzilaPassword') ?? '';
                        $data['TranzilaCreditPass'] = Config::get('payment.tranzila.TranzilaCreditPass') ?? '';
                        break;
                    default:
                        throw new InvalidArgumentException('Wrong payment system');
                }

                $query = DB::table('settings')
                    ->where('CompanyNum', Auth::user()->CompanyNum)
                    ->update($data);
            } catch (Exception $ex) {
                LoggerService::error($ex);
                return $ex->getMessage();
            }

            json_message(lang('terminal_updated_ajax'));
            break;



        // Login

        case 'login':

            if (Auth::check()) exit;



            Auth::login(trim($_POST['email']), trim($_POST['password']), isset($_POST['remember']));



            if (Auth::passes()) {

                $TypeLogin = $_POST['TypeLogin'];

                $AppURL = $_POST['AppURL'];

                if ($TypeLogin == '0') {

                    json_message(Config::get('auth.login_redirect'));

                } else {

                    json_message(Config::get('auth.login_Office'));

                }

            } else {

                json_message(Auth::errors()->toArray(), false);

            }

            break;





        // Logout

        case 'logout':

            Auth::logout();

            break;





        // Register

        case 'signup':

            if (Auth::check()) exit;



            Register::signup($_POST);



            if (Register::passes()) {

                if (Config::get('auth.email_activation')) {

                    Session::flash('signup_complete', true);

                    json_message();

                } else {

                    Auth::login($_POST['email'], $_POST['pass1']);

                    json_message(array('redirect' => Config::get('auth.login_redirect')));

                }

            } else {

                json_message(Register::errors()->toArray(), false);

            }

            break;





        // Send activation reminder

        case 'activation':

            if (Auth::check()) exit;



            Register::reminder($_POST['email'], @$_POST['captcha'], @$_POST['recaptcha_challenge_field']);



            if (Register::passes()) {

                Session::flash('activation_sent', true);

                json_message();

            } else {

                json_message(Register::errors()->toArray(), false);

            }

            break;





        // Activate account

        case 'activate':

            if (Auth::check()) exit;



            Register::activate($_POST['reminder']);



            if (Register::passes()) {

                json_message();

            } else {

                json_message(Register::errors()->toArray(), false);

            }

            break;





        // Send password reminder

        case 'reminder':

            if (Auth::check()) exit;
            //            Password::reminder($_POST['email'], @$_POST['captcha'], @$_POST['recaptcha_challenge_field']);
//            if (Password::passes()) {
//
//                Session::flash('reminder_sent', true);
//
//                json_message();
//
//            } else {
//
//                json_message(Password::errors()->toArray(), false);
//
//            }


/// שליחת מייל

            if (!isset($_POST['email'])) exit;
            $validator = Validator::make(array('email' => $_POST['email']), array('email' => 'required'));
            if ($validator->passes()) {
                $ClientEmail = $_POST['email'];

                $user =  DB::table('users')->where('email', '=', $ClientEmail)->first();
                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $user->CompanyNum)->first();
                $mail = new PHPMailer();
                $mail->IsSMTP(); // enable SMTP
                $mail->SMTPAuth = true; // authentication enabled
                $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail
                $mail->Host = "smtp.sendgrid.net";
                $mail->Port = 587; // or 587
                $mail->IsHTML(true);
                $mail->Username = EmailService::USERNAME_SENDGRID;
                $mail->Password = EmailService::PASSWORD_SENDGRID;

                $LunchLink = App::url();
                $LunchName = $SettingsInfo->CompanyName;

                $client = DB::table('client')
                    ->where('CompanyNum', '=', $user->CompanyNum)
                    ->where('email', '=', $ClientEmail)
                    ->first();

                $display_name = isset($client) ? "{$client->FirstName} {$client->LastName}" : '';
                function rand_strings($length)
                {
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    return substr(str_shuffle($chars), 0, $length);
                }
                $RandomPassword = rand_strings(6);

                DB::table('users')->where ('id', $user->id)
                    ->update(array( 'email' => $ClientEmail, 'Password' => Hash::make($RandomPassword)));

                $subject = $display_name . ', ברוך הבא למערכת BOOSTAPP של ' . $LunchName . '! פרטי הגישה שלך בפנים';
                $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180" height="63" /></td>
              

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>הודעת מערכת</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">



			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">שלום ' . $display_name . ',</span><br /><br />

			 להלן פרטי הגישה שלך למערכת BOOSTAPP של ' . $LunchName . ':<br />



			 <br />

			 לינק למערכת BOOSTAPP:<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>



			 <br><br>

          שם משתמש    <span> ' . $ClientEmail .'</span> :<br> 
          סיסמה ראשונית <span> ' . $RandomPassword .'</span> :<br>



<br>

מומלץ לשמור את הנתונים האלו על מנת לגשת למערכת בעתיד.<br>

לאחר ההתחברות יש לשנות סיסמה באמצעות לחיצה על השם שלך בתפריט בצד ימין.





			 <br /><br />

			  בהצלחה,<br />

			  צוות <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>



          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';

//Set who the message is to be sent from
                $mail->SetFrom($EmailReplay, $EmailReplayName);
//Set an alternative reply-to address

                $mail->AddReplyTo($EmailReplay, $EmailReplayName);
//Set who the message is to be sent to

//Set who the message is to be sent to

                $mail->AddAddress($ClientEmail);
//Set the subject line
                $mail->Subject = ($subject);

//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                $mail->MsgHTML($message);


//Send the message, check for errors

                if (!$mail->Send()) {
                    "Mailer Error: " . $mail->ErrorInfo;
                } else {
                    "Message sent!";
                }

                /// סיום שליחת מייל

                ///  שמירת העתק הודעה
//add log





//            $time = date('Y-m-d G:i:s');

// DB::table('emaillog')->insertGetId(arrayCancelNewActivity => 313762, 'Subject' => $subject, 'Text' => $message, 'Date' => $time, 'UserId' => $UserId, 'CompanyNum' => $CompanyNum));
//

//                echo json_encode('', JSON_UNESCAPED_UNICODE);
                echo json_encode(array("type"=>"success"));
//                json_message('test', true);
                //  json_message(Config::get('auth.login_redirect'));
//json_message('e-mail send', true);

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;






        // Password reset

        case 'reset':

            if (Auth::check()) exit;



            Password::reset($_POST['pass1'], $_POST['pass2'], $_POST['reminder']);



            if (Password::passes()) {

                Session::flash('password_updated', true);

                json_message();

            } else {

                json_message(Password::errors()->toArray(), false);

            }

            break;





        // Account settings - Account

        case 'settingsAccount':

            if (Auth::guest()) exit;



            $user = User::find(Auth::user()->id);



            $data = array('email' => $_POST['email']);

            $rules = array('email' => 'required|email|max:100|unique:users,email,' . $user->id);



            if (Config::get('auth.require_username') && Config::get('auth.username_change')) {

                $data['username'] = $_POST['username'];

                $rules['username'] = 'required|min:3|max:50|alpha_dash|unique:users,username,' . $user->id;

            }



            $validator = Validator::make($data, $rules);



            if ($validator->passes()) {

                $user->email = $_POST['email'];



                if (Config::get('auth.require_username') && Config::get('auth.username_change')) {

                    $user->username = $_POST['username'];

                }



                if ($user->save()) {

                    if (isset($_POST['locale'])) {

                        $locale = $_POST['locale'];

                        $locales = Config::get('app.locales');



                        if (array_key_exists($locale, $locales)) {

                            Usermeta::update($user->id, 'locale', $locale);

                        }

                    }



                    json_message();

                } else {

                    json_message(with(new MessageBag(array('error' => trans('errors.dbsave'))))->toArray(), false);

                }

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        // Account settings - Profile

        case 'settingsProfile':

            if (Auth::guest()) exit;



            $user = User::find(Auth::user()->id);



            $data = array('avatar_type' => $_POST['avatar_type']);



            $types = implode(',', array_keys(Config::get('auth.providers', array())));



            $rules = array('avatar_type' => "in:image,gravatar,$types");



            foreach (UserFields::all('user') as $key => $field) {

                if (!empty($field['validation'])) {

                    $data[$key] = @$_POST[$key];

                    $rules[$key] = $field['validation'];

                }

            }



            $validator = Validator::make($data, $rules);



            if ($validator->passes()) {



                $displayName = escape(@$_POST['display_name']);

                if (!empty($displayName)) {

                    $user->display_name = $displayName;

                }



                if ($user->save()) {

                    $fields = array_merge(UserFields::all('user'), array('avatar_type' => ''));



                    foreach ($fields as $key => $field) {

                        Usermeta::update($user->id, $key, escape(@$_POST[$key]), @$user->usermeta[$key]);

                    }



                    json_message();

                } else {

                    json_message(with(new MessageBag(array('error' => trans('errors.dbsave'))))->toArray(), false);

                }

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        // Account settings - Password

        case 'settingsPassword':

            if (Auth::guest()) exit;



            $user = User::find(Auth::user()->id);



            $validator = Validator::make(

                array(

                    'current_password' => $_POST['pass1'],

                    'new_password' => $_POST['pass2'],

                    'new_password_confirmation' => $_POST['pass3'],

                ),

                array(

                    'new_password' => 'required|between:4,30|confirmed',

                    'current_password' => strlen($user->password) ? 'required' : ''

                )

            );



            if ($validator->passes()) {

                if (!strlen($user->password) || (strlen($user->password) && Hash::check($_POST['pass1'], $user->password))) {

                    $user->password = Hash::make($_POST['pass2']);



                    if ($user->save()) {

                        json_message();

                    } else {

                        json_message(with(new MessageBag(array('error' => trans('errors.dbsave'))))->toArray(), false);

                    }

                } else {

                    json_message(with(new MessageBag(array('error' => trans('errors.current_password'))))->toArray(), false);

                }

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        // Account settings - Messages

        case 'settingsMessages':

            if (Auth::guest()) exit;



            if (isset($_POST['email_messages'])) {

                Usermeta::update(Auth::user()->id, 'email_messages', 1);

            } else {

                Usermeta::delete(Auth::user()->id, 'email_messages');

            }



            json_message(true);

            break;





        // Send Message

        case 'sendMessage':

            if (Auth::guest()) exit;



            if (!isset($_POST['to'], $_POST['message'])) exit;



            $isContact = Contact::check(Auth::user()->id, $_POST['to']);

            $isWebmaster = (int)$_POST['to'] == (int)Config::get('pms.webmaster');



            if (!$isContact && !$isWebmaster && !Auth::userCan('message_users')) {

                json_message(trans('errors.contact'), false);

            }



            $limit = Config::get('pms.limit');



            if (Message::limitExceed($limit, App::make('session')) && !Auth::userCan('message_users')) {

                json_message(trans('errors.message_limit'), false);

            }



            $maxlength = Config::get('pms.maxlength');



            $message = Message::send(Auth::user()->id, $_POST['to'], $_POST['message'], $maxlength);



            if (is_array($message)) {



                $sendEmail = Usermeta::get($_POST['to'], 'email_messages', true);

                if (!empty($sendEmail)) {

                    $user = User::find($_POST['to']);

                    if ($user) {

                        Mail::send('emails.message', array('body' => $_POST['message']), function ($message) use ($user) {

                            $message->to($user->email);

                            $message->subject(trans('emails.new_message_subject', array('user' => Auth::user()->display_name)));

                        });

                    }

                }



                json_message($message);

            } else if (is_object($message)) {

                json_message($message->toArray(), false);

            } else {

                json_message(trans('errors.db'), false);

            }

            break;





        // Send message to the Webmaster

        case 'webmasterContact':

            if (Auth::guest()) exit;



            if (!isset($_POST['message'])) exit;



            $limit = Config::get('pms.limit');



            if (Message::limitExceed($limit, App::make('session'))) {

                json_message(trans('errors.message_limit'), false);

            }



            $webmaster = Config::get('pms.webmaster');

            $maxlength = Config::get('pms.maxlength');



            $message = Message::send(Auth::user()->id, $webmaster, $_POST['message'], $maxlength);



            if (is_array($message)) {

                json_message($message);

            } else if (is_object($message)) {

                json_message($message->toArray(), false);

            } else {

                json_message(trans('errors.db'), false);

            }

            break;





        // Delete Message(s) for the logged user.

        case 'deleteMessage':

            if (Auth::guest()) exit;



            if (Message::delete(Auth::user()->id, @$_POST['id'])) {

                json_message(true);

            } else {

                json_message(trans('errors.unexpected'), false);

            }

            break;





        // Mark all messages as read for the logged user.

        case 'markAllAsRead':

            if (Auth::guest()) exit;



            json_message(Message::markAllAsRead(Auth::user()->id));

            break;





        // Add contact

        case 'addContact':

            if (Auth::guest()) exit;

            if (!isset($_POST['id'])) exit;



            json_message(Contact::add(Auth::user()->id, $_POST['id']));

            break;





        // Remove contact

        case 'removeContact':

            if (Auth::guest()) exit;

            if (!isset($_POST['id'])) exit;



            json_message(Contact::remove(Auth::user()->id, $_POST['id']));

            break;





        // Confirm contact

        case 'confirmContact':

            if (Auth::guest()) exit;

            if (!isset($_POST['id'])) exit;



            json_message(Contact::confirm(Auth::user()->id, $_POST['id']));

            break;





        //  Delete user (admin)

        case 'deleteUser':

            if (!Auth::userCan('delete_users')) {

                json_message(trans('errors.permission'), false);

            }



            if (!isset($_POST['user_id'])) exit;



            $id = $_POST['user_id'];



            if (!empty($id) && is_numeric($id)) {

                if (Auth::user()->id != $id) {

                    User::where('id', $id)->limit(1)->delete();



                    Usermeta::newQuery()->where('user_id', $id)->delete();



                    Message::newQuery()->where('to_user', $id)

                        ->orWhere('from_user', $id)

                        ->delete();



                    Contact::deleteAll($id);

                }

            }



            json_message();

            break;





        // Delete users (admin)

        case 'deleteUsers':

            if (!Auth::userCan('delete_users')) {

                json_message(trans('errors.permission'), false);

            }



            parse_str($_POST['users'], $data);



            if (isset($data['users'])) {

                $users = array();



                foreach ((array)$data['users'] as $key => $id) {

                    if (is_numeric($id) && $id != Auth::user()->id) {

                        $users[] = $id;

                    }

                }



                if (count($users)) {

                    $values = array_values($users);



                    User::whereIn('id', $values)->limit(count($users))->delete();



                    Usermeta::newQuery()->whereIn('user_id', $values)->delete();



                    Message::newQuery()->whereIn('to_user', $values)

                        ->orWhereIn('from_user', $values)

                        ->delete();



                    Contact::newQuery()->whereIn('user1', $values)

                        ->orWhereIn('user2', $values)

                        ->delete();

                }

            }



            json_message();

            break;





        // Send Email (admin)

        case 'sendEmail':



            if (!isset($_POST['to'], $_POST['subject'], $_POST['message'], $_POST['ClientId'])) exit;



            $validator = Validator::make(

                array(

                    'to' => $_POST['to'],

                    'subject' => $_POST['subject'],

                    'message' => $_POST['message'],

                    'ClientId' => $_POST['ClientId'],

                ),

                array(

                    'to' => 'required',

                    'subject' => 'required',

                    'message' => 'required',

                    'ClientId' => 'required',

                )

            );





            if ($validator->passes()) {

                $to = explode(';', $_POST['to']);



                $emails = array();

                foreach ($to as $email) {

                    $email = trim($email);



                    if (filter_var($email, FILTER_VALIDATE_EMAIL)) $emails[] = $email;

                }



                if (count($emails)) {

                    $subject = $_POST['subject'];

                    $message = $_POST['message'];

                    $ClientId = $_POST['ClientId'];



                    foreach ($emails as $email) {



                        $SettingsInfo2 = DB::table('settings')->where('id', '=', '1')->first();



/// שליחת מייל

                        $LunchName = $SettingsInfo2->CompanyName;

                        $ClientEmail = $email;



                        $mail = new PHPMailer();



                        $mail->IsSMTP(); // enable SMTP

                        $mail->SMTPAuth = true; // authentication enabled

                        $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                        $mail->Host = "smtp.sendgrid.net";

                        $mail->Port = 587; // or 587

                        $mail->IsHTML(true);

                        $mail->Username = EmailService::USERNAME_SENDGRID;

                        $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                        $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                        $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                        $mail->AddAddress($ClientEmail);

//Set the subject line

                        $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                        $mail->MsgHTML($message);

//Replace the plain text body with one created manually

//$mail->AltBody = ($message);



//Send the message, check for errors

                        if (!$mail->Send()) {

                            "Mailer Error: " . $mail->ErrorInfo;

                        } else {

                            "Message sent!";

                        }



                        /// סיום שליחת מייל





                        ///  שמירת העתק הודעה



                        $time = date('Y-m-d G:i:s');



                        $UserId = Auth::user()->id;

                        $CompanyNum = Auth::user()->CompanyNum;



                        $CompanyNum = DB::table('emaillog')->insertGetId(

                            array('ClientId' => $ClientId, 'Subject' => $subject, 'Text' => $message, 'Date' => $time, 'UserId' => $UserId, 'CompanyNum' => $CompanyNum));





                    }

                }



                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;



        // Delete conversation (admin)

        case 'deleteConversation':

            if (!Auth::userCan('message_users')) {

                json_message(trans('errors.permission'), false);

            }



            if (!isset($_POST['user_id'])) exit;



            $webmaster = Config::get('pms.webmaster');



            if (Message::deleteConversation($webmaster, $_POST['user_id'])) {

                json_message();

            } else {

                json_message(trans('errors.db'), false);

            }

            break;





        // Delete conversations (admin)

        case 'deleteConversations':

            if (!Auth::userCan('message_users')) {

                json_message(trans('errors.permission'), false);

            }



            if (!isset($_POST['conversations'])) exit;



            parse_str($_POST['conversations'], $data);



            if (isset($data['messages'])) {

                $webmaster = Config::get('pms.webmaster');



                foreach ((array)$data['messages'] as $userId) {

                    Message::deleteConversation($webmaster, $userId);

                }

            }



            json_message();

            break;





        // POS - Remarks



        case 'AddRemarks':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TempsIdRemarks' => $_POST['TempsIdRemarks']),

                array('TempsIdRemarks' => 'Required')

            );



            if ($validator->passes()) {



                $TempId = $_POST['TempsIdRemarks'];

                $Remarks = $_POST['Remarks'];



                DB::table('temp')

                    ->where('TempId', $TempId)

                    ->update(array('Remarks' => $Remarks));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // POS - Discount



        case 'AddDiscount':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TempsIdDiscount' => $_POST['TempsIdDiscount'], 'Discounts' => $_POST['Discounts']),

                array('TempsIdDiscount' => 'Required', 'Discounts' => 'integer|between:0,9999')

            );



            if ($validator->passes()) {



                $TempId = $_POST['TempsIdDiscount'];

                $Discount = $_POST['Discounts'];

                $DiscountType = $_POST['DiscountsType'];



                $Vat = DB::table('temp')->where('TempId', '=', $TempId)->pluck('Vat');

                $Total = DB::table('templist')->where('TempId', '=', $TempId)->sum('Itemtotal');

                $Totals = DB::table('templist')->where('TempId', '=', $TempId)->sum('Itemtotal');



                if ($DiscountType == '1') {



                    /// %



                    $NewDiscount = $Total * $Discount / 100;

                    $NewDiscount = round($NewDiscount, 1);

                    $Total = $Total - $NewDiscount;

                    $DiscountType2 = '%';



                } else if ($DiscountType == '2') {



                    $NewDiscount = $Discount;

                    $NewDiscount = round($NewDiscount, 1);

                    $Total = $Total - $Discount;

                    $DiscountType2 = '₪';





                } else {



                    $NewDiscount = $Discount;

                    $Total = $Total;

                    $DiscountType2 = '%';



                }



                $TotalVat = $Total * $Vat / 100;

                $TotalVat = round($TotalVat, 1);





                DB::table('temp')

                    ->where('TempId', $TempId)

                    ->update(array('Discount' => $Discount, 'DiscountType' => $DiscountType, 'DiscountAmount' => $NewDiscount, 'VatAmount' => $TotalVat));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // ביטול חיוב



        case 'POSCancelPayments':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('TempId' => $_POST['TempId'], 'TempListsId' => $_POST['TempListsId']),
                array('TempId' => 'Required', 'TempListsId' => 'Required')
            );

            if ($validator->passes()) {
                $StatusNew = '1';
                $StatusPay = '';
                $TempId = $_POST['TempId'];
                $TempListsId = $_POST['TempListsId'];
                $CompanyNum = Auth::user()->CompanyNum;

                $studioSettings = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                $TypeShva = $studioSettings->TypeShva;
                $MeshulamAPI = $studioSettings->MeshulamAPI;
                $MeshulamUserId = $studioSettings->MeshulamUserId;
                $LiveMeshulam = $studioSettings->LiveMeshulam;

                $Finalinvoicenum = $_POST['CancelPayments_Finalinvoicenum'];
                $TrueFinalinvoicenum = $_POST['CancelPayments_TrueFinalinvoicenum'];

                $studioSettings = Settings::getSettings($CompanyNum);
                $TempPaymentInfo = TempReceiptPayment::where('CompanyNum', '=', $CompanyNum)->where('TempId', '=', $TempId)->where('id', '=', $TempListsId)->first();

                if ($TempPaymentInfo->TypePayment == 1 || $TempPaymentInfo->TypePayment == 2 || $TempPaymentInfo->TypePayment == 4) {
                    $TempPaymentInfo->delete();
                    $StatusPay = lang('docs_receipt_0');
                } elseif ($TempPaymentInfo->TypePayment == 3) {
                    //// כרטיס אשראי

                    $client = new Client($_POST['TempId']);
                    $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                    $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                    $order->TempReceiptId = $TempPaymentInfo->id;
                    $order->save();

                    $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                    if ($TypeShva == PaymentTypeEnum::TYPE_YAAD) {
                        // Yaad

                        $tokenId = $TempPaymentInfo->TokenId;
                        $tokenModel = Token::where('id', $tokenId)->first();
                        if (!$tokenModel) {
                            throw new InvalidArgumentException('Token is not valid');
                        }

                        $order->TokenId = $tokenModel->id;
                        $order->save();

                        try {
                            $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                            $CCode = $paymentResult['CCode'];

                            if ($CCode == 0) {
                                $TempPaymentInfo->delete();
                                $StatusPay = lang('docs_receipt_0');
                            }
                        } catch (\Throwable $e) {
                            if (!is_numeric($e->getMessage())) {
                                LoggerService::error($e, LoggerService::CATEGORY_YAADSARIG);
                            }

                            // we keep CCode in message for Yaad
                            $CCode = $e->getMessage();
                            $StatusPay = @$StatusreditCard[$CCode];

                            if ($StatusPay == '') {
                                $StatusNew = '2';
                                $StatusPay = lang('unknow_error_meshulam');
                            }
                        }
                    } elseif ($TypeShva == PaymentTypeEnum::TYPE_MESHULAM) {
                        //// ביטול חיוב משולם

                        $TempInfo = DB::table('temp')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TempId)->first();
                        $UserId = Auth::user()->id;

                        try {
                            // $paymentResult = $paymentSystem->makeRefund($studioSettings->MeshulamAPI, $studioSettings->MeshulamUserId, $TempPaymentInfo->TransactionId, $TempPaymentInfo->PayToken, $TempPaymentInfo->Amount);
                            $paymentResult = $paymentSystem->makeRefund($studioSettings->MeshulamAPI, $studioSettings->MeshulamUserId, $TempPaymentInfo->YaadCode, $TempPaymentInfo->PayToken, $TempPaymentInfo->Amount);

                            $transaction = new Transaction();
                            $transaction->CompanyNum = $CompanyNum;
                            $transaction->ClientId = $TempId;
                            $transaction->UpdateTransactionDetails = serialize($paymentResult);
                            $transaction->UserId = 0;
                            $transaction->save();

                            $order->TransactionId = $transaction->id;
                            $order->save();

                            $TempPaymentInfo->delete();
                            $StatusPay = lang('docs_receipt_0');

                            $UpdateTransactionDetails = serialize($paymentResult);
                            $InsertTransaction = DB::table('transaction')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $UpdateTransactionDetails, 'UserId' => $UserId));
                        } catch (\Throwable $e) {
                            LoggerService::error($e, LoggerService::CATEGORY_MESHULAM);

                            DB::table('transaction_error')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $e->getMessage(), 'UserId' => $UserId));
                            $StatusNew = '2';
                            $StatusPay = $e->getMessage();
                        }
                    } elseif ($TypeShva == PaymentTypeEnum::TYPE_TRANZILA) {
                        //// ביטול חיוב טרנזילה

                        $TempInfo = DB::table('temp')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TempId)->first();
                        $UserId = Auth::user()->id;

                        try {
                            $tokenId = $TempPaymentInfo->TokenId;
                            $token = Token::where('id', $tokenId)->first();

                            $paymentResult = $paymentSystem->makeRefundWithToken($order, $token, $TempPaymentInfo->YaadCode, $TempPaymentInfo->ACode);

                            $transaction = new Transaction();
                            $transaction->CompanyNum = $CompanyNum;
                            $transaction->ClientId = $TempId;
                            $transaction->UpdateTransactionDetails = serialize($paymentResult);
                            $transaction->UserId = 0;
                            $transaction->save();

                            $order->TransactionId = $transaction->id;
                            $order->save();

                            $TempPaymentInfo->delete();
                            $StatusPay = lang('docs_receipt_0');

                            $UpdateTransactionDetails = serialize($paymentResult);
                            $InsertTransaction = DB::table('transaction')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $UpdateTransactionDetails, 'UserId' => $UserId));
                        } catch (\Throwable $e) {
                            LoggerService::error($e, LoggerService::CATEGORY_TRANZILA);

                            DB::table('transaction_error')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $e->getMessage(), 'UserId' => $UserId));
                            $StatusNew = '2';
                            $StatusPay = $e->getMessage();
                        }
                    }
                }

                //// עדכון יתרת תקבול חדשה

                $TempInfo = DB::table('temp')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TempId)->first();

                $Amount = @$TempInfo->Amount;

                $ExcessPay = DB::table('temp_receipt_payment')->where('CompanyNum', '=', $CompanyNum)->where('TempId', '=', $TempId)->sum('Excess');
                $MoneyPay = DB::table('temp_receipt_payment')->where('CompanyNum', '=', $CompanyNum)->where('TempId', '=', $TempId)->sum('Amount');

                $MoneyPay = $MoneyPay + $ExcessPay;

                $PriceMore = $Amount - $MoneyPay;

                json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'TypeDoc' => $TempInfo->TypeDoc, 'StatusNew' => $StatusNew, 'TrueFinalinvoicenum' => $TrueFinalinvoicenum, 'Finalinvoicenum' => $Finalinvoicenum));

            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        // Doc - Discount



        case 'AddDiscountDoc':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TempsIdDiscount' => $_POST['TempsIdDiscount'], 'Discounts' => $_POST['Discounts']),

                array('TempsIdDiscount' => 'Required', 'Discounts' => 'Required')

            );



            if ($validator->passes()) {



                $TempId = $_POST['TempsIdDiscount'];

                $Discount = $_POST['Discounts'];

                $DiscountType = $_POST['DiscountsType'];

                $CompanyNum = Auth::user()->CompanyNum;



                $CheckDocs = DB::table('temp')->where('id', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->first();





                if ($DiscountType == '1') {



                    if ($Discount > '100') {

                        $Discount = '100';

                    }



                } else {



                    if ($Discount > $CheckDocs->Amount) {

                        $Discount = $CheckDocs->Amount;

                    }



                }





                DB::table('temp')

                    ->where('id', $TempId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->update(array('Discount' => $Discount, 'DiscountType' => $DiscountType));



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // POS - Discount Item



        case 'AddDiscountItem':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('DiscountTempList' => $_POST['DiscountTempList'], 'DiscountsItem' => $_POST['DiscountsItem']),

                array('DiscountTempList' => 'Required', 'DiscountsItem' => 'integer|between:0,9999')

            );



            if ($validator->passes()) {



                $TempId = $_POST['DiscountTempId'];

                $TempList = $_POST['DiscountTempList'];

                $DiscountsItem = $_POST['DiscountsItem'];

                $DiscountsTypeItem = $_POST['DiscountsTypeItem'];

                $DiscountsItemtotal = $_POST['DiscountPrice'];





                if ($DiscountsTypeItem == '1') {



                    $NewDiscount = $DiscountsItemtotal * $DiscountsItem / 100;

                    $Itemtotal = $DiscountsItemtotal - $NewDiscount;



                } else {



                    $NewDiscount = $DiscountsItemtotal - $DiscountsItem;

                    $Itemtotal = $DiscountsItemtotal - $NewDiscount;



                }



                DB::table('temp')

                    ->where('TempList', $TempList)

                    ->where('TempId', $TempId)

                    ->update(array('ItemDiscount' => $DiscountsItem, 'ItemDiscountType' => $DiscountsTypeItem, 'Itemtotal' => $Itemtotal));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // POS - Vat



        case 'AddVat':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TempsIdVat' => $_POST['TempsIdVat'], 'Vats' => $_POST['Vats']),

                array('TempsIdVat' => 'Required', 'Vats' => 'integer|between:0,9999')

            );



            if ($validator->passes()) {



                $TempId = $_POST['TempsIdVat'];

                $Vat = $_POST['Vats'];

                $CompanyNum = Auth::user()->CompanyNum;



                $Discount = DB::table('temp')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->pluck('Discount');

                $DiscountType = DB::table('temp')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->pluck('DiscountType');

                $Total = DB::table('templist')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->sum('Itemtotal');

                $Totals = DB::table('templist')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->sum('Itemtotal');



                if ($DiscountType == '1') {



                    /// %



                    $NewDiscount = $Total * $Discount / 100;



                    $Total = $Total - $NewDiscount;

                    $DiscountType2 = '%';



                } else if ($DiscountType == '2') {



                    $NewDiscount = $Discount;

                    $Total = $Total - $Discount;

                    $DiscountType2 = '₪';



                } else {



                    $NewDiscount = $Discount;

                    $Total = $Total;

                    $DiscountType2 = '%';



                }



                $TotalVat = $Total * $Vat / 100;



                $TotalVat = round($TotalVat, 1);



                DB::table('temp')

                    ->where('TempId', $TempId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->update(array('Vat' => $Vat, 'VatAmount' => $TotalVat));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Doc - Vat



        case 'AddVatDoc':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TempsIdVat' => $_POST['TempsIdVat'], 'Vats' => $_POST['Vats']),

                array('TempsIdVat' => 'Required', 'Vats' => 'Required')

            );



            if ($validator->passes()) {



                $TempId = $_POST['TempsIdVat'];

                $VatOption = $_POST['Vats'];

                $CompanyNum = Auth::user()->CompanyNum;



                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                if ($SettingsInfo->CompanyVat == '0') {

                    $Vat = $SettingsInfo->Vat;

                } else {

                    $Vat = $SettingsInfo->Vat;

                }





                /// הוסף מע"מ

                if ($VatOption == '1') {



                    DB::table('temp')

                        ->where('id', $TempId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('Vat' => $Vat));



                    DB::table('templist')

                        ->where('TempId', $TempId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('Vat' => $Vat));





                } /// הורד מע"מ

                else {



                    DB::table('temp')

                        ->where('id', $TempId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('Vat' => '0'));



                    DB::table('templist')

                        ->where('TempId', $TempId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('Vat' => '0'));





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;

////// Client

// Client - Edit



        case 'EditClient':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array(
                    'ClientId' => $_POST['ClientId'],
                    'BusinessType' => $_POST['BusinessType'],
                    'PaymentRole' => $_POST['PaymentRole'],
                    'Company' => $_POST['Company'] ?? '',
                    'FirstName' => $_POST['FirstName'],
                    'LastName' => $_POST['LastName'],
//                    'ContactMobile' => $_POST['ContactMobile'],
                    'ContactPhone' => $_POST['ContactPhone'] ?? '',
                    'ContactFax' => $_POST['ContactFax'] ?? '',
                    'WebSite' => $_POST['WebSite'] ?? '',
                    'Email' => $_POST['Email'] ?? '',
                    'Dob' => @$_POST['Dob'],
                    'City' => @$_POST['City'],
                    'Street' => @$_POST['Street'],
                    'StreetH' => @$_POST['StreetH'],
                    'Number' => @$_POST['Number'],
                    'PostCode' => @$_POST['PostCode'],
                    'POBox' => @$_POST['POBox'],
                    'Flat' => @$_POST['Flat'],
                    'Floor' => @$_POST['Floor'],
                    'Entry' => @$_POST['Entry'],
                    'Remarks' => @$_POST['Remarks'],
                    'Gender' => @$_POST['Gender'],
                    'Vat' => $_POST['Vat'],
                    'GetEmail' => @$_POST['GetEmail'],
                    'GetSMS' => @$_POST['GetSMS'],
                    'Status' => $_POST['Status'],
                ),
                array(
                    'ClientId' => 'Required',
                    'BusinessType' => 'Required',
                    'PaymentRole' => 'Required',
                    'FirstName' => 'Required',
                    'LastName' => 'Required',
                    'Vat' => 'Required',
                    'Status' => 'Required'
                )
            );

            if ($validator->passes()) {
                $ClientId = $_POST['ClientId'];
                $BusinessType = $_POST['BusinessType'];
                $PaymentRole = $_POST['PaymentRole'];
                $Company = trim(@$_POST['Company']);
                $FirstName = trim($_POST['FirstName']);
                $LastName = trim($_POST['LastName']);
                $CompanyName = trim($_POST['FirstName']) . ' ' . trim($_POST['LastName']);
                $CompanyId = trim(@$_POST['CompanyId']);
                $ContactMobile = trim($_POST['ContactMobile']);
                $ContactPhone = @$_POST['ContactPhone'];
                $ContactFax = @$_POST['ContactFax'];
                $WebSite = @$_POST['WebSite'];
                $Email = $_POST['Email'] ? trim($_POST['Email']) : '';
                $Dob = @$_POST['Dob'];

//			if (@$Dob == '') {$Dob = '0000-00-00';}

                $City = @$_POST['City'];

                if (@$City == '') {
                    $City = '0';
                }

                $Street = @$_POST['Street'];

                if (@$Street == '') {
                    $Street = '0';
                }

                if (@$Street == '99999999') {
                    $StreetH = @$_POST['StreetH'];
                } else {
                    $StreetH = '';
                }

                $Number = @$_POST['Number'];
                $PostCode = @$_POST['PostCode'];
                $POBox = @$_POST['POBox'];
                $Flat = @$_POST['Flat'];
                $Floor = @$_POST['Floor'];
                $Entry = @$_POST['Entry'];
                $Remarks = @$_POST['Remarks'];
                $Gender = @$_POST['Gender'];
                $Vat = $_POST['Vat'];
                $GetEmail = @$_POST['GetEmail'];

                if (@$GetEmail == '') {
                    $GetEmail = '1';
                }

                $GetSMS = @$_POST['GetSMS'];

                if (@$GetSMS == '') {
                    $GetSMS = '1';
                }

                $Status = $_POST['Status'];
                $PayClientId = @$_POST['PayClientId'];
                $ClassLevel = $_POST['ClassLevel'] ?? [];
                (new Rank())->updateClientRank ($ClientId, $ClassLevel);

                $Medical = @$_POST['Medical'];

                if (@$Medical == '') {
                    $Medical = '0';
                }

                $Takanon = @$_POST['Takanon'];

                if (@$Takanon == '') {
                    $Takanon = '0';
                }

                $RFID = @$_POST['RFID'];

                if (@$PayClientId == '') {
                    $PayClientId = '0';
                }

                if ($Dob == '') {
                    $Dob = null;
                }

                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', $ClientId)->first();
                $time = date('Y-m-d G:i:s');
                $ArchiveId = null;
                $isMinor = !empty($ClientInfo) && $ClientInfo->parentClientId != 0;

//                if((!$isMinor && !preg_match(ClientService::MOBILE_REGEX, $ContactMobile)) ||
//                    ($isMinor && !empty($ContactMobile) && !preg_match(ClientService::MOBILE_REGEX, $ContactMobile))) {
//                    json_message(lang('mobile_req_ajax'), false);
//                    exit;
//                }

                if (@$RFID != '') {
                    if (@$ClientInfo->RFID != @$RFID || @$ClientInfo->RFID == '') {
                        $ClientCheckRFID = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('RFID', '=', $RFID)->first();

                        if ($ClientCheckRFID) {
                            json_message(lang('rfid_exists_ajax'), false);
                            exit;
                        }
                    }
                } else {
                    $RFID = null;
                }

                $mobile = substr($ContactMobile, 0, 4) == '+972' ? substr($ContactMobile, 4, strlen($ContactMobile)) : $ContactMobile;
                $mobile = substr($mobile, 0, 1) == '0' ? substr($mobile, 1, strlen($mobile)) : $mobile;

                $mobileRegex = "^[\+972|\+91|\+1|\+44]*0?".$mobile."$";
                $isMobileExist = DB::table('client')->where('id', '!=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->whereRaw("ContactMobile regexp '".$mobileRegex."'")->first();

//                if (!empty($isMobileExist->id) && $ClientInfo->ContactMobile != $ContactMobile) {
//                    json_message(lang('mobile_exists_ajax'), false);
//                    exit;
//                }

                // israeli phone number with country code
                $ContactMobile = !empty($mobile) ? '+972'.$mobile : '';

                if ($ClientInfo->Email != $Email && $Email) {
                    $CheckClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('Email', $Email)->first();
                    if (@$CheckClientInfo->id != '') {
                        json_message(lang('email_exists_ajax'), false);
                        exit;
                    }
                }

                if ($ClientInfo->id == $PayClientId) {
                    json_message(lang('main_customer_error_ajax'), false);
                    exit;
                }

                if ($PayClientId != '0') {
                    $CheckClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', $PayClientId)->first();
                    if ($CheckClientInfo && $CheckClientInfo->PayClientId != 0) {
                        json_message(lang('minor_customer_error_ajax'), false);
                        exit;
                    }
                }

                $ArchiveDate = null;

                if ($Status == '1' && $ClientInfo->Status != $Status) {     //// has changed
                    $ArchiveDate = date('Y-m-d H:i:s');
                } else if($Status == '1' && $Status == $ClientInfo->Status) {
                    $ArchiveDate = $ClientInfo->ArchiveDate;
                    $ArchiveId = $ClientInfo->ArchiveReasonId;
                }



                ///// בדיקת סטטוס קודם

                if ($ClientInfo->Status == '2') {
                    $PipeNow = DB::table('pipeline')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->first();

                    if (!empty($PipeNow)) {
                        ///הצלחה
                        $GetSuccessInfo = DB::table('leadstatus')->where('CompanyNum', '=', $CompanyNum)->where('PipeId', '=', $PipeNow->MainPipeId)->where('Act', '=', '1')->first();

                        /// כשלון
                        $GetFailsInfo = DB::table('leadstatus')->where('CompanyNum', '=', $CompanyNum)->where('PipeId', '=', $PipeNow->MainPipeId)->where('Act', '=', '2')->first();
                        $convertDate = date('Y-m-d H:i:s');
                        if ($Status == '0') {
                            $GetPipeId = $GetSuccessInfo->id;

                        } else if ($Status == '1') {
                            $GetPipeId = $GetFailsInfo->id;

                        } else {
                            $GetPipeId = $PipeNow->PipeId;
                            $convertDate = $PipeNow->ConvertDate;
                        }

                        $CheckActStatus = DB::table('leadstatus')->where('CompanyNum', $CompanyNum)->where('id', $GetPipeId)->first();
                        $StatusFilter = !empty($CheckActStatus) ? $CheckActStatus->Act : 0;

                        $pipelineRow =  DB::table('boostapp.pipeline')
                            ->where('id', $PipeNow->id)
                            ->update(array('PipeId' => $GetPipeId ,'StatusFilter' => $StatusFilter,'ConvertDate' => $convertDate));
                    }
                }

                $Brands = $_POST['Brands'];

                $BrandsInfo = DB::table('boostapp.brands')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Brands)->first();

                if ($BrandsInfo && $BrandsInfo->BrandName != '') {
                    $BrandName = $BrandsInfo->BrandName;
                } else {
                    $BrandName = lang('primary_branch');
                }

                if (@$CompanyId == '') {
                    $CompanyId = '000000000';
                }

                // Update Client
                DB::table('client')
                    ->where('id', $ClientId)
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array(
                        'Brands' => $Brands,
                        'BusinessType' => $BusinessType,
                        'PaymentRole' => $PaymentRole,
                        'Company' => $Company ?? '',
                        'FirstName' => $FirstName,
                        'LastName' => $LastName,
                        'CompanyName' => $CompanyName,
                        'CompanyId' => $CompanyId,
//                        'ContactMobile' => $ContactMobile,
                        'ContactPhone' => @$ContactPhone,
                        'ContactFax' => @$ContactFax,
                        'WebSite' => @$WebSite,
                        'Email' => $Email ?? '',
                        'Dob' => @$Dob,
                        'City' => @$City,
                        'Street' => @$Street,
                        'StreetH' => @$StreetH,
                        'Number' => @$Number,
                        'PostCode' => @$PostCode,
                        'POBox' => @$POBox,
                        'Flat' => @$Flat,
                        'Floor' => @$Floor,
                        'Entry' => @$Entry,
                        'Remarks' => @$Remarks,
                        'Gender' => @$Gender,
                        'Vat' => $Vat,
                        'GetEmail' => @$GetEmail,
                        'GetSMS' => @$GetSMS,
                        'Status' => $Status,
                        'PayClientId' => $PayClientId,
                        'BrandName' => $BrandName,
                        'ArchiveDate' => $ArchiveDate,
                        'Medical' => $Medical,
                        'Takanon' => $Takanon,
                        'RFID' => $RFID,
                        'ArchiveReasonId' => $ArchiveId
                    ));

                DB::table('client_activities')
                    ->where('ClientId', $ClientId)
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('ClientStatus' => $Status));

                DB::table('boostapplogin.studio')
                    ->where('ClientId', '=', $ClientId)
                    ->where('CompanyNum', '=', $CompanyNum)
                    ->update(array('Medical' => $Medical, 'Takanon' => $Takanon));


                if ($Status != '2') {
                    DB::table('boostapplogin.studio')
                        ->where('ClientId', '=', $ClientId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->update(array('Status' => $Status, 'Medical' => $Medical, 'Takanon' => $Takanon));
                }

                if ($Status == '1') {
                    /** @var ClassStudioAct[] $DeletesActClasses */
                    $DeletesActClasses = ClassStudioAct::where('CompanyNum', $CompanyNum)->where('FixClientId', '=', $ClientId)->where('ClassDate', '>', date('Y-m-d'))->get();

                    foreach ($DeletesActClasses as $DeletesActClass) {
                        $DeletesActClass->changeStatus('5');

                        ///// ספירת שיעורים

                        $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('GroupNumber', '=', $DeletesActClass->GroupNumber)->where('ClassType', '=', '1')->orderBy('ClassCount', 'DESC')->first();

                        if ($ClassInfo) {
                            $update = ClassStudioDate::updateClassRegistersCount($DeletesActClass->ClassId, $DeletesActClass->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                        }

                    }

                    CreateLogMovement(//FontAwesome Icon
                        lang('log_archived_ajax'), //LogContent
                        $ClientId //ClientId
                    );

                    DB::table('client_activities')
                        ->where('ClientId', $ClientId)
                        ->where('Status', '0')
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('Status' => '2', 'Reason' => lang('moved_to_archive')));

                    DB::table('classstudio_dateregular')
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('ClientId', '=', $ClientId)
                        ->delete();
                }

                CreateLogMovement(lang('customer_edit_done_ajax'), $ClientId);

                $AppStudio = DB::table('boostapplogin.studio')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();


//                if ($AppStudio && !$isMinor) {
                    // todo: try to fix client release - 2022-11-22, not update the boostapplogin.users fields on updating card

//                    DB::table('boostapplogin.users')
//                        ->where('id', $AppStudio->UserId)
//                        ->update(array(
//                            'display_name' => $CompanyName,
//                            'FirstName' => $FirstName,
//                            'LastName' => $LastName,
//                            'email' => $Email,
//                            'username' => $Email,
//                            'newUsername' => $ContactMobile,
//                            'ContactMobile' => $ContactMobile
//                        ));
//                }

                //// בדיקת כרטיסית אב
                $CheckCleintPayment = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                $BalanceAmount = '0.00';

                if ($CheckCleintPayment && $CheckCleintPayment->PayClientId != 0) {
                    $PayClientId = $CheckCleintPayment->PayClientId;

                    $BalanceAmount += DB::table('client_activities')
                        ->where('ClientId', '=', $PayClientId)
                        ->where('CompanyNum', $CompanyNum)
                        ->where('CancelStatus', '=', '0')
                        ->where('isDisplayed',  1)
                        ->sum('BalanceMoney');

                    DB::table('client')
                        ->where('id', $ClientId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('BalanceAmount' => '0.00'));


                    DB::table('client_activities')
                        ->where('ClientId', $ClientId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('PayClientId' => $PayClientId));

                } else {

                    $PayClientId = $ClientId;
                    $BalanceAmount += DB::table('client_activities')
                        ->where('ClientId', '=', $ClientId)
                        ->where('CompanyNum', $CompanyNum)
                        ->where('CancelStatus', '=', '0')
                        ->where('isDisplayed',  1)
                        ->sum('BalanceMoney');



                    DB::table('client_activities')
                        ->where('ClientId', $ClientId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('PayClientId' => 0));
                }

                $CheckClientInfoer = DB::table('client')->where('CompanyNum', $CompanyNum)->where('PayClientId', $PayClientId)->get();

                if (!empty($CheckClientInfoer)) {
                    foreach ($CheckClientInfoer as $CheckClientInfo) {
                        if (@$CheckClientInfo->id != '') {
                            $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $CheckClientInfo->id)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');
                        }
                    }
                }

                DB::table('client')
                    ->where('id', $PayClientId)
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('BalanceAmount' => $BalanceAmount));

                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;





// Client Contact - Add



        case 'AddNewContactClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ContactName' => $_POST['ContactName'], 'ContactMobile' => $_POST['ContactMobile']),

                array('ContactName' => 'Required', 'ContactMobile' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;

                $ClientId = $_POST['ClientId'];

                $JobsRole = $_POST['JobsRole'];

                $ContactName = $_POST['ContactName'];

                $ContactMobile = $_POST['ContactMobile'];

                $ContactPhone = $_POST['ContactPhone'];

                $ContactFax = $_POST['ContactFax'];

                $ContactEmail = $_POST['ContactEmail'];



                DB::table('clientcontact')->insert(

                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'JobsRole' => $JobsRole, 'ContactName' => $ContactName, 'ContactMobile' => $ContactMobile, 'ContactPhone' => $ContactPhone, 'ContactFax' => $ContactFax, 'ContactEmail' => $ContactEmail));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





// Client Contact - Edit



        case 'EditClientContact':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ContactName' => $_POST['ContactName'], 'ContactMobile' => $_POST['ContactMobile']),

                array('ContactName' => 'Required', 'ContactMobile' => 'Required')

            );



            if ($validator->passes()) {



                $JobsRole = $_POST['JobsRole'];

                $ContactName = $_POST['ContactName'];

                $ContactMobile = $_POST['ContactMobile'];

                $ContactPhone = $_POST['ContactPhone'];

                $ContactFax = $_POST['ContactFax'];

                $ContactEmail = $_POST['ContactEmail'];



                $ContactId = $_POST['ContactIds'];





                DB::table('clientcontact')

                    ->where('id', $ContactId)

                    ->update(array('JobsRole' => $JobsRole, 'ContactName' => $ContactName, 'ContactMobile' => $ContactMobile, 'ContactPhone' => $ContactPhone, 'ContactFax' => $ContactFax, 'ContactEmail' => $ContactEmail));



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



// Client Contact - Del



        case 'DelClientContact':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ContactId' => $_POST['ContactId']),

                array('ContactId' => 'Required')

            );



            if ($validator->passes()) {



                $ContactId = $_POST['ContactId'];



                DB::table('clientcontact')->where('id', '=', $ContactId)->where('CompanyNum', '=', $CompanyNum)->delete();





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



// SettingsNotification - Edit



        case 'SettingsNotification':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ItemId' => $_POST['ItemId']),
                array('ItemId' => 'Required')
            );

            if ($validator->passes()) {

                $ItemId = $_POST['ItemId'];
                $Status = $_POST['Status'];
                $SendOption = $_POST['SendOption'];
                $SendStudioOption = $_POST['SendStudioOption'];
                $SendClientsTypeOption = $_POST['SendClientsTypeOption'] ?? 0;

                if ($Status == '0' && $SendOption == '') json_message(lang('select_message_type_ajax'), false);
                if ($Status == '0' && $SendStudioOption == '') json_message(lang('select_notification_type_ajax'), false);

                if ($SendOption == 'BA999') $FixSendOption = 'BA999';
                else if ($SendOption == 'BA000') $FixSendOption = 'BA000';
                else  $FixSendOption = implode(',', $_POST['SendOption']);

                if ($SendStudioOption == 'BA999') $FixSendStudioOption = 'BA999';
                else if ($SendStudioOption == 'BA000') $FixSendStudioOption = 'BA000';
                else $FixSendStudioOption = implode(',', $_POST['SendStudioOption']);

                if ($Status == '1') {
                    $FixSendOption = 'BA000';
                    $FixSendStudioOption = 'BA000';
                }

                $SendClientsTypeOption = is_numeric($SendClientsTypeOption) ? $SendClientsTypeOption : "0";
                $SendClientsTypeOption = !preg_match("/(0|1|2)/", $SendClientsTypeOption) ? 0 : $SendClientsTypeOption;
                $template = Notificationcontent::find($ItemId);



                $Dates = date('Y-m-d G:i:s');
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;



                if ($template && $CompanyNum != 100) {
                    $text = Auth::user()->display_name.' אישר את תנאי השימוש עבור שליחת התראה בwhtsapp לתבנית '.$template->TypeName;
                    DB::table('notificationcontent')
                        ->where('id', $ItemId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('Status' => $Status, 'SendOption' => $FixSendOption, 'SendStudioOption' => $FixSendStudioOption, 'SendClientsTypeOption' => $SendClientsTypeOption));

                    if($SendOption == SendOption::SEND_OPTION_WHATSAPP) {
                        DB::table('log')->insert([
                            'UserId' => $UserId,
                            'CompanyNum' => $CompanyNum,
                            'Text' => $text,
                            'Dates' => date('Y-m-d H:i:s')
                        ]);
                    }

                }

                json_message();

            } else json_message($validator->errors()->toArray(), false);

            break;





// Settings Client Beesoft - Edit



        case 'EditSettings':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ContactEmail' => $_POST['ContactEmail'], 'ContactMobile' => $_POST['ContactMobile']),

                array('ContactEmail' => 'Required', 'ContactMobile' => 'Required')

            );



            if ($validator->passes()) {



                $Street = $_POST['Street'];

                $Number = $_POST['Number'];

                $City = $_POST['City'];

                $Zip = $_POST['Zip'];

                $POBox = $_POST['POBox'];

                $ContactMobile = $_POST['ContactMobile'];

                $ContactPhone = $_POST['ContactPhone'];

                $ContactFax = $_POST['ContactFax'];

                $WebSite = $_POST['WebSite'];

                $ContactEmail = $_POST['ContactEmail'];



                $NikuyMsBamakor = $_POST['NikuyMsBamakor'];

                $NikuyMsBamakorDate = $_POST['NikuyMsBamakorDate'];



                $ContactId = '1';



                $time = date('Y-m-d G:i:s');



                $UserId = Auth::user()->id;





                DB::table('settings')

                    ->where('id', $ContactId)

                    ->update(array('Street' => $Street, 'Number' => $Number, 'City' => $City, 'Zip' => $Zip, 'POBox' => $POBox, 'WebSite' => $WebSite, 'Email' => $ContactEmail, 'ChangeDate' => $time, 'NikuyMsBamakor' => $NikuyMsBamakor, 'NikuyMsBamakorDate' => $NikuyMsBamakorDate, 'User' => $UserId, 'ContactMobile' => $ContactMobile, 'ContactPhone' => $ContactPhone, 'ContactFax' => $ContactFax));



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





// Tech Users - Add



        case 'addtech':





            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('email' => $_POST['email'], 'ContactMobile' => $_POST['ContactMobile'], 'FirstName' => $_POST['FirstName'], 'LastName' => $_POST['LastName']),

                array('email' => 'required|email|max:100|unique:users', 'ContactMobile' => 'numeric|digits:10|required', 'FirstName' => 'Required', 'LastName' => 'Required')

            );



            if ($validator->passes()) {

                $classUsers = new Users();

                $mobileRegex = Client::mobileRegex;
                if(!preg_match($mobileRegex, $_POST['ContactMobile'])) {
                    json_message(lang('phone_format_incorrect_ajax'), false);
                    exit;
                }
                $user = new User;

                $username = $_POST['email'];
                $email = $_POST['email'];

                if ($classUsers->isEmailExists(strtolower($email))){
                    json_message(lang('system_mail_exists_ajax'), false);
                    return;
                }

                $role_id = $_POST['role_id'];
                $CompanyNum = Auth::user()->CompanyNum;

                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                $BrandsMain = $SettingsInfo->BrandsMain;

                function rand_strings($length)

                {
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    return substr(str_shuffle($chars), 0, $length);
                }



                $RandomPassword = rand_strings(6);
                $pass1 = Hash::make($RandomPassword);
                $firstname = $_POST['FirstName'];
                $lastname = $_POST['LastName'];
                $SendInfo = $_POST['SendInfo'];
                $CompanyId = $_POST['CompanyId'] ?? '000000000';

                $Dob = $_POST['Dob'] ?? '0000-00-00';

                $Gender = $_POST['Gender'];

                $Coach = $_POST['Coach'];



                $AgentNumber = @$_POST['AgentNumber'];

                $AgentEXT = @$_POST['AgentEXT'];

                $phone = $_POST['ContactMobile'];

                if ($classUsers->isPhoneExist($CompanyNum, $phone)) {
                    json_message(lang('mobile_exists_ajax'), false);
                    return;
                }

                $user->email = $_POST['email'];


                $firstName = escape(@$_POST['FirstName']);

                $lastName = escape(@$_POST['LastName']);



                if (!empty($firstName) && !empty($lastName)) {

                    $display_name = "{$firstName} {$lastName}";

                } elseif (!empty(@$_POST['username'])) {

                    $display_name = @$_POST['username'];

                }





                $NewClientid = DB::table('users')->insertGetId(array(
                    'username' => $username,
                    'email' => $email,
                    'password' => $pass1,
                    'CompanyNum' => $CompanyNum,
                    'BrandsMain' => $BrandsMain,
                    'display_name' => $display_name,
                    'status' => 1,
                    'role_id' => $role_id,
                    'FirstName' => $firstName,
                    'LastName' => $lastName,
                    'ContactMobile' => $phone,
                    'AgentNumber' => @$AgentNumber,
                    'AgentEXT' => @$AgentEXT,
                    'Coach' => $Coach,
                    'CompanyId' => $CompanyId,
                    'Dob' => $Dob,
                    'Gender' => $Gender
                ));



                DB::table('usermeta')->insert(array('user_id' => $NewClientid, 'meta_key' => 'first_name', 'meta_value' => $firstName));

                DB::table('usermeta')->insert(array('user_id' => $NewClientid, 'meta_key' => 'last_name', 'meta_value' => $lastName));

                DB::table('usermeta')->insert(array('user_id' => $NewClientid, 'meta_key' => 'locale', 'meta_value' => 'he'));





                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                if ($SendInfo == '0') {

/// שליחת מייל הצטרפות לשותף

                    $LunchLink = App::url();

                    $LunchName = $SettingsInfo->CompanyName;

                    $ClientEmail = $email;

                    $subject = $display_name.' '.lang('welcome_boostapp_ajax').' '.$LunchName.' '.lang('login_inside_ajax');

                    $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180" height="63" /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_two_ajax').  $display_name . ',</span><br /><br />

			 '.lang('boostapp_login_ajax').' ' . $LunchName . ':<br />

			

			 <br />

			 '.lang('boostapp_url_ajax').'<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

             '.lang('username_ajax').' ' . $email . '<br>

             '.lang('first_password_ajax').' ' . $RandomPassword . '<br>



<br>

'.lang('email_notice_one_ajax').'<br>

'.lang('email_notice_two_ajax').'			 

			 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';





                    $mail = new PHPMailer();



                    $mail->IsSMTP(); // enable SMTP

                    $mail->SMTPAuth = true; // authentication enabled

                    $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                    $mail->Host = "smtp.sendgrid.net";

                    $mail->Port = 587; // or 587

                    $mail->IsHTML(true);

                    $mail->Username = EmailService::USERNAME_SENDGRID;

                    $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                    $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                    $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                    $mail->AddAddress($ClientEmail);

//Set the subject line

                    $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                    $mail->MsgHTML($message);

//Replace the plain text body with one created manually

                    $mail->AltBody = ($message);



//Send the message, check for errors

                    if (!$mail->Send()) {

                        "Mailer Error: " . $mail->ErrorInfo;

                    } else {

                        "Message sent!";

                    }



                    /// סיום שליחת מייל



                }



                json_message(Config::get('auth.login_redirect'));

            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





// Tech Users - Edit



        case 'edittech':

            if (Auth::guest()) {
                exit;
            }

            $validator = Validator::make(
                array('ContactMobile' => $_POST['ContactMobile'], 'email' => $_POST['ContactEmail'], 'FirstName' => $_POST['FirstName'], 'LastName' => $_POST['LastName']),
                array('ContactMobile' => 'numeric|digits:10|required', 'email' => 'required|email|max:100', 'FirstName' => 'Required', 'LastName' => 'Required')
            );

            if ($validator->passes()) {

                $operatorUser = Auth::user();
                $CompanyNum = $operatorUser->CompanyNum;
                $classUsers = new Users();
                $Password = $_POST['Password'] ?? '';
                $SendEmail = $_POST['SendEmail'] ?? 0;
                $firstName = $_POST['FirstName'];
                $lastName = $_POST['LastName'];
                $display_name = "{$firstName} {$lastName}";

                $CompanyId = $_POST['CompanyId'] ?? '000000000';
                $Dob = $_POST['Dob'] ?? '0000-00-00';
                $Gender = $_POST['Gender'];
                $Coach = $_POST['Coach'];

                $AgentNumber = $_POST['AgentNumber'] ?? '';
                $AgentEXT = $_POST['AgentEXT'] ?? '';
                $About = $_POST['About'] ?? '';
                $agentId = $_POST['ClientId'];

                $ContactEmail = $_POST['ContactEmail'];
                $phone = $_POST['ContactMobile'];
                $setMultiNull = false;

                $CheckUsers = Users::find($agentId);

                if(!empty($Password) && !PasswordHelper::test((string)$Password)){
                    echo json_message(lang('error_entering_password_app'), false);
                    return;
                }

                if (!isset($CheckUsers)) {
                    json_message(lang('error_detected_cal'), false);
                    return;
                }

                $mobileRegex = Client::mobileRegex;
                if(!preg_match($mobileRegex, $phone)) {
                    json_message(lang('phone_format_incorrect_ajax'), false);
                    return;
                }

                if (($ContactEmail != $CheckUsers->email) && $classUsers->isEmailExists(strtolower($ContactEmail))) {
                    json_message(lang('system_mail_exists_ajax'), false);
                    return;
                }


                if($phone != $CheckUsers->ContactMobile) {
                    if ($classUsers->isPhoneExist($CompanyNum, $phone)) {
                        json_message(lang('mobile_exists_ajax'), false);
                        return;
                    }
                    // mobile has changed user need to verify again - removing multi user
                    $setMultiNull = true;
                }

                $ActiveStatus = $_POST['ActiveStatus'];
                $ClientId = $_POST['ClientId'];
                $role_id = $_POST['role_id'];

                if ($ActiveStatus == 1) {
                    $NewActiveStatus = 0;
                } else {
                    $NewActiveStatus = 1;
                }

                $updateArr = [
                    'ContactMobile' => $phone,
                    'email' => $ContactEmail,
                    'display_name' => $display_name,
                    'role_id' => $role_id,
                    'FirstName' => $firstName,
                    'LastName' => $lastName,
                    'AgentNumber' => $AgentNumber,
                    'AgentEXT' => $AgentEXT,
                    'Coach' => $Coach,
                    'CompanyId' => $CompanyId,
                    'Dob' => $Dob,
                    'ActiveStatus' => $NewActiveStatus,
                    'status' => $ActiveStatus,
                    'Gender' => $Gender,
                    'About' => $About
                ];
                if($setMultiNull) {
                    $updateArr['multiUserId'] = null;
                }

                if (!empty($Password)) {
                    $RandomPassword = $Password;
                    $pass1 = Hash::make($RandomPassword);
                    $updateArr['password'] = $pass1;


                    if ($BrandsMain == 0) {
                        DB::table('users')
                            ->where('id', $ClientId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update($updateArr);

                    } else {
                        DB::table('users')
                            ->where('id', $ClientId)
                            ->where('BrandsMain', $BrandsMain)
                            ->update($updateArr);
                    }

                    $SettingsInfo = DB::table('settings')->where('CompanyNum', $CompanyNum)->first();
                    if ($SendEmail == 1) {
                        if ($BrandsMain == 0) {
                            $ClientEmails = DB::table('users')->where('CompanyNum', $CompanyNum)->where('id', $ClientId)->first();
                        } else {
                            $ClientEmails = DB::table('users')->where('BrandsMain', $BrandsMain)->where('id', $ClientId)->first();
                        }

/// שליחת מייל הצטרפות לשותף
                        $LunchLink = App::url();
                        $LunchName = $SettingsInfo->CompanyName;
                        $ClientEmail = $ClientEmails->email;
                        $subject = $display_name.' '.lang('welcome_boostapp_ajax').' '.$LunchName.' '.lang('login_inside_ajax');
                        $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180" height="63" /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_ajax').' ' . $display_name . ',</span><br /><br />

			 '.lang('boostapp_login_ajax').' ' . $LunchName . ':<br />

			

			 <br />

			 '.lang('crm_url_ajax').'<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

             '.lang('username_ajax').' ' . $ClientEmail . '<br>

             '.lang('email_password_ajax').' ' . $Password . '<br>



<br>

'.lang('email_notice_one_ajax').'		 

			 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';


                        $mail = new PHPMailer();
                        $mail->IsSMTP(); // enable SMTP
                        $mail->SMTPAuth = true; // authentication enabled
                        $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail
                        $mail->Host = "smtp.sendgrid.net";
                        $mail->Port = 587; // or 587
                        $mail->IsHTML(true);
                        $mail->Username = EmailService::USERNAME_SENDGRID;
                        $mail->Password = EmailService::PASSWORD_SENDGRID;

//Set who the message is to be sent from
                        $mail->SetFrom($EmailReplay, $EmailReplayName);
//Set an alternative reply-to address
                        $mail->AddReplyTo($EmailReplay, $EmailReplayName);
//Set who the message is to be sent to
                        $mail->AddAddress($ClientEmail);
//Set the subject line
                        $mail->Subject = ($subject);
//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body
                        $mail->MsgHTML($message);
//Replace the plain text body with one created manually
                        $mail->AltBody = ($message);

                        if (!$mail->Send()) {
                            "Mailer Error: " . $mail->ErrorInfo;
                        } else {
                            "Message sent!";
                        }
                    }
                } else {

                    if ($BrandsMain == 0) {

                        DB::table('users')
                            ->where('id', $ClientId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update($updateArr);

                    } else {

                        DB::table('users')
                            ->where('id', $ClientId)
                            ->where('BrandsMain', $BrandsMain)
                            ->update($updateArr);
                    }
                }

                json_message(Config::get('auth.login_redirect'));

            } else {

                json_message($validator->errors()->toArray(), false);

            }
            break;


        case 'EditMyProfile':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('AffId' => $_POST['AffId']),
                array('AffId' => 'Required')
            );

            if ($validator->passes()) {
                $FirstName = @$_POST['FirstName'];
                $LastName = @$_POST['LastName'];
                $display_name = $FirstName . ' ' . $LastName;
                $MobileSend = @$_POST['MobileSend'];
                $EmailSend = @$_POST['EmailSend'];
                $AgentNumber = @$_POST['AgentNumber'];
                $AgentEXT = @$_POST['AgentEXT'];
                $SendEmail = @$_POST['SendEmail'];
                $Password = @$_POST['Password'];
                $ContactEmail = @$_POST['ContactEmail'];
                $Type = @$_POST['Type'];
                $AffId = Auth::user()->id;

                if(!PasswordHelper::test((string)$Password)){
                    echo json_message(lang('error_entering_password_app'), false);
                    exit();
                }

                if ($Type == '2') {
                    $UpdateUser = DB::table('users')
                        ->where('id', $AffId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('MobileSend' => $MobileSend, 'EmailSend' => $EmailSend));

                } else if ($Type == '3') {
                    $UpdateUser = DB::table('users')
                        ->where('id', $AffId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('AgentNumber' => $AgentNumber, 'AgentEXT' => $AgentEXT));

                } else if ($Type == '1') {

                    if (@$Password == '') {

                        $UpdateUser = DB::table('users')
                            ->where('id', $AffId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('display_name' => $display_name, 'FirstName' => $FirstName, 'LastName' => $LastName));

                    } else {
                        $pass1 = Hash::make($Password);
                        $UpdateUser = DB::table('users')
                            ->where('id', $AffId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('Password' => $pass1, 'display_name' => $display_name, 'FirstName' => $FirstName, 'LastName' => $LastName));

                        $SettingsInfo = DB::table('settings')->where('CompanyNum', $CompanyNum)->first();

                        if (@$SendEmail == '1') { /// שליחת מייל הצטרפות לשותף

                            $LunchLink = App::url();
                            $LunchName = $SettingsInfo->CompanyName;
                            $ClientEmail = $email;
                            $subject = $display_name . lang('welcome_boostapp_ajax') . $LunchName . lang('login_inside_ajax');

                            $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
                            
                            <html xmlns="http://www.w3.org/1999/xhtml">
                            <head>
                                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
                            </head>
                                <body>
                                    <table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">
                                        <tr>
                                            <td>
                                                <table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">
                                                    <tr>
                                                        <td align="left" valign="top">
                                                            <table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">
                                                                <tr>
                                                                    <td width="275" align="right" valign="middle" style="padding:30px;">
                                                                        <img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180" height="63" />
                                                                    </td>
                                                                    <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;">
                                                                        <strong>'.lang('system_notice').'</strong><br />' . date('d/m/Y') . '
                                                                    </td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    </tr>
                                                <tr>
                                                <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">
                                                    <tr>
                                                        <td style="font-family:Arial; font-size:12px;padding-bottom:15px;">
                                                            <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_ajax').' ' . $display_name . ',</span>
                                                            <br/>
                                                            <br/>
                                                            '.lang('boostapp_login_ajax').' ' . $LunchName . ': 
                                                            <br />
                                                            <br />
                                                            '.lang('crm_url_ajax').'<br>
                                                            <a href="' . $LunchLink . '">' . $LunchLink . '</a>
                                                            <br>
                                                            <br>
                                                            '.lang('username_ajax').' ' . $email . '
                                                            <br>
                                                            '.lang('email_password_ajax').' ' . $Password . '
                                                            <br>
                                                            <br>
                                                            '.lang('email_notice_one_ajax').'			 
                                                            <br />
                                                            <br /> 
                                                            '.lang('good_luck_ajax').'<br />
                                                            '.lang('team_ajax').' <strong>' . $LunchName . '</strong>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p>
                                    </td>
                                    </tr>
                                    </table>
                                </body>
                            </html>';

                            $mail = new PHPMailer();
                            $mail->IsSMTP(); // enable SMTP
                            $mail->SMTPAuth = true; // authentication enabled
                            $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail
                            $mail->Host = "smtp.sendgrid.net";
                            $mail->Port = 587; // or 587
                            $mail->IsHTML(true);
                            $mail->Username = EmailService::USERNAME_SENDGRID;
                            $mail->Password = EmailService::PASSWORD_SENDGRID;
                            $mail->SetFrom($EmailReplay, $EmailReplayName); //Set who the message is to be sent from
                            $mail->AddReplyTo($EmailReplay, $EmailReplayName); //Set an alternative reply-to address
                            $mail->AddAddress($ClientEmail); //Set who the message is to be sent to
                            $mail->Subject = ($subject); //Set the subject line
                            $mail->MsgHTML($message); //Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body
                            $mail->AltBody = ($message); //Replace the plain text body with one created manually

                            //Send the message, check for errors
                            if (!$mail->Send()) {
                                "Mailer Error: " . $mail->ErrorInfo;
                            } else {
                                "Message sent!";
                            }

                            /// סיום שליחת מייל
                        }
                    }
                } json_message();

            } else {
                json_message($validator->errors()->toArray(), false);
            }
        break;





// EditAff - Edit



        case 'EditAff':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('FirstName' => $_POST['FirstName'], 'LastName' => $_POST['LastName'], 'ContactMobile' => $_POST['ContactMobile'], 'ContactEmail' => $_POST['ContactEmail']),

                array('FirstName' => 'Required', 'LastName' => 'Required', 'ContactMobile' => 'Required', 'ContactEmail' => 'Required')

            );



            if ($validator->passes()) {



                $FirstName = $_POST['FirstName'];

                $LastName = $_POST['LastName'];



                $display_name = $FirstName . ' ' . $LastName;



                $ContactMobile = $_POST['ContactMobile'];

                $ContactEmail = $_POST['ContactEmail'];

                $ActiveStatus = $_POST['ActiveStatus'];

                $ShowLead = $_POST['ShowLead'];



                $role_id = $_POST['role_id'];



                $SendEmail = @$_POST['SendEmail'];

                $Password = @$_POST['Password'];



                $AgentNumber = $_POST['AgentNumber'];

                $AgentEXT = $_POST['AgentEXT'];





                $ContactEmail = $_POST['ContactEmail'];

                $AffId = $_POST['AffId'];



                if ($ShowLead == '1') {

                    DB::table('winnerslead')->where('AffId', '=', $AffId)->where('CompanyNum', '=', $CompanyNum)->delete();

                }



                if (@$Password == '') {



                    $UpdateUser = DB::table('users')

                        ->where('id', $AffId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('display_name' => $display_name, 'role_id' => $role_id, 'FirstName' => $FirstName, 'LastName' => $LastName, 'ContactMobile' => $ContactMobile, 'ShowLead' => $ShowLead, 'ActiveStatus' => $ActiveStatus, 'AgentNumber' => $AgentNumber, 'AgentEXT' => $AgentEXT, 'email' => $ContactEmail));



                } else {



                    $pass1 = Hash::make($Password);



                    $UpdateUser = DB::table('users')

                        ->where('id', $AffId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('Password' => $pass1, 'display_name' => $display_name, 'role_id' => $role_id, 'FirstName' => $FirstName, 'LastName' => $LastName, 'ContactMobile' => $ContactMobile, 'ShowLead' => $ShowLead, 'ActiveStatus' => $ActiveStatus, 'email' => $ContactEmail));





                    $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                    if (@$SendEmail == '1') {

                        ///  שולח פרטי התחברות מחדש



/// שליחת מייל הצטרפות לשותף

                        $LunchLink = App::url();

                        $LunchName = $SettingsInfo->CompanyName;

                        $ClientEmail = $email;

                        $subject = $display_name.' '.lang('welcome_boostapp_ajax').' '.$LunchName.' '.lang('login_inside_ajax');

                        $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180" height="63" /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_two_ajax').' '. $display_name . ',</span><br /><br />

			 '.lang('boostapp_login_ajax').' ' . $LunchName . ':<br />

			

			 <br />

			 '.lang('crm_url_ajax').'<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

             '.lang('username_ajax').' ' . $email . '<br>

             '.lang('email_password_ajax').' ' . $RandomPassword . '<br>



<br>

'.lang('email_notice_one_ajax').'			 

			 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';





                        $mail = new PHPMailer();



                        $mail->IsSMTP(); // enable SMTP

                        $mail->SMTPAuth = true; // authentication enabled

                        $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                        $mail->Host = "smtp.sendgrid.net";

                        $mail->Port = 587; // or 587

                        $mail->IsHTML(true);

                        $mail->Username = EmailService::USERNAME_SENDGRID;

                        $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                        $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                        $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                        $mail->AddAddress($ClientEmail);

//Set the subject line

                        $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                        $mail->MsgHTML($message);

//Replace the plain text body with one created manually

                        $mail->AltBody = ($message);



//Send the message, check for errors

                        if (!$mail->Send()) {

                            "Mailer Error: " . $mail->ErrorInfo;

                        } else {

                            "Message sent!";

                        }



                        /// סיום שליחת מייל





                    } else {

                    }





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Coupon - Add



        case 'AddCoupon':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title'], 'PageId' => $_POST['PageId'], 'Code' => $_POST['Code'], 'Amount' => $_POST['Amount'], 'StartDate' => $_POST['StartDate'], 'EndDate' => $_POST['EndDate'], 'Status' => $_POST['Status'], 'Limit' => $_POST['Limit']),

                array('Title' => 'Required', 'PageId' => 'Required', 'Code' => 'Required', 'Amount' => 'Required', 'StartDate' => 'Required', 'EndDate' => 'Required', 'Status' => 'Required', 'Limit' => 'Required')

            );



            if ($validator->passes()) {



                $Title = $_POST['Title'];

                $PageId = $_POST['PageId'];

                $Code = $_POST['Code'];

                $StartDate = $_POST['StartDate'];

                $EndDate = $_POST['EndDate'];

                $Status = $_POST['Status'];

                $Amount = $_POST['Amount'];

                $Limit = $_POST['Limit'];

                $CountLimit = $_POST['Limit'];



                $Items = DB::table('coupon')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Title' => $Title, 'PageId' => $PageId, 'Code' => $Code, 'StartDate' => $StartDate, 'EndDate' => $EndDate, 'Status' => $Status, 'Amount' => $Amount, 'Limit' => $Limit, 'CountLimit' => $CountLimit));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



// Coupon - Edit



        case 'EditCoupon':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId'], 'Title' => $_POST['Title'], 'PageId' => $_POST['PageId'], 'Code' => $_POST['Code'], 'Amount' => $_POST['Amount'], 'StartDate' => $_POST['StartDate'], 'EndDate' => $_POST['EndDate'], 'Status' => $_POST['Status']),

                array('ItemId' => 'Required', 'Title' => 'Required', 'PageId' => 'Required', 'Code' => 'Required', 'Amount' => 'Required', 'StartDate' => 'Required', 'EndDate' => 'Required', 'Status' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ItemId'];

                $CompanyNum = $CompanyNum;

                $Title = $_POST['Title'];

                $PageId = $_POST['PageId'];

                $Code = $_POST['Code'];

                $StartDate = $_POST['StartDate'];

                $EndDate = $_POST['EndDate'];

                $Status = $_POST['Status'];

                $Amount = $_POST['Amount'];



                $Item = DB::table('coupon')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Title' => $Title, 'PageId' => $PageId, 'Code' => $Code, 'StartDate' => $StartDate, 'EndDate' => $EndDate, 'Status' => $Status, 'Amount' => $Amount));



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



///// הוספת מסמכים במערכת



        case 'AddDocs':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('Client' => $_POST['Client'], 'Dates' => $_POST['Dates'], 'TypeDoc' => $_POST['TypeDoc'], 'DocTempId' => $_POST['DocTempId']),
                array('Client' => 'Required', 'Dates' => 'Required', 'TypeDoc' => 'Required', 'DocTempId' => 'Required')

            );

            if (!$validator->passes()) {
                json_message($validator->errors()->toArray(), false);
            }

            try {
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $SettingsInfo = Settings::getSettings($CompanyNum);

                $TypeShva = $SettingsInfo->TypeShva;
                $MeshulamAPI = $SettingsInfo->MeshulamAPI;
                $MeshulamUserId = $SettingsInfo->MeshulamUserId;
                $LiveMeshulam = $SettingsInfo->LiveMeshulam;
                $Brands = $SettingsInfo->BrandsMain;
                $ClientId = $_POST['Client'] ?? 0;
                $UserDate = $_POST['Dates'];
                $TypeHeader = $_POST['TypeDoc'];
                $DocTempId = $_POST['DocTempId'] ?? 0;
                $ManualInvoice = '0';
                $DocConvert = '0';
                $PaymentRole = $_POST['PaymentRole'];
                $Remarks = @$_POST['Remarks'];

                if ($ClientId == '') {
                    json_message(lang('select_customer_ajax'), false);
                    exit;
                }

                $DocAction = @$_POST['DocAction'];
                $Dates = date('Y-m-d H:i:s');

/// בדיקת מספור מסמך + תאריך אחרון
                $DocsTableNew = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->first();
                if ($DocsTableNew->Status == '1') {
                    json_message(lang('error_generate_doc_ajax'), false);
                    exit;
                }

//// בדיקת סניפים
                if (@$SettingsInfo->BrandsMain != '0' && @$SettingsInfo->MainAccounting == '1') {
                    $TrueCompanyNum = $SettingsInfo->BrandsMain;
                } else {
                    $TrueCompanyNum = $CompanyNum;
                }


/// סוג מסמך וקבלת ID
                $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('TrueCompanyNum', '=', $TrueCompanyNum)->first();
                $TypeDoc = $GetDocsId->id;

/// בדיקת מספור מסמך + תאריך אחרון
                $DocsCountGets = DB::table('docs')->where('TrueCompanyNum', '=', $TrueCompanyNum)->where('TypeHeader', '=', $TypeHeader)->orderBy('TypeNumber', 'DESC')->orderBy('id', 'DESC')->first();
                $TypeNumber = !isset($DocsCountGets->TypeNumber) ? $DocsTableNew->TypeNumber : $DocsCountGets->TypeNumber + 1;

/// סוג מסמך וקבלת ID
                $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->first();
                $TypeDoc = $GetDocsId->id;
                $DocsTableNew = DB::table('docstable')->where('id', '=', $TypeDoc)->where('CompanyNum', '=', $CompanyNum)->first();

                if ($ClientId == '0') {
                    $DocFullName = $_POST['DocFullName'] ?? '';
                    $DocPhone = $_POST['DocPhone'] ?? null;
                    $DocEmail = $_POST['DocEmail'] ?? '';
                    $DocStatus = $_POST['DocStatus'] ?? 1;

                    if (empty($DocFullName)) {
                        json_message(lang('type_random_customer_ajax'), false);
                        exit;
                    }

                    if (empty($DocPhone)) {
                        json_message(lang('type_random_phone_ajax'), false);
                        exit;
                    }

                    $DocAct = 0;
                    if (!empty($DocPhone)) {
                        $DocPhone = substr($DocPhone, 0, 4) == '+972' ? substr($DocPhone, 4, strlen($DocPhone)) : $DocPhone;
                        $DocPhone = substr($DocPhone, 0, 1) == '0' ? substr($DocPhone, 1, strlen($DocPhone)) : $DocPhone;
                        $CheckClient = DB::table('client')->where('ContactMobile', 'like', '%'.$DocPhone)->where('CompanyNum', '=', $CompanyNum)->first();
                        if ($CheckClient) {
                            $ClientId = $CheckClient->id;
                            $DocAct = 1;
                        }
                    }

                    if ($DocAct == 0) {
                        //// מספור לקוחות
                        $ClientCheckId = DB::table('boostapp.client')->where('CompanyNum', '=', $CompanyNum)->orderBy('id', 'DESC')->first();

                        if ($ClientCheckId) {
                            $MemberId = $ClientCheckId->MemberId + 1;
                        } else {
                            $MemberId = '1';
                        }

                        $CheckBrands = DB::table('brands')->where('FinalCompanynum', '=', $CompanyNum)->first();
                        if ($CheckBrands) {
                            $Brands = $CheckBrands->id;
                            $BrandName = $CheckBrands->BrandName;
                        } else {
                            $Brands = '0';
                            $BrandName = lang('primary_branch');
                        }

                        if (empty($DocFullName)) {
                            json_message(lang('type_random_name_ajax'), false);
                            exit;
                        }

                        $DocFullName = trim($DocFullName);
                        $namePos = strpos($DocFullName, ' ');
                        if ($namePos) {
                            $FirstName = substr($DocFullName, 0, $namePos);
                            $LastName = substr($DocFullName, $namePos + 1);
                        } else {
                            $FirstName = $DocFullName ?? '';
                            $LastName = '';
                        }

                        $ClientId = ClientService::addClient([
                            'Brands' => $Brands,
                            'CompanyName' => $DocFullName,
                            'Email' => $DocEmail,
                            'ContactMobile' => $DocPhone,
                            'FirstName' => $FirstName,
                            'LastName' => $LastName,
                            'AppPassword' => $DocPhone,
                            'BrandName' => $BrandName,
                        ], $DocStatus);
                        $ClientId = $ClientId['Message']['client_id'];
                    }
                }

/// שמירת נתוני מסמך כללי
                $ClientDocInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();
                if ($ClientDocInfo->Company == '') {
                    $Company = $ClientDocInfo->CompanyName;
                } else {
                    $Company = $ClientDocInfo->Company;
                }

                $CheckPymentRole = DB::table('paymentrole')->where('id', '=', $PaymentRole)->first();
                if (!$CheckPymentRole || $PaymentRole == '1') {
                    $PaymentRole = '1';
                    $PaymentTime = $UserDate;
                } else {
                    if ($PaymentRole == '2' || $PaymentRole == '3' || $PaymentRole == '4' || $PaymentRole == '5' || $PaymentRole == '7') {
                        $NowDate = date("Y-m-t", strtotime($UserDate));
                        $AddTime = @$CheckPymentRole->Time;
                        $AddMe = '+' . $AddTime . ' day';
                        $PaymentTime = date('Y-m-d', strtotime($NowDate . $AddMe));
                    } else {
                        $PaymentTime = date("Y-m-t", strtotime($UserDate));
                    }
                }

                $DocDate = date('Y-m-d');
                $DocMonth = date("m", strtotime($UserDate));
                $DocYear = date("Y", strtotime($UserDate));
                $DocTime = date('H:i:s');
                $City = '';

                if ($ClientDocInfo->City != '0') {
                    $BusinessSettingsCity = DB::table('cities')->where('CityId', '=', $ClientDocInfo->City)->first();
                    $City = $BusinessSettingsCity->City;
                }

                if ($ClientDocInfo->Street == '0' || $ClientDocInfo->Street == '99999999') {
                    $Street = $ClientDocInfo->StreetH;
                } else {
                    $BusinessSettingsStreet = DB::table('street')->where('id', '=', $ClientDocInfo->Street)->first();
                    $Street = $BusinessSettingsStreet->Street ?? null;
                }

/// מחולל מספר מסמך
                $GroupNumber = rand(1262055681, 1262055681);
                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);
                $RandomNumber = uniqid($GroupNumber);

                $CheckBrands = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('id','=',$ClientId)->first();
                if ($CheckBrands) {
                    $Brands = $CheckBrands->Brands;
                    $BrandName = $CheckBrands->BrandName;
                } else {
                    $Brands = '0';
                    $BrandName = lang('primary_branch');
                }

                if ($TypeHeader != '400') {
                    $TempDocInfo = DB::table('temp')->where('id', '=', $DocTempId)->where('CompanyNum', '=', $CompanyNum)->first();
                    $Refound = '0';

                    if ($DocsTableNew->TypeHeader == '305') {
                        $Minus = '';
                        $PayStatus = '0';
                        $Refound = '0';
                        $BalanceAmount = $TempDocInfo->Amount;
                    } else if ($DocsTableNew->TypeHeader == '330') {
                        $Minus = '-';
                        $PayStatus = '0';
                        $Refound = '1';
                        $BalanceAmount = '0.00';
                    } else if ($DocsTableNew->TypeHeader == '300' && $TempDocInfo->ActDocs == '4') {
                        $Minus = '-';
                        $PayStatus = '7';
                        $Refound = '1';
                        $BalanceAmount = '0.00';
                    } else {
                        $Minus = '';
                        $Refound = '0';
                        $PayStatus = '0';
                        $BalanceAmount = $TempDocInfo->Amount;
                    }

                    $DocId = DB::table('docs')->insertGetId(
                        array('CompanyNum' => $CompanyNum,
                            'Brands' => $Brands,
                            'TrueCompanyNum' => $TrueCompanyNum,
                            'TypeDoc' => $TypeDoc,
                            'TypeHeader' => $DocsTableNew->TypeHeader,
                            'TypeNumber' => $TypeNumber,
                            'ClientId' => $ClientId,
                            'UserDate' => $UserDate,
                            'Dates' => $Dates,
                            'Amount' => $Minus . $TempDocInfo->Amount,
                            'Vat' => $TempDocInfo->Vat,
                            'VatAmount' => $Minus . $TempDocInfo->VatAmount,
                            'DiscountType' => $TempDocInfo->DiscountType,
                            'Discount' => $TempDocInfo->Discount,
                            'DiscountAmount' => $Minus . '' . $TempDocInfo->DiscountAmount,
                            'PaymentRole' => $TempDocInfo->PaymentRole,
                            'Remarks' => $Remarks,
                            'Company' => $Company,
                            'CompanyId' => $ClientDocInfo->CompanyId,
                            'ContactName' => $ClientDocInfo->CompanyName,
                            'Mobile' => $ClientDocInfo->ContactMobile,
                            'Phone' => $ClientDocInfo->ContactPhone,
                            'Fax' => $ClientDocInfo->ContactFax,
                            'Email' => $ClientDocInfo->Email,
                            'UserId' => $UserId,
                            'ManualInvoice' => $ManualInvoice,
                            'DocConvert' => $DocConvert,
                            'PaymentTime' => $PaymentTime,
                            'BalanceAmount' => $BalanceAmount,
                            'Street' => $Street,
                            'Number' => $ClientDocInfo->Number,
                            'PostCode' => $ClientDocInfo->PostCode,
                            'City' => $City,
                            'Accounts' => $DocsTableNew->Accounts,
                            'DocDate' => $DocDate,
                            'DocMonth' => $DocMonth,
                            'DocYear' => $DocYear,
                            'DocTime' => $DocTime,
                            'RandomUrl' => $RandomNumber,
                            'PayStatus' => $PayStatus,
                            'ManualInvoice' => '1',
                            'BusinessCompanyId' => $SettingsInfo->CompanyId,
                            'BusinessType' => $SettingsInfo->BusinessType,
                            'Refound' => $Refound,
                            'TypeShva' => $TypeShva,
                            'CpaType' => $SettingsInfo->CpaType
                        ));


                    /// שמירת נתוני מסמך פריטים
                    $TempDocListsInfo = DB::table('templist')->where('TempId', '=',$DocTempId)->where('CompanyNum', '=', $CompanyNum)->get();
                    foreach ($TempDocListsInfo as $TempDocListInfo) {
                        $DocsList = DB::table('docslist')->insertGetId(
                            array('CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'TrueCompanyNum' => $TrueCompanyNum, 'TypeDoc' => $TypeDoc, 'TypeHeader' => $DocsTableNew->TypeHeader, 'TypeNumber' => $TypeNumber, 'DocsId' => $DocId, 'ClientId' => $ClientId, 'ItemId' => $TempDocListInfo->ItemId, 'SKU' => $TempDocListInfo->SKU, 'ItemName' => $TempDocListInfo->ItemName, 'ItemText' => $TempDocListInfo->ItemText, 'ItemPrice' => $Minus . $TempDocListInfo->ItemPrice, 'ItemPriceVat' => $Minus . $TempDocListInfo->ItemPriceVat, 'ItemPriceVatDiscount' => $Minus . $TempDocListInfo->ItemPriceVatDiscount, 'ItemQuantity' => $Minus . $TempDocListInfo->ItemQuantity, 'ItemDiscountType' => $TempDocListInfo->ItemDiscountType, 'ItemDiscount' => $TempDocListInfo->ItemDiscount, 'ItemDiscountAmount' => $TempDocListInfo->ItemDiscountAmount, 'Itemtotal' => $Minus . $TempDocListInfo->Itemtotal, 'ItemTable' => $TempDocListInfo->ItemTable, 'Dates' => $Dates, 'UserDate' => $UserDate, 'TypeDocBasis' => $TempDocListInfo->TypeDocBasis, 'TypeDocBasisNumber' => $TempDocListInfo->TypeDocBasisNumber, 'Vat' => $TempDocListInfo->Vat, 'VatAmount' => $Minus . $TempDocListInfo->VatAmount, 'DocDate' => $DocDate, 'DocMonth' => $DocMonth, 'DocYear' => $DocYear, 'DocTime' => $DocTime, 'BusinessCompanyId' => $SettingsInfo->CompanyId, 'BusinessType' => $SettingsInfo->BusinessType));
                    }

                    if ($DocsTableNew->TypeHeader == '320') {
                        $item_details = new Item($TempDocListInfo->ItemId);
                        $class_docs2item = new docs2item(array(
                            'CompanyNum' => $CompanyNum,
                            'TrueCompanyNum' => $TrueCompanyNum,
                            'Brands' => $Brands,
                            'ClientId' => $ClientId,
                            'ItemId' => $item_details->id,
                            'DocsId' => $DocId,
                            'Amount' => $item_details->ItemPrice,
                            'Department' => $item_details->Department,
                            'MemberShip' => $item_details->MemberShip,
                            'ItemName' => $item_details->ItemName,
                            'UserDate' => $DocDate,
                            'BusinessCompanyId' => $SettingsInfo->CompanyId,
                            'BusinessType' => $SettingsInfo->BusinessType
                        ));

                        $class_docs2item->save();

                    } elseif (in_array($DocsTableNew->TypeHeader, array('300', '305'))) {
                        $class_tempReceiptItemList = new TempReceiptItemList(array(
                            'doc_id' => $DocId,
                            'item_id' => $TempDocListInfo->ItemId
                        ));
                        $class_tempReceiptItemList->save();
                    }


                    if ($DocsTableNew->TypeHeader == '320') {
                        /** @var TempReceiptPayment[] $GetAmounts */
                        $GetAmounts = TempReceiptPayment::where('TempId', '=', $DocTempId)->where('TypeDoc', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->get();
                        $TempAmount = 0;
                        foreach ($GetAmounts as $TempDocPaymentInfo) {
                            $TempAmount += $TempDocPaymentInfo->Amount;
                            $token = $TempDocPaymentInfo->token();
                            if ($token && $token->ClientId == 0) {
                                $token->updateClient($ClientId);
                            }

                            $DocsList = DB::table('docs_payment')->insertGetId([
                                'CompanyNum' => $CompanyNum,
                                'Brands' => $Brands,
                                'TrueCompanyNum' => $TrueCompanyNum,
                                'TypeDoc' => $TypeDoc,
                                'TypeHeader' => $TypeHeader,
                                'TypeNumber' => $TypeNumber,
                                'DocsId' => $DocId,
                                'ClientId' => $ClientId,
                                'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                'Amount' => $TempDocPaymentInfo->Amount,
                                'L4digit' => $TempDocPaymentInfo->L4digit,
                                'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                'CCode' => $TempDocPaymentInfo->CCode,
                                'ACode' => $TempDocPaymentInfo->ACode,
                                'Bank' => $TempDocPaymentInfo->Bank,
                                'Payments' => $TempDocPaymentInfo->Payments,
                                'Brand' => $TempDocPaymentInfo->Brand,
                                'BrandName' => $TempDocPaymentInfo->BrandName,
                                'Issuer' => $TempDocPaymentInfo->Issuer,
                                'tashType' => $TempDocPaymentInfo->tashType,
                                'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                'CheckDate' => $TempDocPaymentInfo->CheckDate,
                                'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                'BankDate' => $TempDocPaymentInfo->BankDate,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'Excess' => $TempDocPaymentInfo->Excess,
                                'UserDate' => $UserDate,
                                'DocDate' => $DocDate,
                                'DocMonth' => $DocMonth,
                                'DocYear' => $DocYear,
                                'DocTime' => $DocTime,
                                'CreditType' => $TempDocPaymentInfo->CreditType,
                                'StatusInvoice' => '1',
                                'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                'BusinessType' => $SettingsInfo->BusinessType,
                                'PayToken' => $TempDocPaymentInfo->PayToken,
                                'TransactionId' => $TempDocPaymentInfo->TransactionId,
                                'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                            ]);
                        }
                        if($TempAmount != $BalanceAmount)
                        {
                            json_message(lang('error_generate_doc_ajax'), false);
                            exit;
                        }
                    }

                    //// שינוי ססטוס מסמך מקורי
                    if ($TempDocInfo->DocsId != '0' && $DocAction != '7') {
                        DB::table('docs')
                            ->where('id', $TempDocInfo->DocsId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('PayStatus' => '6', 'BalanceAmount' => '0.00', 'Refound' => '1'));
                    }

                    if ($TempDocInfo->DocsId != '0' && $DocAction == '7') {
                        DB::table('docs')
                            ->where('id', $TempDocInfo->DocsId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('PayStatus' => '8', 'BalanceAmount' => '0.00'));
                    }

                    /// מחיקת נתונים
                    $TempDoc = DB::table('temp')->where('id', '=', $DocTempId)->where('CompanyNum', '=', $CompanyNum)->delete();
                    $TempDocList = DB::table('templist')->where('TempId', '=', $DocTempId)->where('CompanyNum', '=', $CompanyNum)->delete();
                    $TempDocPayment = TempReceiptPayment::where('TempId', '=', $DocTempId)->where('CompanyNum', '=', $CompanyNum)->delete();
                } //// הפקת קבלה
                else {
                    $Finalinvoicenum = @$_POST['Finalinvoicenum'];
                    $DocTempGroupNumber = @$_POST['DocTempGroupNumber'];
                    $Remarks = @$_POST['Remarks'];
                    $cleanmas = $_POST['cleanmas'];
                    $NikuyMsBamakor = $_POST['NikuyMsBamakor'];
                    $NikoysType = $_POST['NikoysTypes'];
                    $Minus = '-';

                    $GetAmount = TempReceiptPayment::where('TempId', '=', $DocTempGroupNumber)
                        ->where('TypeDoc', '=', $TypeHeader)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->sum('Amount');
                    $TotalAmountInfo = $GetAmount;

                    /// קליטת חשבוניות שנבחרו
                    $ActivityJson = '';
                    $ActivityJson .= '{"data": [';

                    if (!empty($_POST['FinalinvoiceId'])) {
                        $NewTempId = explode(',', $_POST['FinalinvoiceId']);
                        $Newcount = count($NewTempId);
                        $Newi = '1';

                        foreach ($NewTempId as $check) {
                            $NewCheck = $check;
                            $segments = explode(':', $NewCheck);
                            $newinvoice = array_shift($segments);
                            $newvamount = array_shift($segments);
                            $DocsNewType = array_shift($segments);

//// בדיקת תקבול לחשבונית
                            if ($TotalAmountInfo >= $newvamount) {
                                $Item = DB::table('docs')
                                    ->where('id', $newinvoice)
                                    ->where('CompanyNum', $CompanyNum)
                                    ->update(array('PayStatus' => '3', 'BalanceAmount' => '0'));

                                $TotalAmountInfo = $TotalAmountInfo - $newvamount;
                                $InvoiceInfo = DB::table('docs')->where('id', '=', $newinvoice)->where('CompanyNum', $CompanyNum)->first();

                                $TrueDocsId = $InvoiceInfo->TypeNumber;
                                $TrueTypeHeader = $InvoiceInfo->TypeHeader;

                                if ($TrueTypeHeader == '305') {
                                    $ItemText = lang('invoice_number_ajax') . $TrueDocsId;
                                } else {
                                    $ItemText = lang('invoice_payment_number_ajax') . $TrueDocsId;
                                }
                                if ($Newcount == $Newi) {
                                    $ActivityJson .= '{"ItemText": "' . $ItemText . '", "ItemId": "' . $TrueDocsId . '", "OldBalanceMoney": "0", "NewAmount": "0"}';
                                } else {
                                    $ActivityJson .= '{"ItemText": "' . $ItemText . '", "ItemId": "' . $TrueDocsId . '", "OldBalanceMoney": "0", "NewAmount": "0"},';
                                }
                            } //// תשלום חלקי
                            else {
                                $TotalAmountInfo = $TotalAmountInfo;
                                $TotalAmountInfo = $newvamount - $TotalAmountInfo;
                                $BalanceAmount = $newvamount - $TotalAmountInfo;
                                $InvoiceInfo = DB::table('docs')->where('id', '=', $newinvoice)->where('CompanyNum', $CompanyNum)->first();
                                $TrueDocsId = $InvoiceInfo->TypeNumber;
                                $TrueTypeHeader = $InvoiceInfo->TypeHeader;
                                $CheckPayNew = $InvoiceInfo->Amount - $BalanceAmount;
                                $Item = DB::table('docs')
                                    ->where('id', $newinvoice)
                                    ->where('CompanyNum', $CompanyNum)
                                    ->update(array('PayStatus' => '2', 'BalanceAmount' => $CheckPayNew));
                                $TotalAmountInfo = '0';
                                if ($TrueTypeHeader == '305') {
                                    $ItemText = lang('invoice_number_ajax') . $TrueDocsId;
                                } else {
                                    $ItemText = lang('invoice_payment_number_ajax') . $TrueDocsId;
                                }
                                if ($Newcount == $Newi) {
                                    $ActivityJson .= '{"ItemText": "' . $ItemText . '", "ItemId": "' . $TrueDocsId . '", "OldBalanceMoney": "0", "NewAmount": "0"}';
                                } else {
                                    $ActivityJson .= '{"ItemText": "' . $ItemText . '", "ItemId": "' . $TrueDocsId . '", "OldBalanceMoney": "0", "NewAmount": "0"},';
                                }
                            }

                            $docItems = TempReceiptItemList::getItemsByDocID($newinvoice);

                            foreach ($docItems as $docItem){

                                $item_details = new Item($docItem->item_id);

                                $class_docs2item = new docs2item(array(
                                    'CompanyNum' => $CompanyNum,
                                    'TrueCompanyNum' => $TrueCompanyNum,
                                    'Brands' => $Brands,
                                    'ClientId' => $ClientId,
                                    'ItemId' => $item_details->id,
                                    'DocsId' => $newinvoice,
                                    'Amount' => $item_details->ItemPrice,
                                    'Department' => $item_details->Department,
                                    'MemberShip' => $item_details->MemberShip,
                                    'ItemName' => $item_details->ItemName,
                                    'UserDate' => $DocDate,
                                    'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                    'BusinessType' => $SettingsInfo->BusinessType
                                ));

                                $class_docs2item->save();

                                $docItem->delete();
                            }

                            ++$Newi;
                        }
                    }

                    $ActivityJson .= ']}';

                    $DocId = DB::table('docs')->insertGetId(
                        array('CompanyNum' => $CompanyNum,
                            'Brands' => $Brands,
                            'TrueCompanyNum' => $TrueCompanyNum,
                            'TypeDoc' => $TypeDoc,
                            'TypeHeader' => $DocsTableNew->TypeHeader,
                            'TypeNumber' => $TypeNumber,
                            'ClientId' => $ClientId,
                            'UserDate' => $UserDate,
                            'Dates' => $Dates,
                            'Amount' => $Minus . $GetAmount,
                            'Vat' => '0',
                            'VatAmount' => '0',
                            'DiscountType' => '0',
                            'Discount' => '0',
                            'DiscountAmount' => '0',
                            'PaymentRole' => '1',
                            'Remarks' => $Remarks,
                            'Company' => $Company,
                            'CompanyId' => $ClientDocInfo->CompanyId,
                            'ContactName' => $ClientDocInfo->CompanyName,
                            'Mobile' => $ClientDocInfo->ContactMobile,
                            'Phone' => $ClientDocInfo->ContactPhone,
                            'Fax' => $ClientDocInfo->ContactFax,
                            'Email' => $ClientDocInfo->Email,
                            'UserId' => $UserId,
                            'ManualInvoice' => $ManualInvoice,
                            'DocConvert' => $DocConvert,
                            'PaymentTime' => $PaymentTime,
                            'BalanceAmount' => '0',
                            'Street' => $Street,
                            'Number' => $ClientDocInfo->Number,
                            'PostCode' => $ClientDocInfo->PostCode,
                            'City' => $City,
                            'Accounts' => $DocsTableNew->Accounts,
                            'DocDate' => $DocDate,
                            'DocMonth' => $DocMonth,
                            'DocYear' => $DocYear,
                            'DocTime' => $DocTime,
                            'RandomUrl' => $RandomNumber,
                            'PayStatus' => '3',
                            'ManualInvoice' => '1',
                            'ActivityJson' => $ActivityJson,
                            'BusinessCompanyId' => $SettingsInfo->CompanyId,
                            'BusinessType' => $SettingsInfo->BusinessType,
                            'TypeShva' => $TypeShva,
                            'CpaType' => $SettingsInfo->CpaType
                        ));

                    /// קליטת אופי התשלום
                    /** @var TempReceiptPayment[] $GetAmounts */
                    $GetAmounts = TempReceiptPayment::where('TempId', '=', $DocTempGroupNumber)->where('TypeDoc', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->get();

                    foreach ($GetAmounts as $TempDocPaymentInfo) {
                        if ($TempDocPaymentInfo->TypePayment != '3') {
                            $DocsList = DB::table('docs_payment')->insertGetId([
                                'CompanyNum' => $CompanyNum,
                                'Brands' => $Brands,
                                'TrueCompanyNum' => $TrueCompanyNum,
                                'TypeDoc' => $TypeDoc,
                                'TypeHeader' => $TypeHeader,
                                'TypeNumber' => $TypeNumber,
                                'DocsId' => $DocId,
                                'ClientId' => $ClientId,
                                'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                'Amount' => $TempDocPaymentInfo->Amount,
                                'L4digit' => $TempDocPaymentInfo->L4digit,
                                'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                'CCode' => $TempDocPaymentInfo->CCode,
                                'ACode' => $TempDocPaymentInfo->ACode,
                                'Bank' => $TempDocPaymentInfo->Bank,
                                'Payments' => $TempDocPaymentInfo->Payments,
                                'Brand' => $TempDocPaymentInfo->Brand,
                                'BrandName' => $TempDocPaymentInfo->BrandName,
                                'Issuer' => $TempDocPaymentInfo->Issuer,
                                'tashType' => $TempDocPaymentInfo->tashType,
                                'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                'CheckDate' => $TempDocPaymentInfo->CheckDate,
                                'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                'BankDate' => $TempDocPaymentInfo->BankDate,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'Excess' => $TempDocPaymentInfo->Excess,
                                'UserDate' => $UserDate,
                                'DocDate' => $DocDate,
                                'DocMonth' => $DocMonth,
                                'DocYear' => $DocYear,
                                'DocTime' => $DocTime,
                                'CreditType' => $TempDocPaymentInfo->CreditType,
                                'StatusInvoice' => '1',
                                'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                'BusinessType' => $SettingsInfo->BusinessType,
                                'PayToken' => @$TempDocPaymentInfo->PayToken,
                                'TransactionId' => @$TempDocPaymentInfo->TransactionId,
                                'MeshulamPageCode' => null,
                            ]);
                        } /// פירוט תקבולי אשראי - כל תשלום בשורה נפרדת
                        else {
                            /// תשלום אחד
                            if ($TempDocPaymentInfo->Payments == '1') {
                                $UserDate = $TempDocPaymentInfo->UserDate;
                                $CreditDate = date('Y-m-d');

                                $DocsList = DB::table('docs_payment')->insertGetId([
                                    'CompanyNum' => $CompanyNum,
                                    'Brands' => $Brands,
                                    'TrueCompanyNum' => $TrueCompanyNum,
                                    'TypeDoc' => $TypeDoc,
                                    'TypeHeader' => $TypeHeader,
                                    'TypeNumber' => $TypeNumber,
                                    'DocsId' => $DocId,
                                    'ClientId' => $ClientId,
                                    'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                    'Amount' => $TempDocPaymentInfo->Amount,
                                    'L4digit' => $TempDocPaymentInfo->L4digit,
                                    'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                    'CCode' => $TempDocPaymentInfo->CCode,
                                    'ACode' => $TempDocPaymentInfo->ACode,
                                    'Bank' => $TempDocPaymentInfo->Bank,
                                    'Payments' => $TempDocPaymentInfo->Payments,
                                    'Brand' => $TempDocPaymentInfo->Brand,
                                    'BrandName' => $TempDocPaymentInfo->BrandName,
                                    'Issuer' => $TempDocPaymentInfo->Issuer,
                                    'tashType' => $TempDocPaymentInfo->tashType,
                                    'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                    'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                    'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                    'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                    'CheckDate' => $TempDocPaymentInfo->CheckDate,
                                    'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                    'BankDate' => $TempDocPaymentInfo->BankDate,
                                    'Dates' => $Dates,
                                    'UserId' => $UserId,
                                    'Excess' => $TempDocPaymentInfo->Excess,
                                    'UserDate' => $UserDate,
                                    'DocDate' => $DocDate,
                                    'DocMonth' => $DocMonth,
                                    'DocYear' => $DocYear,
                                    'DocTime' => $DocTime,
                                    'CreditType' => $TempDocPaymentInfo->CreditType,
                                    'StatusInvoice' => '1',
                                    'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                    'BusinessType' => $SettingsInfo->BusinessType,
                                    'PayToken' => @$TempDocPaymentInfo->PayToken,
                                    'TransactionId' => @$TempDocPaymentInfo->TransactionId,
                                    'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                                ]);
                            } else {
                                $UserDate = $TempDocPaymentInfo->UserDate;
                                $Payments = $TempDocPaymentInfo->Payments;

                                $Amount = $TempDocPaymentInfo->Amount;
                                $Money = $Amount;
                                $Payment = $Payments;
                                $MyMoney = $Money / $Payment;
                                $MyMoney = number_format((float)$MyMoney, 2, '.', '');
                                list($whole, $decimal) = explode('.', $MyMoney);
                                $CehckPayment = $whole * ($Payment - 1);
                                $FirstPayment = $Money - $CehckPayment;
                                $FirstPayment = number_format((float)$FirstPayment, 2, '.', '');
                                $SecendPayment = $whole;
                                $SecendPayment = number_format((float)$SecendPayment, 2, '.', '');
                                $count = $Payments;

                                for ($i = 1; $i <= $count; $i++) {
                                    if ($i == 1) {
                                        $FixAmount = $FirstPayment;
                                    } else {
                                        $FixAmount = $SecendPayment;
                                    }

                                    $PaymentsNew = $i;
                                    $add = $i - 1;
                                    $AddDate = '+' . $add . ' month';
                                    $CreditDate = date('Y-m-d', strtotime($AddDate, strtotime($UserDate)));

                                    $DocsList = DB::table('docs_payment')->insertGetId([
                                        'CompanyNum' => $CompanyNum,
                                        'Brands' => $Brands,
                                        'TrueCompanyNum' => $TrueCompanyNum,
                                        'TypeDoc' => $TypeDoc,
                                        'TypeHeader' => $TypeHeader,
                                        'TypeNumber' => $TypeNumber,
                                        'DocsId' => $DocId,
                                        'ClientId' => $ClientId,
                                        'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                        'Amount' => $FixAmount,
                                        'L4digit' => $TempDocPaymentInfo->L4digit,
                                        'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                        'CCode' => $TempDocPaymentInfo->CCode,
                                        'ACode' => $TempDocPaymentInfo->ACode,
                                        'Bank' => $TempDocPaymentInfo->Bank,
                                        'Payments' => $PaymentsNew,
                                        'Brand' => $TempDocPaymentInfo->Brand,
                                        'BrandName' => $TempDocPaymentInfo->BrandName,
                                        'Issuer' => $TempDocPaymentInfo->Issuer,
                                        'tashType' => $TempDocPaymentInfo->tashType,
                                        'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                        'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                        'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                        'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                        'CheckDate' => $CreditDate,
                                        'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                        'BankDate' => $TempDocPaymentInfo->BankDate,
                                        'Dates' => $Dates,
                                        'UserId' => $UserId,
                                        'Excess' => $TempDocPaymentInfo->Excess,
                                        'UserDate' => $UserDate,
                                        'DocDate' => $DocDate,
                                        'DocMonth' => $DocMonth,
                                        'DocYear' => $DocYear,
                                        'DocTime' => $DocTime,
                                        'CreditType' => $TempDocPaymentInfo->CreditType,
                                        'StatusInvoice' => '1',
                                        'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                        'BusinessType' => $SettingsInfo->BusinessType,
                                        'PayToken' => @$TempDocPaymentInfo->PayToken,
                                        'TransactionId' => @$TempDocPaymentInfo->TransactionId,
                                        'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                                    ]);
                                }
                            }
                        }

                        $TempDocPaymentInfo->delete();
                    }
                }

                json_message(array('redirect' => '/office/DocsPreview.php?Types=' . $TypeHeader . '&Id=' . $DocId));
            } catch (\Throwable $e) {
                LoggerService::error($e);

                json_message('Error ' . $e->getCode() . '. Something went wrong. Please, contact our support team.', false);
            }
            break;

// AddPaymentPage - Add



        case 'AddPaymentPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title'], 'TitleUrl' => $_POST['TitleUrl'], 'ItemId' => $_POST['ItemId'], 'Amount' => $_POST['Amount'], 'MaxPaymentRegular' => $_POST['MaxPaymentRegular'], 'MaxPaymentToken' => @$_POST['MaxPaymentToken']),

                array('Title' => 'Required', 'TitleUrl' => 'Required', 'ItemId' => 'Required', 'Amount' => 'Required', 'MaxPaymentRegular' => 'Required', 'MaxPaymentToken' => 'Required')

            );



            if ($validator->passes()) {



                $Title = $_POST['Title'];

                $TitleUrl = $_POST['TitleUrl'];

                $ItemId = $_POST['ItemId'];

                $Content = nl2br($_POST['Content']);

                $Amount = $_POST['Amount'];

                $MaxPaymentRegular = $_POST['MaxPaymentRegular'];

                $MaxPaymentToken = @$_POST['MaxPaymentToken'];



                $TypePage = $_POST['TypePage'];

                $Vat = $_POST['Vat'];

                $PaymentType = $_POST['PaymentType'];

                $PaymentStep = @$_POST['PaymentStep'];

                $ThankYouPage = $_POST['ThankYouPage'];

                $ApiSend = $_POST['ApiSend'];

                $Responder = $_POST['Responder'];

                $PixleVisit = $_POST['PixelVisit'];

                $IncludedVat = $_POST['IncludedVat'];



                // $ImageLink = $_POST['ImageLink'];
                $pageImg = isset($_POST['pageImgPath']) ? str_replace('files/items/', '', $_POST['pageImgPath']) : NULL;



                $ItemVaildType = $_POST['ItemVaildType'];

                $MaxPaymentRegularPlusKeva = @$_POST['MaxPaymentRegularPlusKeva'];



                if ($MaxPaymentRegularPlusKeva == '' && $PaymentType == '4') {

                    json_message(lang('reccuring_payment_ajax'), false);

                    exit();

                }



                if ($MaxPaymentRegularPlusKeva == '') {

                    $MaxPaymentRegularPlusKeva = '1';

                }





                $NumDate = $_POST['NumDate'];

                $TypePayment = $_POST['PayStep'];

                $tashType = $_POST['tashTypeKeva'];

                $Tash = $_POST['TashKeva'];

                $TypeKeva = $_POST['TypeKeva'];



                $CouponCode = $_POST['CouponCode'];

                if (@$CouponCode == '') {

                    $CouponCode = rand(1, 9999999);

                }



                $Discount = $_POST['Discount'];

                if (@$Discount == '') {

                    $Discount = '0';

                }



                $DiscountType = $_POST['DiscountType'];

                $DiscountTypePayments = $_POST['DiscountTypePayments'];

                $DiscountStatus = $_POST['DiscountStatus'];





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                if (!empty($_POST['PaymentStep'])) {

                    $PaymentStep = "";

                    foreach ($_POST['PaymentStep'] as $value) {

                        $PaymentStep .= $value . ",";

                    }

                    $PaymentStep = substr($PaymentStep, 0, -1);

                } else {





                    $PaymentStep = "";



                }



                $RandomNumber = uniqid();

                $RandomNumber;





                $GetItemDeprtments = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();

                $ItemDepartment = @$GetItemDeprtments->Department;



                $Getsort = DB::table('payment_pages')->where('CompanyNum', '=', $CompanyNum)->orderBy('Sort', 'DESC')->first();

                $GetSortNum = @$Getsort->Sort + 1;





                DB::table('payment_pages')->insertGetId(

                    array('ItemId' => $ItemId, 'Title' => $Title, 'TitleUrl' => $TitleUrl, 'Content' => $Content, 'Amount' => $Amount, 'TypePage' => $TypePage, 'PaymentType' => $PaymentType, 'MaxPaymentRegular' => $MaxPaymentRegular, 'MaxPaymentToken' => @$MaxPaymentToken, 'PaymentStep' => $PaymentStep, 'Vat' => $Vat, 'ApiSend' => $ApiSend, 'ThankYouPage' => $ThankYouPage, 'PixleVisit' => $PixleVisit, 'Dates' => $Dates, 'Responder' => $Responder, 'IncludedVat' => $IncludedVat, 'UserId' => $UserId, 'RandomNumber' => $RandomNumber, 'CompanyNum' => $CompanyNum, 'NumDate' => $NumDate, 'TypePayment' => $TypePayment, 'tashType' => $tashType, 'Tash' => $Tash, 'CouponCode' => $CouponCode, 'Discount' => $Discount, 'DiscountType' => $DiscountType, 'DiscountTypePayments' => $DiscountTypePayments, 'DiscountStatus' => $DiscountStatus, 'TypeKeva' => $TypeKeva, 'ItemVaildType' => $ItemVaildType, 'Sort' => $GetSortNum, 'MaxPaymentRegularPlusKeva' => $MaxPaymentRegularPlusKeva, 'ItemDepartment' => $ItemDepartment, 'pageImg' => $pageImg));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





// EditPaymentPage - Add



        case 'EditPaymentPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title'], 'TitleUrl' => $_POST['TitleUrl'], 'ItemId' => $_POST['ItemId'], 'Amount' => $_POST['Amount'], 'MaxPaymentRegular' => $_POST['MaxPaymentRegular']),

                array('Title' => 'Required', 'TitleUrl' => 'Required', 'ItemId' => 'Required', 'Amount' => 'Required', 'MaxPaymentRegular' => 'Required')

            );



            if ($validator->passes()) {



                $Title = $_POST['Title'];

                $TitleUrl = $_POST['TitleUrl'];

                $ItemId = $_POST['ItemId'];

                $Content = nl2br($_POST['Content']);

                $Amount = $_POST['Amount'];

                $MaxPaymentRegular = $_POST['MaxPaymentRegular'];

                if (@$_POST['MaxPaymentToken'] == '') {

                    $MaxPaymentToken = '0';

                } else {

                    $MaxPaymentToken = @$_POST['MaxPaymentToken'];

                }

                $TypePage = $_POST['TypePage'];

                $Vat = $_POST['Vat'];

                $PaymentType = $_POST['PaymentType'];

                $PaymentStep = @$_POST['PaymentStep'];

                $ThankYouPage = $_POST['ThankYouPage'];

                $ApiSend = $_POST['ApiSend'];

                $Responder = $_POST['Responder'];

                $PixleVisit = $_POST['PixelVisit'];

                $IncludedVat = $_POST['IncludedVat'];



                // $ImageLink = $_POST['ImageLink'];


                $ItemVaildType = $_POST['ItemVaildType'];



                $MaxPaymentRegularPlusKeva = @$_POST['MaxPaymentRegularPlusKeva'];



                if ($MaxPaymentRegularPlusKeva == '' && $PaymentType == '4') {

                    json_message(lang('reccuring_payment_ajax'), false);

                    exit();

                }



                if ($MaxPaymentRegularPlusKeva == '') {

                    $MaxPaymentRegularPlusKeva = '1';

                }



                $NumDate = $_POST['NumDate'];

                $TypePayment = $_POST['PayStep'];

                $tashType = $_POST['tashTypeKeva'];

                $Tash = $_POST['TashKeva'];

                $TypeKeva = $_POST['TypeKeva'];



                $CouponCode = $_POST['CouponCode'];

                if (@$CouponCode == '') {

                    $CouponCode = rand(1, 9999999);

                }



                $Discount = $_POST['Discount'];

                if (@$Discount == '') {

                    $Discount = '0';

                }



                $DiscountType = $_POST['DiscountType'];

                $DiscountTypePayments = $_POST['DiscountTypePayments'];

                $DiscountStatus = $_POST['DiscountStatus'];





                $PageId = $_POST['PageId'];



                $Status = $_POST['Status'];





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $RandomNumber = rand(1, 9999999);

                $RandomNumber;



                if (!empty($_POST['PaymentStep'])) {

                    $PaymentStep = "";

                    foreach ($_POST['PaymentStep'] as $value) {

                        $PaymentStep .= $value . ",";

                    }

                    $PaymentStep = substr($PaymentStep, 0, -1);

                } else {





                    $PaymentStep = "";



                }



                $GetItemDeprtments = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();

                $ItemDepartment = @$GetItemDeprtments->Department;



                DB::table('payment_pages')

                    ->where('id', $PageId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ItemId' => $ItemId, 'Title' => $Title, 'TitleUrl' => $TitleUrl, 'Content' => $Content, 'Amount' => $Amount, 'TypePage' => $TypePage, 'PaymentType' => $PaymentType, 'MaxPaymentRegular' => $MaxPaymentRegular, 'MaxPaymentToken' => @$MaxPaymentToken, 'PaymentStep' => $PaymentStep, 'Vat' => $Vat, 'ApiSend' => $ApiSend, 'ThankYouPage' => $ThankYouPage, 'PixleVisit' => $PixleVisit, 'Status' => $Status, 'Dates' => $Dates, 'Responder' => $Responder, 'IncludedVat' => $IncludedVat, 'UserId' => $UserId, 'NumDate' => $NumDate, 'TypePayment' => $TypePayment, 'tashType' => $tashType, 'Tash' => $Tash, 'CouponCode' => $CouponCode, 'Discount' => $Discount, 'DiscountType' => $DiscountType, 'DiscountTypePayments' => $DiscountTypePayments, 'DiscountStatus' => $DiscountStatus, 'TypeKeva' => $TypeKeva, 'ItemVaildType' => $ItemVaildType, 'MaxPaymentRegularPlusKeva' => $MaxPaymentRegularPlusKeva, 'ItemDepartment' => $ItemDepartment));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Text Saved - Add



        case 'AddSavedMsg':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title'], 'SmsContent' => $_POST['SmsContent'], 'EmailTitle' => $_POST['EmailTitle'], 'EmailContent' => $_POST['EmailContent']),

                array('Title' => 'Required', 'SmsContent' => 'Required', 'EmailTitle' => 'Required', 'EmailContent' => 'Required')

            );



            if ($validator->passes()) {

                $Title = $_POST['Title'];

                $SmsContent = $_POST['SmsContent'];

                $EmailTitle = $_POST['EmailTitle'];

                $EmailContent = $_POST['EmailContent'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                $Items = DB::table('textsaved')->insertGetId(

                    array('Title' => $Title, 'SmsContent' => $SmsContent, 'EmailTitle' => $EmailTitle, 'EmailContent' => $EmailContent, 'CompanyNum' => $CompanyNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Text Saved - Edit



        case 'EditSavedMsg':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Status' => $_POST['Status'], 'Title' => $_POST['Title'], 'SmsContent' => $_POST['SmsContent'], 'EmailTitle' => $_POST['EmailTitle'], 'EmailContent' => $_POST['EmailContent']),

                array('Status' => 'Required', 'Title' => 'Required', 'SmsContent' => 'Required', 'EmailTitle' => 'Required', 'EmailContent' => 'Required')

            );



            if ($validator->passes()) {



                $Status = $_POST['Status'];

                $ItemId = $_POST['ItemId'];



                $Title = $_POST['Title'];

                $SmsContent = $_POST['SmsContent'];

                $EmailTitle = $_POST['EmailTitle'];

                $EmailContent = $_POST['EmailContent'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('textsaved')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => $Status, 'Title' => $Title, 'SmsContent' => $SmsContent, 'EmailTitle' => $EmailTitle, 'EmailContent' => $EmailContent));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Text Saved - Edit



        case 'EditSavedNot':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('Subject' => $_POST['Subject'], 'Content' => $_POST['Content']),
                array('Subject' => 'Required', 'Content' => 'Required')
            );

            if ($validator->passes()) {

                $ItemId = $_POST['ItemId'];
                $Subject = $_POST['Subject'] ?? '';
                $Content = $_POST['Content'] ?? '';

                $replacedContent = Notificationcontent::rollbackBtns($Content);

                if (Auth::user()->CompanyNum != '100' || (Auth::user()->CompanyNum == '100' && Auth::user()->id == '1')) {

                    DB::table('notificationcontent')
                        ->where('id', $ItemId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update(array('Subject' => $Subject, 'Content' => $replacedContent));

                }

                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        // AddPipeline - Add



        case 'AddPipeline':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Title = $_POST['Title'];

                $PipeAgentView = $_POST['PipeAgentView'];

                $MaxRecord = $_POST['MaxRecord'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $Items = DB::table('pipeline_category')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Title' => $Title, 'PipeAgentView' => $PipeAgentView, 'MaxRecord' => $MaxRecord));



                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('success'), 'Status' => '1', 'Act' => '1', 'Sort' => '5'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('failure'), 'Status' => '1', 'Act' => '2', 'Sort' => '6'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('not_relevant'), 'Status' => '1', 'Act' => '3', 'Sort' => '7'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('a_new_lead'), 'Status' => '0', 'Act' => '0', 'Sort' => '0'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('hot_lead_ajax'), 'Status' => '0', 'Act' => '0', 'Sort' => '1'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('first_contact_ajax'), 'Status' => '0', 'Act' => '0', 'Sort' => '2'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('trial_lesson'), 'Status' => '0', 'Act' => '0', 'Sort' => '3'));

                DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $Items, 'Title' => lang('lead_close_ajax'), 'Status' => '0', 'Act' => '0', 'Sort' => '4'));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddStatus - Add



        case 'AddStatus':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {

                $Title = $_POST['Title'];

                $PipeId = $_POST['PipeId'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $Getsort = DB::table('leadstatus')->where('CompanyNum', '=', $CompanyNum)->where('PipeId', '=', $PipeId)->where('Act', '=', '0')->orderBy('Sort', 'DESC')->first();

                $GetSortNum = @$Getsort->Sort + 1;





                $Items = DB::table('leadstatus')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'PipeId' => $PipeId, 'Title' => $Title, 'Sort' => $GetSortNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddSource':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {

                $Title = $_POST['Title'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $Items = DB::table('leadsource')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Title' => $Title));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditPipeline - Edit



        case 'EditPipeline':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Status = $_POST['Status'];

                $Title = $_POST['Title'];

                $PipeAgentView = $_POST['PipeAgentView'];

                $MaxRecord = $_POST['MaxRecord'];

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('pipeline_category')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Title' => $Title, 'Status' => $Status, 'PipeAgentView' => $PipeAgentView, 'MaxRecord' => $MaxRecord));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditStatus - Edit



        case 'EditStatus':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Status = $_POST['Status'];

                $Title = $_POST['Title'];

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('leadstatus')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Title' => $Title, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'EditSource':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Status = $_POST['Status'];

                $Title = $_POST['Title'];

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('leadsource')

                    ->where('id', $ItemId)

                    ->update(array('Title' => $Title, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddSteps - Add



        case 'AddSteps':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('NumPayment' => $_POST['NumPayment'], 'Amount' => $_POST['Amount']),

                array('NumPayment' => 'Required', 'Amount' => 'Required')

            );



            if ($validator->passes()) {



                $NumPayment = $_POST['NumPayment'];

                $Amount = $_POST['Amount'];

                $Title = $_POST['Title'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                $Items = DB::table('paymentstep')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'NumPayment' => $NumPayment, 'Amount' => $Amount, 'Title' => $Title));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditSteps - Edit



        case 'EditSteps':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('NumPayment' => $_POST['NumPayment'], 'Amount' => $_POST['Amount']),

                array('NumPayment' => 'Required', 'Amount' => 'Required')

            );



            if ($validator->passes()) {



                $NumPayment = $_POST['NumPayment'];

                $Amount = $_POST['Amount'];

                $Title = $_POST['Title'];



                $Status = $_POST['Status'];

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('paymentstep')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('NumPayment' => $NumPayment, 'Amount' => $Amount, 'Title' => $Title, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // CRM - Add



        case 'AddCRM':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId'], 'Remarks' => $_POST['Remarks']),

                array('ClientId' => 'Required', 'Remarks' => 'Required')

            );



            if ($validator->passes()) {



                $Remarks = nl2br($_POST['Remarks']);

                $ClientId = $_POST['ClientId'];



                $StarIcon = @$_POST['StarIcon'];

                $TillDate = @$_POST['TillDate'];



                if ($TillDate == '') {

                    $TillDate = NULL;

                }



                if ($StarIcon == '') {

                    $StarIcon = '0';

                }



                $CompanyNum = $CompanyNum;

                $time = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $Medical = DB::table('clientcrm')->insertGetId(

                    array('ClientId' => $ClientId, 'Remarks' => $Remarks, 'User' => $UserId, 'CompanyNum' => $CompanyNum, 'StarIcon' => $StarIcon, 'TillDate' => $TillDate));





                DB::table('pipeline')

                    ->where('CompanyNum', $CompanyNum)

                    ->where('ClientId', $ClientId)

                    ->update(array('NoteDates' => $time));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'UpdateCRMClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId']),

                array('ItemId' => 'Required')

            );



            if ($validator->passes()) {



                $CRMId = $_POST['ItemId'];

                $Status = $_POST['Status'];



                $StarIcon = @$_POST['StarIcon'];

                $TillDate = @$_POST['TillDate'];



                if ($TillDate == '') {

                    $TillDate = NULL;

                }



                if ($StarIcon == '') {

                    $StarIcon = '0';

                }





                $CompanyNum = $CompanyNum;

                $time = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                DB::table('clientcrm')

                    ->where('id', $CRMId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => $Status, 'StarIcon' => $StarIcon, 'TillDate' => $TillDate));



                $GetClientId = DB::table('clientcrm')->where('id', $CRMId)->where('CompanyNum', $CompanyNum)->first();



                CreateLogMovement(lang('log_conv_ajax'), $GetClientId->ClientId);



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'UpdateMedicalClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId']),

                array('ItemId' => 'Required')

            );



            if ($validator->passes()) {



                $CRMId = $_POST['ItemId'];

                $ClientId = $_POST['ClientId'];

                $Status = $_POST['Status'];

                $TillDate = @$_POST['TillDate'];



                if ($TillDate == '') {

                    $TillDate = NULL;

                }





                $CompanyNum = $CompanyNum;

                $time = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                DB::table('clientmedical')

                    ->where('id', $CRMId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => $Status, 'TillDate' => $TillDate));



                CreateLogMovement(lang('log_health_ajax'), $ClientId);



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // SendINVagainmail - Add



        case 'SendMailToClientAgain':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Email' => $_POST['Email'], 'DocId' => $_POST['DocId']),

                array('Email' => 'Required', 'DocId' => 'Required')

            );



            if ($validator->passes()) {



                $Email = $_POST['Email'];

                $DocId = $_POST['DocId'];



                $time = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // EditToken  - Add



        case 'EditToken':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('TokenId' => $_POST['TokenId']),

                array('TokenId' => 'Required')

            );



            if ($validator->passes()) {



                $TokenId = $_POST['TokenId'];

                $Type = $_POST['Type'];



//                $Month = $_POST['NewMonth'];
//
//
//
//                $Year = mb_substr($_POST['NewYear'], 2);
//
//
//
//                if ($Type == '0') {
//
//                    $Tokef = $Year . '' . $Month;
//
//                } else {
//
//                    $Tokef = $Month . '' . $Year;
//
//                }



                $Status = $_POST['Status'];



                DB::table('token')

                    ->where('id', $TokenId)

                    ->update(array('CompanyNum' => $CompanyNum, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddPayToken  - Add



        case 'AddPayToken':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ItemId'];

                $Amount = $_POST['Amount'];

                $NumPayment = $_POST['NumPayment'];

                $NextPayment = $_POST['NextPayment'];

                $NumDate = $_POST['NumDate'] ?? 1;

                $TypePayment = $_POST['PayStep'] ?? 3;

                $TokenId = $_POST['TokenId'];

                $TypeKeva = $_POST['TypeKeva'];



                $tashType = $_POST['tashTypeKeva'];

                $Tash = $_POST['TashKeva'];



                $CountPayment = $NumPayment;



                $ClientId = $_POST['ClientId'];





                if (@$ItemId == '') {

                    json_message(lang('select_item_ajax'), false);

                    exit;

                }



                if (@$Amount == '') {

                    json_message(lang('type_amount_ajax'), false);

                    exit;

                }



                if (@$NumPayment == '') {

                    json_message(lang('select_cycles_ajax'), false);

                    exit;

                }



                if (@$NextPayment == '') {

                    json_message(lang('select_date_ajax'), false);

                    exit;

                }



                if (@$NextPayment >= '2030-01-01') {

                    json_message(lang('data_error_ajax'), false);

                    exit;

                }



                if (@$NumDate == '') {

                    json_message(lang('select_num_date_ajax'), false);

                    exit;

                }



                if (@$TypePayment == '') {

                    json_message(lang('select_date_count_ajax'), false);

                    exit;

                }





                if (@$TokenId == '') {

                    json_message(lang('select_cc_ajax'), false);

                    exit;

                }





                $CheckClient = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();





                $PageInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();





                $PayTokenId = DB::table('paytoken')->insertGetId(array(
                    'CompanyNum' => $CompanyNum,
                    'Brands' => $CheckClient->Brands,
                    'ClientId' => $ClientId,
                    'TokenId' => $TokenId,
                    'TypeKeva' => $TypeKeva,
                    'NumDate' => $NumDate,
                    'TypePayment' => $TypePayment,
                    'Amount' => $Amount,
                    'NumPayment' => $NumPayment,
                    'NextPayment' => $NextPayment,
                    'CountPayment' => $CountPayment,
                    'tashType' => $tashType,
                    'Tash' => $Tash,
                    'Text' => $PageInfo->ItemName,
                    'ItemId' => $ItemId,
                    'PageId' => '0',
                    'UserId' => Auth::user()->id,
                    'TrueDate' => $NextPayment
                ));





                //// הקמת 24 סבבי חיוב

                $TrueDayNum = date("d", strtotime($NextPayment));

                $TrueDatePayment = $NextPayment;





                if ($TypeKeva == '0') {



                    for ($i = 1; $i <= 24; $i++) {

                        $FixDateDay = date("d", strtotime($NextPayment));



                        if ($TypePayment == '3') {



                            $FixDateDay = date("d", strtotime($NextPayment));



                            if ($i == 1) {

                                $NextPayment = date("Y-m", strtotime($NextPayment));

                                $NextPaymentMonth = date("m", strtotime($NextPayment));

                                $NextPaymentLasatDay = date("t", strtotime($NextPayment));

                            } else {

                                $LastPayment = date("Y-m", strtotime($NextPayment));

                                $FixTypePayment = @$Vaild_TypeOption[$TypePayment];

                                $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;

                                $time = strtotime($LastPayment);

                                $NextPayment = date("Y-m", strtotime($ItemsTime, $time));

                                $NextPaymentMonth = date("m", strtotime($NextPayment));

                                $NextPaymentLasatDay = date("t", strtotime($NextPayment));

                            }



                            if ($FixDateDay <= $NextPaymentLasatDay) {

                                $NextPayment = $NextPayment . '-' . $TrueDayNum;

                            } else {

                                $NextPayment = $NextPayment . '-' . $NextPaymentLasatDay;

                            }



                        } else {



                            if ($i == 1) {

                                $NextPayment = $NextPayment;

                            } else {

                                $LastPayment = $NextPayment;

                                $FixTypePayment = @$Vaild_TypeOption[$TypePayment];

                                $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;

                                $time = strtotime($LastPayment);

                                $NextPayment = date("Y-m-d", strtotime($ItemsTime, $time));

                            }





                        }





                        /// מחולל מספר מסמך

                        $TokenGroupNumber = rand(1262055681, 1262055681);

                        $TokenGroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $TokenGroupNumber . '' . rand(1, 9999999);

                        $RandomTokenNumber = uniqid($TokenGroupNumber);



                        $AddPayment = DB::table('payment')->insertGetId(array(
                            'CompanyNum' => $CompanyNum,
                            'ClientId' => $ClientId,
                            'TypeKeva' => $TypeKeva,
                            'Amount' => $Amount,
                            'Date' => $NextPayment,
                            'Status' => '0',
                            'NumTry' => '0',
                            'TryDate' => null,
                            'LastDate' => null,
                            'KevaId' => $PayTokenId,
                            'RandomUrl' => $RandomTokenNumber,
                            'NumPayment' => $i,
                            'TrueDayNum' => $TrueDayNum
                        ));





                    }



                } else {



                    if ($NumPayment > '24' && $TypePayment != '4') {

                        $NumPayment = '24';

                    }



                    for ($i = 1; $i <= $NumPayment; $i++) {



                        if ($TypePayment == '3') {



                            $FixDateDay = date("d", strtotime($NextPayment));



                            if ($i == 1) {

                                $NextPayment = date("Y-m", strtotime($NextPayment));

                                $NextPaymentMonth = date("m", strtotime($NextPayment));

                                $NextPaymentLasatDay = date("t", strtotime($NextPayment));

                            } else {

                                $LastPayment = date("Y-m", strtotime($NextPayment));

                                $FixTypePayment = @$Vaild_TypeOption[$TypePayment];

                                $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;

                                $time = strtotime($LastPayment);

                                $NextPayment = date("Y-m", strtotime($ItemsTime, $time));

                                $NextPaymentMonth = date("m", strtotime($NextPayment));

                                $NextPaymentLasatDay = date("t", strtotime($NextPayment));

                            }



                            if ($FixDateDay <= $NextPaymentLasatDay) {

                                $NextPayment = $NextPayment . '-' . $TrueDayNum;

                            } else {

                                $NextPayment = $NextPayment . '-' . $NextPaymentLasatDay;

                            }



                        } else {



                            if ($i == 1) {

                                $NextPayment = $NextPayment;

                            } else {

                                $LastPayment = $NextPayment;

                                $FixTypePayment = @$Vaild_TypeOption[$TypePayment];

                                $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;

                                $time = strtotime($LastPayment);

                                $NextPayment = date("Y-m-d", strtotime($ItemsTime, $time));

                            }





                        }



                        /// מחולל מספר מסמך

                        $TokenGroupNumber = rand(1262055681, 1262055681);

                        $TokenGroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $TokenGroupNumber . '' . rand(1, 9999999);

                        $RandomTokenNumber = uniqid($TokenGroupNumber);

                        $RandomTokenNumber;



                        $AddPayment = DB::table('payment')->insertGetId(

                            array('CompanyNum' => $CompanyNum,
                                'ClientId' => $ClientId,
                                'TypeKeva' => $TypeKeva,
                                'Amount' => $Amount,
                                'Date' => $NextPayment,
                                'Status' => '0',
                                'NumTry' => '0',
                                'TryDate' => null,
                                'LastDate' => null,
                                'KevaId' => $PayTokenId,
                                'RandomUrl' => $RandomTokenNumber,
                                'NumPayment' => $i,
                                'TrueDayNum' => $TrueDayNum));



                    }





                }





                ///// הקמת פריט ראשון



                //// הכנסת מנוי לכרטיס לקוח ועדכון פרטים



                $Vat = $SettingsInfo->Vat;

                $Items = $ItemId;

                $Vaild_LastCalss = '1';



                $Today = date('Y-m-d');

                $StartDate = $TrueDatePayment;



                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                $Brands = $ClientInfo->Brands;

                /// קליטת פרטי פעילות



                $ItemsInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Items)->first();



                $ItemText = $ItemsInfo->ItemName;

                $ItemPrice = $ItemsInfo->ItemPrice;

                $ItemPriceVat = $ItemsInfo->ItemPriceVat;



                $Department = $ItemsInfo->Department; // חוק מנוי

                $MemberShip = $ItemsInfo->MemberShip; // סוג מנוי



                $Vaild = $ItemsInfo->Vaild; // חישוב תוקף

                $Vaild_Type = $ItemsInfo->Vaild_Type; // סוג חישוב

                $LimitClass = $ItemsInfo->LimitClass; // הגבלת שיעורים

                $NotificationDays = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->NotificationDays ?? 0; // התראה לפני סוף מנוי


                $BalanceClass = $ItemsInfo->BalanceClass; // כמות שיעורים

                $MinusCards = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->offsetMemberships ?? 1; // קיזוז מכרטיסיה קודמת

                $StartTime = $ItemsInfo->StartTime; // הגבלת הזמנת שיעורים

                $EndTime = $ItemsInfo->EndTime; // הגבלת הזמנת שיעורים

                $CancelLImit = $ItemsInfo->CancelLImit; // ביטול הגבלה

                $ClassSameDay = $ItemsInfo->ClassSameDay; // הזמנת שיעור באותו היום

                $FreezMemberShip = $ItemsInfo->FreezMemberShip; // ניתן להקפאה?

                $FreezMemberShipDays = $ItemsInfo->FreezMemberShipDays; // מספר ימים מקסימלי להקפאה

                $FreezMemberShipCount = $ItemsInfo->FreezMemberShipCount; // מספר פעמים שניתן להקפיא מנוי

                $TrueBalanceClass = $BalanceClass;

                $BalanceValueLog = NULL;



                $LimitClassMorning = $ItemsInfo->LimitClassMorning;

                $LimitClassEvening = $ItemsInfo->LimitClassEvening;

                $LimitClassMonth = $ItemsInfo->LimitClassMonth;





                $MemberShipRule = '';

                $MemberShipRule .= '{"data": [';

                $MemberShipRule .= '{"LimitClass": "' . $LimitClass . '", "NotificationDays": "' . $NotificationDays . '", "StartTime": "' . $StartTime . '", "EndTime": "' . $EndTime . '", "CancelLImit": "' . $CancelLImit . '", "ClassSameDay": "' . $ClassSameDay . '", "FreezMemberShip": "' . $FreezMemberShip . '", "FreezMemberShipDays": "' . $FreezMemberShipDays . '", "FreezMemberShipCount": "' . $FreezMemberShipCount . '", "LimitClassMorning": "' . $LimitClassMorning . '", "LimitClassEvening": "' . $LimitClassEvening . '", "LimitClassMonth": "' . $LimitClassMonth . '"}';

                $MemberShipRule .= ']}';





                // מנוי תקופתי

                if ($Department == '1') {



                    /// חישוב תוקף מהשיעור האחרון במידה וקיים

                    if ($Vaild_LastCalss == '0') {

                        $LastClass = DB::table('classstudio_act')

                            ->where('Status', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '4')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '6')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '8')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '10')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '11')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '12')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '15')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->Orwhere('Status', '=', '16')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                            ->orderBy('ClassDate', 'DESC')->first();

                        if (@$LastClass->ClassDate != '') {

                            $StartDate = $LastClass->ClassDate;

                        }

                    }



                    $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                    $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                    $time = strtotime($StartDate);

                    $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));





                } // כרטיסיה

                elseif ($Department == '2') {



                    $ClassDate = NULL;



                    /// חישוב תוקף

                    if ($Vaild != '0') {





                        /// חישוב תוקף מהשיעור האחרון במידה וקיים

                        if ($Vaild_LastCalss == '0') {

                            $LastClass = DB::table('classstudio_act')

                                ->where('Status', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '4')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '6')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '8')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '10')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '11')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '12')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '15')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->Orwhere('Status', '=', '16')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)

                                ->orderBy('ClassDate', 'DESC')->first();

                            if (@$LastClass->ClassDate != '') {

                                $StartDate = $LastClass->ClassDate;

                            }

                        }



                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($StartDate);

                        $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));



                    }



                } // התנסות

                elseif ($Department == '3') {

                    $ClassDate = NULL;

                    $MemberShipRule = NULL;

                    $LimitClass = '999';





                } // פריט כללי

                elseif ($Department == '4') {

                    $ClassDate = NULL;

                    $MemberShipRule = NULL;

                    $LimitClass = '0';

                    $BalanceClass = '0';

                }



                // מספור מספר המנויים שהלקוח רכש

                $CardNum = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->count();

                $CardNumber = $CardNum + 1;





                /// הכנסת נתונים ועדכון טבלאות



                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');

                $VatAmount = $ItemPrice - $ItemPriceVat;



                $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                $ItemsTime = '-' . $NotificationDays . ' ' . $Vaild_TypeOptions;



                $time = strtotime($ClassDate);

                $NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                if ($NotificationDays == '0') {

                    $NotificationDate = NULL;

                }





                if ($TypeKeva == '0') {

                    $KevaAction = '1';

                } else {

                    $KevaAction = '0';

                }


                $AddClientActivity = DB::table('client_activities')->insertGetId(array(
                    'CompanyNum' => $CompanyNum,
                    'Brands' => $Brands,
                    'CardNumber' => $CardNumber,
                    'ClientId' => $ClientId,
                    'Department' => $Department,
                    'MemberShip' => $MemberShip,
                    'ItemId' => $Items,
                    'ItemText' => $ItemText,
                    'ItemPrice' => $ItemPrice,
                    'ItemPriceVat' => $ItemPriceVat,
                    'ItemPriceVatDiscount' => $ItemPriceVat,
                    'Vat' => $Vat,
                    'VatAmount' => $VatAmount,
                    'StartDate' => $StartDate,
                    'VaildDate' => $ClassDate,
                    'TrueDate' => $ClassDate,
                    'BalanceValue' => $BalanceClass,
                    'TrueBalanceValue' => $BalanceClass,
                    'ActBalanceValue' => $BalanceClass,
                    'LimitClass' => $LimitClass,
                    'Dates' => $Dates,
                    'UserId' => $UserId,
                    'BalanceMoney' => '0.00',
                    'MemberShipRule' => $MemberShipRule,
                    'NotificationDays' => $NotificationDate,
                    'KevaAction' => $KevaAction
                ));

                $KevaActivity = new KevaActivity([
                    'keva_id' => $PayTokenId,
                    'client_activity_id' => $AddClientActivity
                ]);
                $KevaActivity->save();


                ///// מעבר ניקובים+שיעורים ממנוי ישן לחדש

                $MembershipType = $AppSettings->MembershipType ?? 1;
                $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', $Items)->first();
                $TrueClasessFinal = $CheckItemsRoleTwo->GroupId ?? '';

                $data = [
                    "CompanyNum" => $CompanyNum,
                    "ClientId" => $ClientId,
                    "ActivityId" => $AddClientActivity,
                    "MemberShip" => $MemberShip,
                    "MembershipType" => $MembershipType,
                    "MinusCards" => $MinusCards,
                    "Department" => $Department,
                    "TrueClasessFinal" => $TrueClasessFinal,
                    "BalanceClass" => $BalanceClass,
                    "StartDate" => $StartDate
                ];
                (new ClientActivities())->moveClassesToNewActivity($data);


                //// עדכון חוב ללקוח



                $BalanceAmount = DB::table('client_activities')->where('ClientId', '=', $ClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                $MemberShipText = '';

                $MemberShipText .= '{"data": [';

                $Taski = '1';

                $GetTasks = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->orderBy('CardNumber', 'ASC')->get();

                $TaskCount = count($GetTasks);



                foreach ($GetTasks as $GetTask) {



                    if ($Taski < $TaskCount) {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                    } else {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                    }





                    ++$Taski;

                }

                $MemberShipText .= ']}';



                DB::table('client')

                    ->where('id', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('BalanceAmount' => $BalanceAmount, 'MemberShipText' => $MemberShipText));





                /// עדכון ספירה לסוג המנוי

                if ($Department == '1' || $Department == '2' || $Department == '3') {





                    if ($Department == '1') {



                        $GetActivityCount = DB::table('client_activities')->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('MemberShip', '=', $MemberShip)->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                    } elseif ($Department == '2') {



                        $GetActivityCount = DB::table('client_activities')
                            ->where('ActBalanceValue', '>=', '1')
                            ->where('StartDate', '<=', date('Y-m-d'))
                            ->whereNull('TrueDate')
                            ->where('Department', '=', '2')
                            ->where('MemberShip', '=', $MemberShip)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->where('Status', '=', '0')
                            ->where('ClientStatus', '=', '0')
                            ->where('FirstDateStatus', '=', '0')
                            ->Orwhere('ActBalanceValue', '>=', '1')
                            ->where('ClientStatus', '=', '0')
                            ->where('TrueDate', '>=', date('Y-m-d'))
                            ->where('StartDate', '<=', date('Y-m-d'))
                            ->where('Department', '=', '2')
                            ->where('MemberShip', '=', $MemberShip)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->where('Status', '=', '0')
                            ->where('FirstDateStatus', '=', '0')->count();



                    } elseif ($Department == '3') {



                        $GetActivityCount = DB::table('client_activities')->where('CompanyNum', $CompanyNum)->where('Department', '3')->where('MemberShip', $MemberShip)->where('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->where('ClientStatus', '=', '0')->where('Status', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                    }





                    DB::table('membership_type')

                        ->where('id', $MemberShip)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Count' => $GetActivityCount));



                }

                //// סגירת מנוי קודם

                if ($Department == '1') {

                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('MemberShip', '=', $MemberShip)

                        ->where('Department', '=', $Department)

                        ->where('Status', '=', '0')

                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));

                } elseif ($Department == '2') {



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('MemberShip', '=', $MemberShip)

                        ->where('Department', '=', $Department)

                        ->where('Status', '=', '0')

                        ->where('TrueBalanceValue', '<=', '0')

                        ->update(array('Status' => '3'));



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('MemberShip', '=', $MemberShip)

                        ->where('Department', '=', $Department)

                        ->where('Status', '=', '0')

                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));



                }



                ///// סגירת מנוי היכרות/התנסות



                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('Department', '=', '3')

                    ->where('Status', '=', '0')

                    ->where('TrueBalanceValue', '<=', '0')

                    ->update(array('Status' => '3'));



                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('Department', '=', '3')

                    ->where('Status', '=', '0')

                    ->where('TrueDate', '<=', date('Y-m-d'))

                    ->update(array('Status' => '3'));





                //// עדכון מנוי שיבוץ קבוע



                if ($Department == 1 || ($Department == 2 && $BalanceClass > 1)) {



                    $GetClasess = DB::table('classstudio_act')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->where('ClassDate', '>=', $StartDate)->whereIn('Status', array(12, 9))->get();

                    foreach ($GetClasess as $GetClases) {



                        $TrueClasess = '';

                        $TrueClasessFinal = '';

                        $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClases->ClassId)->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->first();
                        if($ClassInfo) {
                            $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $Items, $ClassInfo->ClassNameType);
                            if ($CheckItemsRole) {
                                $GroupId = $CheckItemsRole->GroupId;
                                $TrueClasessFinal = $CheckItemsRole->GroupId;
                                $TrueClasess = $CheckItemsRole->Class;
                            }
                        }




                        if ($TrueClasessFinal != '') {

                            DB::table('classstudio_act')

                                ->where('id', $GetClases->id)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('ClientActivitiesId' => $AddClientActivity, 'TrueClasess' => $TrueClasessFinal, 'MemberShip' => $MemberShip));





                            //// עדכון מנוי שיבוץ קבוע



                            DB::table('classstudio_dateregular')

                                ->where('id', $GetClases->RegularClassId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('ClientActivitiesId' => $AddClientActivity, 'MemberShipType' => $MemberShip));





                        }





                    }



                }

                //Log
                $ClientCardForLogEDIThok = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClientId)->first();
                $LogUserId = Auth::user()->id;
                $LogUserName = Auth::user()->display_name;
                $LogDateTime = date('Y-m-d G:i:s');
                $LogContent = "$LogUserName " . lang('log_recurring_ajax');
                $LogContent .= " <a href='ClientProfile.php?u=$ClientCardForLogEDIThok->id' target='_blank'>$ClientCardForLogEDIThok->CompanyName<a/>";
                $LogContent = htmlentities($LogContent);
                CreateLogMovement($LogContent, $ClientId);

                json_message();

            } else {
                json_message($validator->errors()->toArray(), false);
            }



            break;





        // EditPayToken  - Add
        case 'EditPayToken':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('PayTokenId' => $_POST['PayTokenId'], 'TokenId' => $_POST['TokenId']),
                array('PayTokenId' => 'Required', 'TokenId' => 'Required')
            );

            if ($validator->passes()) {

                $ItemId = $_POST['ItemId'];
                $Amount = $_POST['Amount'];
                $NextPayment = $_POST['NextPayment'];
                $NumDate = $_POST['NumDate'] ?? 1;
                $TypePayment = $_POST['PayStep'] ?? 3;
                $TokenId = $_POST['TokenId'] ?? 0;
                $tashType = $_POST['tashTypeKeva'];
                $Tash = $_POST['TashKeva'];
                $CountPayment = '0';
                $ClientId = $_POST['ClientId'];

                if (@$ItemId == '') {
                    json_message(lang('select_item_ajax'), false);
                    exit;
                }

                if (@$Amount == '') {
                    json_message(lang('type_amount_ajax'), false);
                    exit;
                }

                if (@$NextPayment == '') {
                    json_message(lang('select_date_ajax'), false);
                    exit;
                }

                if (@$NextPayment >= '2030-01-01') {
                    json_message(lang('data_error_ajax'), false);
                    exit;
                }

                if (@$NumDate == '') {
                    json_message(lang('select_num_date_ajax'), false);
                    exit;
                }

                if (@$TypePayment == '') {
                    json_message(lang('select_date_count_ajax'), false);
                    exit;
                }

                if (@$TokenId == '') {
                    json_message(lang('select_cc_ajax'), false);
                    exit;
                }

                $Status = $_POST['Status'];
                $PayTokenId = $_POST['PayTokenId'];
                $RowId = $_POST['RowId'];
                $EditKevaAll = $_POST['EditKevaAll'];

                if ($Status == '0') {
                    $ActStatus = '0';
                    $TrueStatus = '0';
                    $StopInsert = '0';
                } else {
                    $ActStatus = '1';
                    $TrueStatus = '0';
                    $StopInsert = '1';
                }

                $PageInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();
                
                // Before update payment info
                $PaymentBeforeUpdate = PaymentDB::find($RowId);

                // Update requested changes
                $PaymentUpdateChanges = array();
                $PaymentUpdateChanges['amount']  = $PaymentBeforeUpdate->Amount != $Amount ? true : false;
                $PaymentUpdateChanges['date'] = $PaymentBeforeUpdate->Date != $NextPayment ? true : false;
                $PaymentUpdateChanges['status'] = $PaymentBeforeUpdate->ActStatus != $ActStatus ? true : false;
                $PaymentUpdateChangesCount = count(array_filter($PaymentUpdateChanges, function($prop){ if($prop) return true;}));
                $PaymentUpdateClient = DB::table('client')->where('id', '=', $ClientId)->first();

                // font-awesome change-to arrow for changes log
                $arrowTo = in_array(Auth::user()->language, ['he', 'ar']) ? '<i class="fal fa-long-arrow-left"></i>' : '<i class="fal fa-long-arrow-right"></i>';


                //// עריכה בודדת
                if ($EditKevaAll == '0') {
                    DB::table('payment')
                        ->where('id', $RowId)->where('KevaId', $PayTokenId)->where('CompanyNum', '=', $CompanyNum)
                        ->update(array('Amount' => $Amount, 'Date' => $NextPayment, 'Status' => $TrueStatus, 'ActStatus' => $ActStatus));

                } 
                else { /// עריכה כסדרה
                    $CountPayment = DB::table('payment')->where('CompanyNum', '=', $CompanyNum)->where('KevaId', '=', $PayTokenId)->whereIn('Status', array(1, 2))->where('ClientId', '=', $ClientId)->count();
                    $CountPayments = DB::table('payment')->where('CompanyNum', '=', $CompanyNum)->where('KevaId', '=', $PayTokenId)->where('Status', '=', '0')->where('ClientId', '=', $ClientId)->where('ActStatus', '=', '1')->count();
                    $CountPayment = $CountPayment + $CountPayments;
                    $GetRowPayments = DB::table('payment')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RowId)->first();
                    $GetRowKevaInfo = DB::table('paytoken')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $PayTokenId)->first();
                    $getLastPaymentRow = DB::table('payment')->where('ClientId', '=', $ClientId)->where('KevaId', '=', $GetRowPayments->KevaId)->orderBy('NumPayment', 'DESC')->first();
                    $GetCount = $GetRowPayments->NumPayment;
                    $NumPayment = $GetRowKevaInfo->NumPayment - $CountPayment;
                    $GetCountKeva = $GetRowKevaInfo->NumPayment;
                    $TypeKeva = $GetRowKevaInfo->TypeKeva;

                    $SeriesPaymentsChangesArray = array();
                    $SeriesPaymentsBeforeReplacing = DB::table('payment')
                        ->select('NumPayment','Amount', 'Date', 'ActStatus')
                        ->where('NumPayment', '>=', $GetRowPayments->NumPayment)
                        ->where('KevaId', '=', $PayTokenId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('Status', '=', '0')
                        ->get();

                    DB::table('payment')->where('NumPayment', '>=', $GetRowPayments->NumPayment)->where('KevaId', '=', $PayTokenId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->delete();

                    $PaymentUpdateChanges['NumDate'] = $GetRowKevaInfo->NumDate != $NumDate ? true : false;
                    $PaymentUpdateChanges['PayStep'] = $GetRowKevaInfo->TypePayment != $TypePayment ? true : false;
                    $PaymentUpdateChanges['TokenId'] = $GetRowKevaInfo->TokenId != $TokenId ? true : false;
                    $PaymentUpdateChanges['ItemId'] = $GetRowKevaInfo->ItemId != $ItemId ? true : false;

                    if($PaymentUpdateChanges['NumDate']) $PaymentUpdateChangesCount++;
                    if($PaymentUpdateChanges['PayStep']) $PaymentUpdateChangesCount++;
                    if($PaymentUpdateChanges['TokenId']) $PaymentUpdateChangesCount++;
                    if($PaymentUpdateChanges['ItemId']) $PaymentUpdateChangesCount++;

                    //// הקמת 24 סבבי חיוב
                    $TrueDayNum = date("d", strtotime($NextPayment));
                    $TrueDatePayment = $NextPayment;

                    if ($GetRowKevaInfo->NumPayment > '24') {
                        $NumPayment = $getLastPaymentRow->NumPayment > 24 ? $getLastPaymentRow->NumPayment : 24;
                    } else {
                        $NumPayment = $GetRowKevaInfo->NumPayment;
                    }

                    $CountPayment = $CountPayment + 1;
                    if ($TypeKeva == '0') {
                        for ($i = $GetCount; $i <= $NumPayment; $i++) {
                            $index = ((int)$i) -1;
                            $FixDateDay = date("d", strtotime($NextPayment));
                            if ($TypePayment == '3') {
                                $FixDateDay = date("d", strtotime($NextPayment));
                                if ($i == $GetCount) {
                                    $NextPayment = date("Y-m", strtotime($NextPayment));
                                    $NextPaymentMonth = date("m", strtotime($NextPayment));
                                    $NextPaymentLasatDay = date("t", strtotime($NextPayment));
                                } else {
                                    $LastPayment = date("Y-m", strtotime($NextPayment));
                                    $FixTypePayment = @$Vaild_TypeOption[$TypePayment];
                                    $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;
                                    $time = strtotime($LastPayment);
                                    $NextPayment = date("Y-m", strtotime($ItemsTime, $time));
                                    $NextPaymentMonth = date("m", strtotime($NextPayment));
                                    $NextPaymentLasatDay = date("t", strtotime($NextPayment));
                                }


                                if ($FixDateDay <= $NextPaymentLasatDay) {
                                    $NextPayment = $NextPayment . '-' . $TrueDayNum;
                                } else {
                                    $NextPayment = $NextPayment . '-' . $NextPaymentLasatDay;
                                }
                            } else {
                                if ($i == $GetCount) $NextPayment = $NextPayment;
                                else {
                                    $LastPayment = $NextPayment;
                                    $FixTypePayment = @$Vaild_TypeOption[$TypePayment];
                                    $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;
                                    $time = strtotime($LastPayment);
                                    $NextPayment = date("Y-m-d", strtotime($ItemsTime, $time));
                                }
                            }


                            /// מחולל מספר מסמך
                            $TokenGroupNumber = rand(1262055681, 1262055681);
                            $TokenGroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $TokenGroupNumber . '' . rand(1, 9999999);
                            $RandomTokenNumber = uniqid($TokenGroupNumber);
                            $RandomTokenNumber;
                            $AddPayment = DB::table('payment')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TypeKeva' => $TypeKeva, 'Amount' => $Amount, 'Date' => $NextPayment, 'Status' => $TrueStatus, 'NumTry' => '0', 'TryDate' => null, 'LastDate' => null, 'KevaId' => $PayTokenId, 'RandomUrl' => $RandomTokenNumber, 'NumPayment' => $i, 'TrueDayNum' => $TrueDayNum, 'ActStatus' => $ActStatus));


                            // looks for specific payment changes for Log
                            if(!empty($SeriesPaymentsBeforeReplacing[$index])){
                                $currentPaymentChanges = array('NumPayment' => $i);

                                if($SeriesPaymentsBeforeReplacing[$index]->Amount != $Amount) $currentPaymentChanges['amount'] = true;
                                if($SeriesPaymentsBeforeReplacing[$index]->Date != $NextPayment) $currentPaymentChanges['date'] = true;
                                if($SeriesPaymentsBeforeReplacing[$index]->ActStatus != $ActStatus) $currentPaymentChanges['status'] = true;
                                
                                if(count($currentPaymentChanges) > 1) array_push($SeriesPaymentsChangesArray, $currentPaymentChanges);
                            }
                        }
                    } else {
                        if ($NumPayment > '24' && $TypePayment != '4') {
                            $NumPayment = '24';
                        }

                        for ($i = $GetCount; $i <= $NumPayment; $i++) {
                            $index = ((int)$i) -1;
                            if ($TypePayment == '3') {
                                $FixDateDay = date("d", strtotime($NextPayment));
                                if ($i == $GetCount) {
                                    $NextPayment = date("Y-m", strtotime($NextPayment));
                                    $NextPaymentMonth = date("m", strtotime($NextPayment));
                                    $NextPaymentLasatDay = date("t", strtotime($NextPayment));
                                } else {
                                    $LastPayment = date("Y-m", strtotime($NextPayment));
                                    $FixTypePayment = @$Vaild_TypeOption[$TypePayment];
                                    $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;
                                    $time = strtotime($LastPayment);
                                    $NextPayment = date("Y-m", strtotime($ItemsTime, $time));
                                    $NextPaymentMonth = date("m", strtotime($NextPayment));
                                    $NextPaymentLasatDay = date("t", strtotime($NextPayment));
                                }

                                if ($FixDateDay <= $NextPaymentLasatDay) $NextPayment = $NextPayment . '-' . $TrueDayNum;
                                else $NextPayment = $NextPayment . '-' . $NextPaymentLasatDay;
                                
                            } else {
                                if ($i == $GetCount) $NextPayment = $NextPayment;
                                 else {
                                    $LastPayment = $NextPayment;
                                    $FixTypePayment = @$Vaild_TypeOption[$TypePayment];
                                    $ItemsTime = '+' . $NumDate . ' ' . $FixTypePayment;
                                    $time = strtotime($LastPayment);
                                    $NextPayment = date("Y-m-d", strtotime($ItemsTime, $time));
                                }
                            }


                            /// מחולל מספר מסמך
                            $TokenGroupNumber = rand(1262055681, 1262055681);
                            $TokenGroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $TokenGroupNumber . '' . rand(1, 9999999);
                            $RandomTokenNumber = uniqid($TokenGroupNumber);
                            $RandomTokenNumber;
                            $AddPayment = DB::table('payment')->insertGetId([
                                'CompanyNum' => $CompanyNum,
                                'ClientId' => $ClientId, 
                                'TypeKeva' => $TypeKeva, 
                                'Amount' => $Amount, 
                                'Date' => $NextPayment, 
                                'Status' => $TrueStatus, 
                                'NumTry' => '0', 
                                'TryDate' => null, 
                                'LastDate' => null, 
                                'KevaId' => $PayTokenId, 
                                'RandomUrl' => $RandomTokenNumber, 
                                'NumPayment' => $i, 
                                'TrueDayNum' => $TrueDayNum, 
                                'ActStatus' => $ActStatus
                            ]);

                            // looks for specific payment changes for Log
                            if(!empty($SeriesPaymentsBeforeReplacing[$index])){
                                $currentPaymentChanges = array('NumPayment' => $i);

                                if($SeriesPaymentsBeforeReplacing[$index]->Amount != $Amount) $currentPaymentChanges['amount'] = true;
                                if($SeriesPaymentsBeforeReplacing[$index]->Date != $NextPayment) $currentPaymentChanges['date'] = true;
                                if($SeriesPaymentsBeforeReplacing[$index]->ActStatus != $ActStatus) $currentPaymentChanges['status'] = true;
                                
                                if(count($currentPaymentChanges) > 1) array_push($SeriesPaymentsChangesArray, $currentPaymentChanges);
                            }
                        }
                    }

                    $CountPayment = DB::table('payment')->where('CompanyNum', '=', $CompanyNum)->where('KevaId', '=', $PayTokenId)->where('Status', '=', '0')->where('ActStatus', '=', '0')->where('ClientId', '=', $ClientId)->count();
                    $Status = $CountPayment >= '1' ? '0' : '1';

                    $GetRowPayments = DB::table('payment')->where('CompanyNum', '=', $CompanyNum)->where('KevaId', '=', $PayTokenId)->where('Status', '=', '0')->where('ActStatus', '=', '0')->orderBy('NumPayment', 'ASC')->first();

                    if (@$GetRowPayments->Date == '') $TrueNextDate = null;
                    else $TrueNextDate = $GetRowPayments->Date;
                    

                    DB::table('paytoken')
                        ->where('id', $PayTokenId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->update(array(
                            'CompanyNum' => $CompanyNum,
                            'ClientId' => $ClientId,
                            'TokenId' => $TokenId,
                            'NumDate' => $NumDate,
                            'TypePayment' => $TypePayment,
                            'Amount' => $Amount,
                            'NextPayment' => $TrueNextDate,
                            'tashType' => $tashType,
                            'Tash' => $Tash,
                            'Text' => $PageInfo->ItemName,
                            'ItemId' => $ItemId,
                            'PageId' => '0',
                            'UserId' => Auth::user()->id,
                            'Status' => $Status,
                            'StopInsert' => $StopInsert
                        ));
                }


                // Log if something changed
                if($PaymentUpdateChangesCount > 0){
                    // Setting up update changes texts for log content

                    if($PaymentUpdateChanges['amount']){
                        $newPriceText = $PaymentBeforeUpdate->Amount.lang('currency_symbol');
                        $oldPriceText = $Amount.lang('currency_symbol');
                    }

                    if($PaymentUpdateChanges['date']){
                        $newChargeDate = date('d/m/Y', strtotime(isset($TrueDatePayment) ? $TrueDatePayment : $NextPayment));
                        $oldChargeDate = date('d/m/Y', strtotime($PaymentBeforeUpdate->Date));
                    }

                    if($PaymentUpdateChanges['status']){
                        $newStatusText = $ActStatus === "0" ? lang('active') : lang('canceled');
                        $oldStatusText = $PaymentBeforeUpdate->ActStatus === "0" ? lang('active') : lang('canceled');    
                    }

                    if($EditKevaAll !== "0"){ // for updates in case of series update
                        if($PaymentUpdateChanges['NumDate'] || $PaymentUpdateChanges['PayStep']){
                            $oldPaymentStep = "$GetRowKevaInfo->NumDate ". PayToken::getTypePaymentDescription((int)$GetRowKevaInfo->TypePayment);
                            $newPaymentStep = "$NumDate " . PayToken::getTypePaymentDescription((int)$TypePayment);
                            $PaymentStepChangeText = lang('next_direct_charge_date') . ": $oldPaymentStep $arrowTo $newPaymentStep";
                        }

                        if($PaymentUpdateChanges['ItemId']){
                            $ItemMembershipText = lang('membership_modified') . ": $GetRowKevaInfo->Text $arrowTo " . Item::find($ItemId)->ItemName;
                        }
                    }
                    
                    // Composing log content
                    $PUC = $PaymentUpdateChanges; // just shorting variable name for the ',' checks

                    $ChangeLogText = Auth::user()->display_name." ".lang('log_edit_recurring_ajax')." ";
                    $ChangeLogText .= "<a href='ClientProfile.php?u=$PaymentUpdateClient->id' target='_blank'>$PaymentUpdateClient->CompanyName<a/>";
                    $ChangeLogText .= $PaymentUpdateChangesCount > 1 ? "<br/>" : ", ";
                    $ChangeLogText .= $PaymentUpdateChanges['amount'] ? lang('price_to_charge') . ": $oldPriceText $arrowTo $newPriceText" : null;
                    $ChangeLogText .= $PUC['amount'] && $PaymentUpdateChanges['date'] ? ", " : null;
                    $ChangeLogText .= $PaymentUpdateChanges['date'] ? lang('charge_date') . ": $oldChargeDate $arrowTo $newChargeDate" : null;
                    $ChangeLogText .= ($PUC['date'] || $PUC['amount']) && $PaymentUpdateChanges['status'] ? ", " : null;
                    $ChangeLogText .= $PaymentUpdateChanges['status'] ? lang('status') . ": $oldStatusText $arrowTo $newStatusText" : null;
                    
                    if($EditKevaAll !== "0"){ // for case of series update
                        $ChangeLogText .= ($PUC['amount'] || $PUC['date'] || $PUC['status']) && $PaymentUpdateChanges['TokenId'] ? ", " : null;
                        $ChangeLogText .= $PaymentUpdateChanges['TokenId'] ? " " . lang('credit_card_modified') : null;
                        $ChangeLogText .= ($PUC['amount'] || $PUC['date'] || $PUC['status'] || $PUC['TokenId']) && $PaymentUpdateChanges['ItemId'] ? ", " : null;
                        $ChangeLogText .= $PaymentUpdateChanges['ItemId'] ? $ItemMembershipText : null;
                        $ChangeLogText .= ($PUC['amount'] || $PUC['date'] || $PUC['status'] || $PUC['TokenId'] || $PUC['ItemId']) && ($PaymentUpdateChanges['NumDate'] || $PaymentUpdateChanges['PayStep'])? ", " : null;
                        $ChangeLogText .= $PaymentUpdateChanges['NumDate'] || $PaymentUpdateChanges['PayStep'] ? $PaymentStepChangeText : null;
                    }
                    
                    $ChangeLogText .= ", ";
                    $ChangeLogText .= $EditKevaAll === "0" ? lang('edited_single_payment') : lang('edited_series_payment') ;
                    $ChangeLogText = htmlentities($ChangeLogText);

                    DB::table('log')->insert(array('UserId' => Auth::user()->id, 'Text' => $ChangeLogText, 'Dates' => date('Y-m-d H:i:s'), 'ClientId' => $PaymentUpdateClient->id));

                }elseif(isset($SeriesPaymentsChangesArray) && count($SeriesPaymentsChangesArray) > 0){

                    $dateChanges = array_filter($SeriesPaymentsChangesArray, function($paymentChanges){ if(isset($paymentChanges['date'])) return true; });
                    $amountChanges = array_filter($SeriesPaymentsChangesArray, function($paymentChanges){ if(isset($paymentChanges['amount'])) return true; });
                    $statusChanges = array_filter($SeriesPaymentsChangesArray, function($paymentChanges){ if(isset($paymentChanges['status'])) return true; });

                    $ChangeLogText = Auth::user()->display_name." ".lang('log_edit_recurring_ajax')." ";
                    $ChangeLogText .= "<a href='ClientProfile.php?u=$PaymentUpdateClient->id' target='_blank'>$PaymentUpdateClient->CompanyName<a/>, ";
                    $ChangeLogText .= count($amountChanges) ? lang('price_to_charge') . ": $Amount".lang('currency_symbol') : null;
                    $ChangeLogText .= count($amountChanges) && count($dateChanges) ? ", " : null;
                    $ChangeLogText .= count($dateChanges) ? lang('charge_date') . ": " . date('d/m/Y', strtotime($TrueDatePayment)) : null;
                    $ChangeLogText .= count($amountChanges) && count($dateChanges) && count($statusChanges) ? ", " : null;
                    $ChangeLogText .= count($statusChanges) ? lang('status') . ": " . (!(int)$ActStatus ? lang('active') : lang('canceled')) : null;
                    $ChangeLogText .= ", ";
                    $ChangeLogText .= $EditKevaAll === "0" ? lang('edited_single_payment') : lang('edited_series_payment') ;
                    $ChangeLogText = htmlentities($ChangeLogText);

                    DB::table('log')->insert(array('UserId' => Auth::user()->id, 'Text' => $ChangeLogText, 'Dates' => date('Y-m-d H:i:s'), 'ClientId' => $PaymentUpdateClient->id));
                }

                json_message();

            } else json_message($validator->errors()->toArray(), false);

        break;

        // CRM - Add Task
        // TODO clean up after beta - BS-1823
        case 'AddCalendarClient':
            if (Auth::guest()) exit;

            $validator = Validator::make($_POST, [
                'TaskTitle' => 'Required|min:1',
                'SetDate' => 'Required',
                'SetTime' => 'Required',
                'SetToTime' => 'Required',
            ]);

            if ($validator->passes()) {
                $SetDate = $_POST['SetDate'];
                $SetTime = $_POST['SetTime'];
                $SetToTime = $_POST['SetToTime'];
                $Title = $_POST['TaskTitle'];

                $Floor = $_POST['FloorId'] ?? 0;

                $PipeLineId = $_POST['PipeLineId'] ?? '';
                $CalendarId = $_POST['CalendarId'] ?? '';

                $Type = $_POST['optionsmobile'] ?? $_POST['TypeOption'];

                /** @var CalType $CalTypes */
                $CalTypes = CalType::find($Type);
                $Color = $CalTypes->Color ?? '';
                $Icon = $CalTypes->Icon ?? '';

                $AgentId = $_POST['AgentId'] ?? 0;

                $ClientId = $_POST['ClientForTask'] ?? 0;
                if ($ClientId == 0) {
                    $ClientId = $_POST['ClientId'] ?? 0;
                }
                /** @var Client $UserInfos */
                $UserInfos = Client::find($ClientId);

                if (!$UserInfos) {
                    $text = $Title;
                } else {
                    $text = $UserInfos->CompanyName . ' :: ' . $Title;
                }

                // TODO remove after beta - BS-1823 - start
                if ($Floor != '0') {
                    /// בדיקת חדר ישיבות - חסימת שיבוץ כפול
                    if (@$CalendarId == '' || @$CalendarId == '0') {
                        $CheckFloor = DB::table('calendar')->where('Floor', '=', $Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $SetDate)->where('StartTime', '>=', $SetTime)->where('EndTime', '<=', $SetToTime)->where('Status', '!=', '2')->Orwhere('Floor', '=', $Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $SetDate)->where('StartTime', '<=', $SetToTime)->where('EndTime', '>=', $SetTime)->where('Status', '!=', '2')->first();
                    } else {
                        $CheckFloor = DB::table('calendar')->where('id', '!=', $CalendarId)->where('Floor', '=', $Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $SetDate)->where('StartTime', '>=', $SetTime)->where('EndTime', '<=', $SetToTime)->where('Status', '!=', '2')->Orwhere('id', '!=', $CalendarId)->where('Floor', '=', $Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $SetDate)->where('StartTime', '<=', $SetToTime)->where('EndTime', '>=', $SetTime)->where('Status', '!=', '2')->first();
                    }

                    if (@$CheckFloor != '') {
                        json_message(lang('conference_room_date_ajax'), false);
                        exit;
                    }
                }
                // TODO remove after beta - BS-1823 - end


                /** @var Section $CheckSections */
                $CheckSections = Section::find($Floor);

                if ($BrandsMain == '0') {
                    $CheckUsers = DB::table('users')->where('id', '=', $AgentId)->where('CompanyNum', '=', $CompanyNum)->first();
                } else {
                    $CheckUsers = DB::table('users')->where('id', '=', $AgentId)->where('BrandsMain', '=', $BrandsMain)->first();
                }

                $TaskStatus = $_POST['TaskStatus'] ?? 0;
                if ($TaskStatus == '1') {
                    $Color = '#e2e2e2';
                } else if ($TaskStatus == '2') {
                    $Color = '#EFCDCE';
                }

                $data = [
                    'start_date' => $SetDate . ' ' . $SetTime,
                    'end_date' => $SetDate . ' ' . $SetToTime,
                    'text' => $text,
                    'color' => $Color,
                    'AllDay' => '0',
                    'Type' => $Type,
                    'Floor' => $Floor,
                    'Level' => $_POST['Level'] ?? 0,
                    'AgentId' => $AgentId,
                    'Content' => $_POST['Remarks'] ?? '',
                    'SendMail' => isset($_POST['SendMail']) ? '1' : '0',
                    'ClientId' => $ClientId,
                    'User' => $UserId,
                    'Dates' => date('Y-m-d G:i:s'),
                    'CompanyNum' => $CompanyNum,
                    'GuideName' => $CheckUsers->display_name ?? '',
                    'FloorName' => $CheckSections->Title ?? '',
                    'StartDate' => $SetDate,
                    'StartTime' => $SetTime,
                    'EndTime' => $SetToTime,
                    'PipeLineId' => $PipeLineId,
                    'ItemId' => '0',
                    'Title' => $Title,
                    'Status' => $TaskStatus,
                    'TypeTitle' => $CalTypes->Type ?? '',
                    'GroupPermission' => implode(',', $_POST['SendStudioOption'] ?? []),
                ];

                if (@$CalendarId == '' || @$CalendarId == '0') {
                    $Calendar = DB::table('calendar')->insertGetId($data);
                } else {
                    DB::table('calendar')
                        ->where('id', $CalendarId)
                        ->where('CompanyNum', $CompanyNum)
                        ->update($data);
                }

                // עדכון נתוני PIPELINE
                if ($UserInfos && $UserInfos->Status == Client::STATUS_LEAD) {
                    $GetTasks = DB::table('calendar')
                        ->where('ClientId', '=', $ClientId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('Status', '=', '0')
                        ->orderBy('StartDate')
                        ->orderBy('StartTime')
                        ->get();

                    $TasksJSON = [];
                    foreach ($GetTasks as $GetTask) {
                        $TasksJSON[] = [
                            "Date" => $GetTask->StartDate,
                            "Time" => $GetTask->StartTime,
                            "Title" => htmlentities($GetTask->Title),
                            "Id" => $GetTask->id,
                            "Icon" => $Icon,
                        ];
                    }
                    $TasksJSON = json_encode(["data" => $TasksJSON]);

                    //// הגדרת סטטוס לפייפליין
                    $CountTaskOpen = DB::table('calendar')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->count();
                    $CountTaskOver = DB::table('calendar')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '<', date('Y-m-d'))->where('Status', '=', '0')->count();
                    $CountTaskFuture = DB::table('calendar')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '>', date('Y-m-d'))->where('Status', '=', '0')->count();
                    $CountTaskToday = DB::table('calendar')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', date('Y-m-d'))->where('Status', '=', '0')->count();
                    $CountTaskClose = DB::table('calendar')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '1')->count();

                    if ($CountTaskFuture >= '1') {
                        $TaskStatus = '4';
                        $StatusColor = '#40A4C5';
                    }

                    if ($CountTaskClose >= '1' && $CountTaskOpen == '0') {
                        $TaskStatus = '3';
                        $StatusColor = '#abb1bf';
                    }

                    if ($CountTaskClose == '0' && $CountTaskOpen == '0') {
                        $TaskStatus = '2';
                        $StatusColor = '#fff0b3';
                    }

                    if ($CountTaskOver >= '1') {
                        $TaskStatus = '1';
                        $StatusColor = '#ff8080';
                    }

                    if ($CountTaskToday >= '1') {
                        $TaskStatus = '0';
                        $StatusColor = '#9ce2a7';
                    }

                    DB::table('pipeline')
                        ->where('CompanyNum', $CompanyNum)
                        ->where('ClientId', $ClientId)
                        ->update([
                            'TaskStatus' => $TaskStatus,
                            'StatusColor' => $StatusColor,
                            'Tasks' => $TasksJSON,
                        ]);
                }

                json_message(lang('info_saved_ajax'));
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        // GeneralSettings  - Add
        case 'GeneralSettingsPage':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('CompanyNum' => $_POST['CompanyNum']),
                array('CompanyNum' => 'Required')
            );

            if ($validator->passes()) {
                $updateArr = [
                    'NikuyMsBamakor' => $_POST['NikuyMsBamakor'] ?? $SettingsInfo->NikuyMsBamakor,
                    'NikuyMsBamakorDate' => $_POST['NikuyMsBamakorDate'] ?? $SettingsInfo->NikuyMsBamakorDate,
                    'AppName' => $_POST['AppName'],
                    'CpaType' => $_POST['CpaTypes'] ?? $SettingsInfo->CpaType,
                    'CompanyName' => $_POST['CompanyName'] ?? $SettingsInfo->CompanyName

                ];

                $updateSettings = DB::table('settings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update($updateArr);



                DB::table('boostapplogin.studio')
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('StudioName' => $_POST['AppName']));


                CreateLogMovement(

                    lang('log_business_settings_ajax'),

                    '0');





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;

        // ContactInfoPage  - Add
        case 'ContactInfoPage':
            if (Auth::guest()) exit;

            $validator = Validator::make($_POST, [
                'CompanyNum' => 'Required',
                'Email' => 'Required',
                'ContactMobile' => 'Required',
            ]);

            if ($validator->passes()) {
                DB::table('settings')
                    ->where('CompanyNum', Auth::user()->CompanyNum)
                    ->update([
                        'Zip' => $_POST['Zip'],
                        'POBox' => $_POST['POBox'],
                        'WebSite' => $_POST['WebSite'],
                        'Email' => $_POST['Email'],
                        'ContactMobile' => $_POST['ContactMobile'],
                        'ContactPhone' => $_POST['ContactPhone'],
                        'ContactFax' => $_POST['ContactFax'],
                        'FaceBookId' => $_POST['FaceBookId'],
                        'PhoneClient' => $_POST['PhoneClient'],
                    ]);

                $clientId = DB::table('247softnew.client')
                    ->where('247softnew.client.FixCompanyNum', '=', Auth::user()->CompanyNum)
                    ->pluck('id');

                // check and write to `247softnew` DB
                if (isset($_POST['PlaceString']) && $_POST['PlaceString']) {
                    if(isset($_POST['PlaceCity'])) {
                        $city_id = (new City())->getCityIdByName($_POST['PlaceCity']);
                    }

                    if (DB::table('247softnew.client_google_address')
                        ->where('client_id', '=', $clientId)
                        ->exists()) {
                        DB::table('247softnew.client_google_address')
                            ->where('client_id', '=', $clientId)
                            ->update([
                                'place_id' => $_POST['PlaceId'],
                                'address' => $_POST['PlaceString'],
                                'lat_lng' => $_POST['PlaceLatLng'] ?? '',
                                'city_id' => $city_id ?? null
                            ]);
                    } else {
                        DB::table('247softnew.client_google_address')
                            ->insert([
                                'client_id' => $clientId,
                                'place_id' => $_POST['PlaceId'],
                                'address' => $_POST['PlaceString'],
                                'lat_lng' => $_POST['PlaceLatLng'] ?? '',
                                'city_id' => $city_id ?? null
                            ]);
                    }
                } else {
                    DB::table('247softnew.client_google_address')
                        ->where('client_id', '=', $clientId)
                        ->delete();
                }

                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;


        // DocsRemakrsPage  - Add



        case 'DocsRemakrsPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {





                $CompanyNum = $CompanyNum;



                $DocsTables = DB::table('docstable')->where('CompanyNum', $CompanyNum)->where('Status', '=', '0')->get();

                foreach ($DocsTables as $DocsTable) {



                    $DocsId = $DocsTable->id;

                    $DocsRemarks = $_POST['DocNotes' . $DocsTable->id];

                    if ($DocsRemarks == '<p><br></p>') {

                        $DocsRemarks = '';

                    }



                    DB::table('docstable')

                        ->where('id', $DocsId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('DocsRemarks' => $DocsRemarks));



                }



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AccountManagerPage  - Add



        case 'AccountManagerPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;



                $CpaEmail = $_POST['CpaEmail'];

                $CpaEmailCopy = $_POST['CpaEmailCopy'];





                DB::table('settings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('CpaEmail' => $CpaEmail, 'CpaEmailCopy' => $CpaEmailCopy));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // DesignDocumentLog  - Add



        case 'DesignDocumentLog':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {



                $DocsBackgroundColor = $_POST['DocsBackgroundColor'];

                $DocsDetailDBs = DB::table('docsdetails')->where('CompanyNum', $CompanyNum)->where('EditTable', '=', '1')->get();

                foreach ($DocsDetailDBs as $DocsDetailDB) {

                    if(isset($_POST['DocChooseTd' . $DocsDetailDB->id])) {

                        $DocsDetailsId = $DocsDetailDB->id;

                        $DocsDetailsChooseTd = $_POST['DocChooseTd' . $DocsDetailDB->id];


                        DB::table('docsdetails')
                            ->where('id', $DocsDetailsId)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('Status' => $DocsDetailsChooseTd));

                    }

                }

                DB::table('settings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('DocsBackgroundColor' => $DocsBackgroundColor));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // VoiceCenterPage  - Add



        case 'VoiceCenterPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;



                $VoiceCenterToken = $_POST['VoiceCenterToken'];

                $VoiceCenterNumber = $_POST['VoiceCenterNumber'];





                DB::table('settings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('VoiceCenterToken' => $VoiceCenterToken, 'VoiceCenterNumber' => $VoiceCenterNumber));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // DocsNumPage  - Add



        case 'DocsNumPage':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {





                $CompanyNum = $CompanyNum;



                $DocsTables = DB::table('docstable')->where('CompanyNum', $CompanyNum)->where('Status', '=', '0')->get();

                foreach ($DocsTables as $DocsTable) {



                    $DocsCountGets = DB::table('docs')->where('CompanyNum', $CompanyNum)->where('TypeDoc', '=', $DocsTable->id)->orderBy('id', 'DESC')->first();



                    if (@$DocsCountGets->TypeNumber == '') {

                        $DocIdCount = '0';

                    } else {

                        $DocIdCount = '1';

                    }



                    if ($DocIdCount != '0') {

                    } else {



                        $DocNumber = $_POST['DocNumber' . $DocsTable->id];



                        DB::table('docstable')

                            ->where('id', $DocsTable->id)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('TypeNumber' => $DocNumber));



                    }





                }



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // POSCancelDocs  - Add



        case 'POSCancelDocs':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('TempIdPOSCancelDocs' => $_POST['TempIdPOSCancelDocs']),
                array('TempIdPOSCancelDocs' => 'Required')
            );

            if ($validator->passes()) {
                $StatusPay = '';
                $TempId = $_POST['TempIdPOSCancelDocs'];
                $CompanyNum = Auth::user()->CompanyNum;

                /// בדיקת תשלום אשראי
                $studioSettings = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                $TypeShva = $studioSettings->TypeShva;
                $MeshulamAPI = $studioSettings->MeshulamAPI;
                $MeshulamUserId = $studioSettings->MeshulamUserId;
                $LiveMeshulam = $studioSettings->LiveMeshulam;

                /** @var TempReceiptPayment[] $TempPaymentInfos */
                $TempPaymentInfos = TempReceiptPayment::where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->get();
                foreach ($TempPaymentInfos as $TempPaymentInfo) {
                    if ($TempPaymentInfo->TypePayment != 3) {
                        DB::table('temp_receipt_payment')->where('TempId', '=', $TempId)->where('id', '=', $TempPaymentInfo->id)->where('CompanyNum', '=', $CompanyNum)->delete();
                        $StatusPay = lang('docs_receipt_0');
                    } elseif ($TempPaymentInfo->TypePayment == 3) {
                        //// כרטיס אשראי

                        $client = new Client($TempId);
                        $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                        $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                        $order->TempReceiptId = $TempPaymentInfo->id;
                        $order->save();

                        $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                        if ($TypeShva == PaymentTypeEnum::TYPE_YAAD) {
                            // Yaad
                            $tokenId = $TempPaymentInfo->TokenId;
                            $tokenModel = Token::where('id', $tokenId)->first();
                            if (!$tokenModel) {
                                throw new InvalidArgumentException('Token is not valid');
                            }

                            $order->TokenId = $tokenModel->id;
                            $order->save();

                            try {
                                $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                                $CCode = $paymentResult['CCode'];

                                $TempPaymentInfo->delete();
                                $StatusPay = lang('docs_receipt_0');
                            } catch (\Throwable $e) {
                                if (!is_numeric($e->getMessage())) {
                                    LoggerService::error($e, LoggerService::CATEGORY_YAADSARIG);
                                }

                                // we keep CCode in message for Yaad
                                $CCode = $e->getMessage();
                                $StatusPay = @$StatusreditCard[$CCode];

                                if ($StatusPay == '') {
                                    $StatusNew = '2';
                                    $StatusPay = lang('unknow_error_meshulam');
                                }
                            }
                        } elseif ($TypeShva == PaymentTypeEnum::TYPE_MESHULAM) {
                            //// ביטול עסקאות משולם
                            $TempInfo = DB::table('temp')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TempId)->first();
                            $UserId = Auth::user()->id;

                            try {
                                $paymentResult = $paymentSystem->makeRefund($studioSettings->MeshulamAPI, $studioSettings->MeshulamUserId, $TempPaymentInfo->YaadCode, $TempPaymentInfo->PayToken, $TempPaymentInfo->Amount, $TempPaymentInfo->MeshulamPageCode);

                                $transaction = new Transaction();
                                $transaction->CompanyNum = $CompanyNum;
                                $transaction->ClientId = $TempId;
                                $transaction->UpdateTransactionDetails = serialize($paymentResult);
                                $transaction->UserId = 0;
                                $transaction->save();

                                $order->TransactionId = $transaction->id;
                                $order->save();

                                $TempPaymentInfo->delete();
                                $StatusPay = lang('docs_receipt_0');

                                $UpdateTransactionDetails = serialize($paymentResult);
                                $InsertTransaction = DB::table('transaction')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $UpdateTransactionDetails, 'UserId' => $UserId));
                            } catch (\Throwable $e) {
                                LoggerService::error($e, LoggerService::CATEGORY_MESHULAM);

                                DB::table('transaction_error')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $e->getMessage(), 'UserId' => $UserId));
                                $StatusNew = '2';
                                $StatusPay = $e->getMessage();
                            }
                        } elseif ($TypeShva == PaymentTypeEnum::TYPE_TRANZILA) {
                            //// ביטול עסקאות רנזילה
                            $TempInfo = DB::table('temp')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TempId)->first();
                            $UserId = Auth::user()->id;

                            try {
                                $tokenId = $TempPaymentInfo->TokenId;
                                $token = Token::where('id', $tokenId)->first();

                                $paymentResult = $paymentSystem->makeRefundWithToken($order, $token, $TempPaymentInfo->YaadCode, $TempPaymentInfo->ACode);

                                $transaction = new Transaction();
                                $transaction->CompanyNum = $CompanyNum;
                                $transaction->ClientId = $TempId;
                                $transaction->UpdateTransactionDetails = serialize($paymentResult);
                                $transaction->UserId = 0;
                                $transaction->save();

                                $order->TransactionId = $transaction->id;
                                $order->save();

                                $TempPaymentInfo->delete();
                                $StatusPay = lang('docs_receipt_0');

                                $UpdateTransactionDetails = serialize($paymentResult);
                                $InsertTransaction = DB::table('transaction')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $UpdateTransactionDetails, 'UserId' => $UserId));
                            } catch (\Throwable $e) {
                                LoggerService::error($e, LoggerService::CATEGORY_MESHULAM);

                                DB::table('transaction_error')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $TempInfo->ClientId, 'UpdateTransactionDetails' => $e->getMessage(), 'UserId' => $UserId));
                                $StatusNew = '2';
                                $StatusPay = $e->getMessage();
                            }
                        }
                    }
                }

                /// מחיקת קבצים זמניים
                $TempPaymentCount = DB::table('temp_receipt_payment')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->count();
                if ($TempPaymentCount == 0) {
                    $StatusNew = 1;
                    DB::table('temp')->where('id', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->delete();
                    DB::table('templist')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->delete();
                } else {
                    $StatusNew = '0';
                }

                json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'StatusNew' => $StatusNew));
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;

        // Chat - שליחת הודעה



        case 'ChatSend':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('UserId' => $_POST['UserId'], 'Content' => $_POST['Content']),

                array('UserId' => 'Required', 'Content' => 'Required')

            );



            if ($validator->passes()) {



                $UserId = $_POST['UserId']; //0=All Users

                $Content = $_POST['Content'];

                $time = date('Y-m-d G:i:s');

                $Status = '0';

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                if ($UserId == '0') {

                    $UsersAllLoops = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->get();

                    foreach ($UsersAllLoops as $UsersAllLoop) {



                        $ChatUsers = DB::table('chat')->where('CompanyNum', '=', $CompanyNum)->where('ToUserId', '=', $UsersAllLoop->id)->first();



                        //רנדומלי לדאטה בייס

                        if (@$ChatUsers->id == '') {

                            $ChatRandom = $CompanyNum . '::' . $UsersAllLoop->id;

                        } else {

                            $ChatRandom = $ChatUsers->ChatRandom;

                        }

                        //רנדומלי לדאטה בייס



                        $SendChat = DB::table('chat')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'UserId' => $CurrentUser, 'ToUserId' => $UsersAllLoop->id, 'Dates' => $time, 'Content' => $Content, 'ChatRandom' => $ChatRandom, 'AllUsers' => '1'));





                        //// הגדרת התראה לאפליקציה



                        $Date = date('Y-m-d');

                        $Time = date('H:i');

                        $Dates = date('Y-m-d H:i:s');

                        $Text = lang('new_chat_ajax'). '<br>'  . htmlentities($SettingsInfo->AppName);

                        $Subject = lang('new_chat_ajax'). '<br>' . htmlentities($SettingsInfo->AppName);



                        $AddNotification = DB::table('appnotification')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ClientId' => $UsersAllLoop->id, 'Subject' => $Subject, 'Text' => $Text, 'Dates' => $Dates, 'UserId' => '0', 'Date' => $Date, 'Time' => $Time, 'SendType' => '1'));





                    }





                    $SendChat = DB::table('chat')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'UserId' => '0', 'ToUserId' => '0', 'Dates' => $time, 'Content' => $Content, 'ChatRandom' => '0', 'AllUsers' => '1'));





                } else {





                    $ChatUsers = DB::table('chat')->where('CompanyNum', '=', $CompanyNum)->where('ToUserId', '=', $UserId)->first();



                    //רנדומלי לדאטה בייס

                    if (@$ChatUsers->id == '') {

                        $ChatRandom = $CompanyNum . '::' . $UserId;

                    } else {

                        $ChatRandom = $ChatUsers->ChatRandom;

                    }

                    //רנדומלי לדאטה בייס



                    $SendChat = DB::table('chat')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'UserId' => $CurrentUser, 'ToUserId' => $UserId, 'Dates' => $time, 'Content' => $Content, 'Status' => $Status, 'ChatRandom' => $ChatRandom));





                    //// הגדרת התראה לאפליקציה



                    $Date = date('Y-m-d');

                    $Time = date('H:i');

                    $Dates = date('Y-m-d H:i:s');

                    $Text = lang('new_chat_ajax'). '<br>' . htmlentities($SettingsInfo->AppName);

                    $Subject = lang('new_chat_ajax'). '<br>' . htmlentities($SettingsInfo->AppName);



                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $UserId, 'Subject' => $Subject, 'Text' => $Text, 'Dates' => $Dates, 'UserId' => '0', 'Date' => $Date, 'Time' => $Time, 'SendType' => '1'));





                }



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





//QuickUpdate :: ClientProfile :: Email

        case 'EditClientQuickemail':
            if (Auth::guest()) exit;

            $CheckInUsersTable = DB::table('client')->where('id', '=', $_POST['ClientId'])->first();
            if ($_POST['email'] != $CheckInUsersTable->Email && $_POST['email'] != '') {$UniqueSet = '|unique:client';}

            $validator = Validator::make(
                array('email' => $_POST['email'],'ClientId' => $_POST['ClientId']),
                array('email' => 'required','ClientId' => 'required')
            );

            if ($validator->passes()) {
                $CurrentUser = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $time = date('Y-m-d G:i:s');
                $Email = trim($_POST['email']);
                $ClientId = $_POST['ClientId'];

                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;

                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', @$ClientId)->first();

                $userInfo =  DB::table('boostapplogin.users')->where('email', $ClientInfo->Email)->first();
                //$getStudios = 0;
                // if (!empty($userInfo->id)) {
                //     $getStudios = DB::table('boostapplogin.studio')->where('UserId', $userInfo->id)->count();
                // }


                // if the email address has changed
                if ($ClientInfo->Email != $Email) {

                    $CheckClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('Email', $Email)->first();

                    if (@$CheckClientInfo->id!='') {
                        json_message('דואר אלקטרוני קיים במערכת', false);
                        exit;
                    }

                }
                // else {
                //     json_message('כתובת הדואר אלקטרוני לא השתנתה', false);
                //     exit;
                // }


                DB::table('client')
                    ->where('id', $ClientId)
                    ->update(array('Email' => $Email));

                //    if($getStudios == 1) {
                //         DB::table('boostapplogin.users')
                //         ->where('id', $userInfo->id)
                //         ->update(array('email' => $Email));
                //    }

                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

//END QuickUpdate :: ClientProfile :: Email





//QuickUpdate :: ClientProfile :: Phone

        case 'EditClientQuickphone':

            if (Auth::guest()) exit;

            $CheckInUsersTable = DB::table('client')->where('id', '=', $_POST['ClientId'])->first();

            if ($_POST['phone'] != $CheckInUsersTable->ContactMobile && $_POST['phone'] != '') {
                $UniqueSet = '|unique:client';
            }

            $validator = Validator::make(
                array('ContactMobile' => $_POST['phone'], 'ClientId' => $_POST['ClientId']),
                array('ContactMobile' => 'required', 'ClientId' => 'required')
            );

            if ($validator->passes()) {
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $time = date('Y-m-d H:i:s');
                $ContactMobile = $_POST['phone'];
                $ClientId = $_POST['ClientId'];

                $mobile = substr($ContactMobile, 0, 4) == '+972' ? substr($ContactMobile, 4, strlen($ContactMobile)) : $ContactMobile;
                $mobile = substr($mobile, 0, 1) == '0' ? substr($mobile, 1, strlen($mobile)) : $mobile;

                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', $ClientId)->first();
                $isMinor = false;
                if($ClientInfo->parentClientId != 0) {
                    $isMinor = true;
                }

                if((!$isMinor && !preg_match(ClientService::MOBILE_REGEX, $ContactMobile)) ||
                    ($isMinor && !empty($ContactMobile) && !preg_match(ClientService::MOBILE_REGEX, $ContactMobile))) {
                    json_message(lang('mobile_req_ajax'), false);
                    exit;
                }

                $mobileRegex = "^[\+972|\+91|\+1|\+44]*0?".$mobile."$";
                $isMobileExist = DB::table('client')->where('id', '!=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->whereRaw("ContactMobile regexp '".$mobileRegex."'")->first();
                if ($isMobileExist) {
                    json_message(lang('mobile_exists_ajax'), false);
                    exit;
                }


                ///israeli phone number including country code
                $mobile = '+972'.$mobile;
                $sendDetails = false;

                if(!$isMinor) {
                    $appUser = DB::table('boostapplogin.users')->where('newUsername', '=', $mobile)->first();

                    if(!empty($appUser)) {

                        $appStudio = DB::table('boostapplogin.studio')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->first();

                        if (!empty($appStudio)) {

                            //   set date and time to allow new studio url saved first
                            $lastDate = date("Y-m-d");
                            $lastTime = date("H:i:s");

                            DB::table('boostapplogin.studio')
                                ->where('id', $appStudio->id)
                                ->where('CompanyNum', $CompanyNum)
                                ->update(array('UserId' => $appUser->id, 'Status' => '0', 'StatusBadPoint' => '0','LastDate' => $lastDate, 'LastTime' => $lastTime));

                        } else {
                            $appStudio = DB::table('boostapplogin.studio')->insertGetId(
                                array(
                                    'StudioUrl' => $SettingsInfo->StudioUrl,
                                    'StudioName' => htmlentities($SettingsInfo->AppName),
                                    'CompanyNum' => $CompanyNum,
                                    'UserId' => $appUser->id,
                                    'ClientId' => $ClientId,
                                    'Memotag' => $SettingsInfo->Memotag,
                                    'Folder' => $SettingsInfo->Folder,
                                    'Takanon' => $ClientInfo->Takanon,
                                    'Medical' => $ClientInfo->Medical
                                ));

                        }

                        DB::table('boostapplogin.users')
                            ->where('id', $appUser->id)
                            ->update(['newUsername' => $mobile, 'ContactMobile' => $mobile]);

                    } else {

                        $appStudio = DB::table('boostapplogin.studio')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();

                        if (!empty($appStudio->UserId)) {

                            DB::table('boostapplogin.users')
                                ->where('id', $appStudio->UserId)
                                ->update(['newUsername' => $mobile, 'ContactMobile' => $mobile]);

                        } else { ////  הקם חדש

                            $AppPassword = mt_rand(100000, 999999);
                            $password = Hash::make($AppPassword);
//                            $sendDetails = false;

                            $appUserId = DB::table('boostapplogin.users')->insertGetId(
                                array('username' => trim($ClientInfo->Email),
                                    'newUsername' => $mobile,
                                    'email' => trim($ClientInfo->Email),
                                    'password' => $password,
                                    'display_name' => htmlentities($ClientInfo->CompanyName),
                                    'FirstName' => htmlentities($ClientInfo->FirstName),
                                    'LastName' => htmlentities($ClientInfo->LastName),
                                    'ContactMobile' => $mobile,
                                    'AppLoginId' => $mobile,
                                    'status' => '1',
                                    'PassAct' => '0'
                                ));

                            if ($appUserId != 0 && $ClientId != 0) {
                                $AppStudio = DB::table('boostapplogin.studio')->insertGetId(
                                    array('StudioUrl' => $SettingsInfo->StudioUrl,
                                        'StudioName' => htmlentities($SettingsInfo->AppName),
                                        'CompanyNum' => $CompanyNum,
                                        'UserId' => $appUserId,
                                        'ClientId' => $ClientId,
                                        'Memotag' => $SettingsInfo->Memotag,
                                        'Folder' => $SettingsInfo->Folder,
                                        'Takanon' => $ClientInfo->Takanon,
                                        'Medical' => $ClientInfo->Medical
                                    ));
                            }

                        }

                    }
                }



                if($sendDetails && !empty($ClientInfo->Email)) {

                    ///////////  שליחת פרטי התחברות עדכון דואר אלקטרוני

                    $Template = (new Notificationcontent())->getByTypeAndCompany($CompanyNum, 21);

                    $CompanyInfo = Company::getInstance();

                    /// עדכון תבנית הודעה

                    $GooglePlayLink = 'https://play.google.com/store/apps/details?id=com.connect_computer.boostnew&gl=IL';
                    $AppStoreLink = 'https://apps.apple.com/us/app/boost-%D7%91%D7%95%D7%A1%D7%98/id1479519489';

                    if (!empty($CompanyInfo->GooglePlayLink )){
                        $GooglePlayLink = $CompanyInfo->GooglePlayLink;
                    }
                    if (!empty($CompanyInfo->AppStoreLink )){
                        $AppStoreLink = $CompanyInfo->AppStoreLink;
                    }

                    $AppStore = '<a href="'.$AppStoreLink.'">App Store</a>';
                    $GooglePlay = '<a href="'.$GooglePlayLink.'">Google Play</a>';

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Template->Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName, $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName, $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["username_single"], $ClientInfo->Email, $Content3);
                    $Content5 = str_replace(Notificationcontent::REPLACE_ARR["password_single"], $AppPassword, $Content4);
                    $Content6 = str_replace("App Store",$AppStore,$Content5);
                    $ContentTrue = str_replace("Google Play",$GooglePlay,$Content6);


                    if ($Template->SendOption == '1') {
                        $SendType = '1';
                        $Text = lang('app_login_ajax').' 
                        '.lang('username_ajax').' '.$ClientInfo->Email.'
                        '.lang('email_password_ajax').' '.$AppPassword.'
                        '.$CompanyInfo->AppName;
                    } else {
                        $SendType = '2';
                        $Text = $ContentTrue;
                    }




                    $AddNotification = DB::table('appnotification')->insertGetId(
                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Type' => $SendType, 'Subject' => $Template->Subject, 'Text' => $Text, 'Dates' => date('Y-m-d H:i:s'), 'UserId' => $UserId, 'Date' => date('Y-m-d'), 'Time' => date('H:i:s'), 'SendType' => '1', 'EmailAddress' => $ClientInfo->Email, 'PhoneNumber' => $mobile, 'priority' => '1') );

                }

                DB::table('client')
                    ->where('id', $ClientId)
                    ->update(array('ContactMobile' => $mobile));


                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;

//END QuickUpdate :: ClientProfile :: Phone





//QuickUpdate :: ClientProfile :: CompanyId

        case 'EditClientQuickcompanyid':

            if (Auth::guest()) exit;



            $CheckInUsersTable = DB::table('client')->where('id', '=', $_POST['ClientId'])->first();

            if ($_POST['companyid'] != $CheckInUsersTable->CompanyId && $_POST['companyid'] != '') {

                $UniqueSet = '|unique:client';

            }



            $validator = Validator::make(

                array('CompanyId' => $_POST['companyid'], 'ClientId' => $_POST['ClientId']),

                array('CompanyId' => 'required|numeric|digits:9', 'ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $time = date('Y-m-d G:i:s');

                $CompanyId = trim($_POST['companyid']);

                $ClientId = $_POST['ClientId'];





                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', @$ClientId)->first();





                DB::table('client')

                    ->where('id', $ClientId)

                    ->update(array('CompanyId' => $CompanyId));



                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;

//END QuickUpdate :: ClientProfile :: CompanyId





//QuickUpdate :: ClientProfile :: CompanyName

        case 'EditClientQuickcompanyname':

            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyName' => $_POST['companyname'], 'ClientId' => $_POST['ClientId']),

                array('CompanyName' => 'required', 'ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $time = date('Y-m-d G:i:s');

                $CompanyName = $_POST['companyname'];

                $ClientId = $_POST['ClientId'];





                $CompanyNameExplode = strpos($CompanyName, ' ');

                $FirstName = substr($CompanyName, 0, $CompanyNameExplode);

                $LastName = substr($CompanyName, $CompanyNameExplode + 1);



                DB::table('client')

                    ->where('id', $ClientId)

                    ->update(array('CompanyName' => $CompanyName, 'FirstName' => $FirstName, 'LastName' => $LastName));





                $AppStudio = DB::table('boostapplogin.studio')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();



                if (@$AppStudio->UserId != '') {



                    DB::table('boostapplogin.users')

                        ->where('id', $AppStudio->UserId)

                        ->update(array('display_name' => $CompanyName, 'FirstName' => $FirstName, 'LastName' => $LastName));



                }





                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;



        case 'EditClientQuickclasslevel':

            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $rankArray = $_POST['Rank'] ?? [];

                $ClientId = $_POST['ClientId'];
                if(empty($rankArray)) {
                    $res = (new Rank())->deleteClientRank($ClientId);
                } else {
                    (new Rank())->updateClientRank($ClientId, $rankArray);
                }

                json_message("reload");

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;









//END QuickUpdate :: ClientProfile :: CompanyName





//QuickUpdate :: ClientProfile :: Gender

        case 'EditClientQuickgender':

            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Gender' => $_POST['gender'], 'ClientId' => $_POST['ClientId']),

                array('Gender' => 'required', 'ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $time = date('Y-m-d G:i:s');

                $Gender = $_POST['gender'];

                $ClientId = $_POST['ClientId'];



                DB::table('client')

                    ->where('id', $ClientId)

                    ->update(array('Gender' => $Gender));



                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;

//END QuickUpdate :: ClientProfile :: Gender





//QuickUpdate :: ClientProfile :: Status

        case 'EditClientQuickstatus':

            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Status' => $_POST['status'], 'ClientId' => $_POST['ClientId']),

                array('Status' => 'required', 'ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $time = date('Y-m-d G:i:s');

                $Status = $_POST['status'];

                $ClientId = $_POST['ClientId'];

                $ArchiveDate = null;

                if ($Status == '1') {

                    $ArchiveDate = date('Y-m-d H:i:s');
                    $StatusFilter = 2;

                }
                else{
                    $ArchiveDate = date('Y-m-d H:i:s');
                    $StatusFilter = 1;
                }






                ///// בדיקת סטטוס קודם

                $CeckClient = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClientId)->first();

                $ContactMobile = $CeckClient->ContactMobile;

                if ($Status == '0') {

                    // israeli phone number regex
                    $mobileRegex = Client::mobileRegex;

                    if (!preg_match($mobileRegex, $ContactMobile) && $CeckClient->parentClientId == 0) {
                        json_message(lang('mobile_error_ajax'), false);
                        exit;
                    }
                    if(!empty($ContactMobile)) {

                        $mobile = substr($ContactMobile, 0, 4) == '+972' ? substr($ContactMobile, 4, strlen($ContactMobile)) : $ContactMobile;
                        $mobile = substr($mobile, 0, 1) == '0' ? substr($mobile, 1, strlen($mobile)) : $mobile;
                        // israeli phone number with country code
                        $ContactMobile = '+972'.$mobile;
                    }
                }


                if($CeckClient->Status == 2) {
                    $pipelineRow =  DB::table('boostapp.pipeline')
                        ->where('ClientId', '=', $ClientId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->update(array('StatusFilter' => $StatusFilter,'ConvertDate' => date('Y-m-d H:i:s')));

                    $Lead = DB::table('pipeline')->where('CompanyNum','=', $CompanyNum)->where('ClientId', '=', $ClientId)->first();
                    if($StatusFilter==1) {
                        $leadStatus = DB::table('boostapp.leadstatus')->where('PipeId', '=', $Lead->MainPipeId)
                            ->where('title', '=', lang('success'))->first();

                        DB::table('client')
                            ->where('id', $ClientId)
                            ->update(array('ConvertDate' => date('Y-m-d H:i:s')));
                    }
                    elseif ($StatusFilter==2){
                        $leadStatus = DB::table('boostapp.leadstatus')->where('PipeId', '=', $Lead->MainPipeId)
                            ->where('title', '=', lang('failure'))->first();
                    }
                    DB::table('boostapp.pipeline')

                        ->where('ClientId', '=', $ClientId)

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->update(array('PipeId' => $leadStatus->id));
                }


                DB::table('client')

                    ->where('id', $ClientId)

                    ->update(array('Status' => $Status, 'ArchiveDate' => $ArchiveDate, 'ContactMobile' => $ContactMobile));



                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ClientStatus' => $Status));



                DB::table('boostapplogin.studio')

                    ->where('ClientId', '=', $ClientId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->update(array('Status' => $Status));

                if ($Status == '1') {




                    /** @var ClassStudioAct[] $DeletesActClasses */
                    $DeletesActClasses = ClassStudioAct::where('CompanyNum', $CompanyNum)->where('FixClientId', '=', $ClientId)->where('ClassDate', '>', date('Y-m-d'))->get();

                    foreach ($DeletesActClasses as $DeletesActClass) {
                        $DeletesActClass->changeStatus('5');



                        ///// ספירת שיעורים



                        $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('GroupNumber', '=', $DeletesActClass->GroupNumber)->where('ClassType', '=', '1')->orderBy('ClassCount', 'DESC')->first();


                        if ($ClassInfo) {
                            $update = ClassStudioDate::updateClassRegistersCount($DeletesActClass->ClassId, $DeletesActClass->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                        }

//                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $DeletesActClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();
//
//                        $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $DeletesActClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();
//
//
//                        $ClientRegisterRegular = DB::table('classstudio_dateregular')
//                            ->where('CompanyNum', '=', $CompanyNum)
//                            ->where('GroupNumber', '=', $ClassInfo->GroupNumber)
//                            ->where('Floor', '=', $ClassInfo->Floor)
//                            ->where('StatusType', '=', '12')
//                            ->where(function ($q) use ($ClassInfo) {
//                                $q->where('RegularClassType', '=', 1)
//                                    ->Orwhere('RegularClassType', '=', 2)->where('EndDate', '>=', $ClassInfo->StartDate);
//                            })->count();
//
//                        $ClientRegisterRegularWating = DB::table('classstudio_dateregular')
//                            ->where('CompanyNum', '=', $CompanyNum)
//                            ->where('GroupNumber', '=', $ClassInfo->GroupNumber)
//                            ->where('Floor', '=', $ClassInfo->Floor)
//                            ->where('StatusType', '=', '9')
//                            ->where(function ($q) use ($ClassInfo) {
//                                $q->where('RegularClassType', '=', 1)
//                                    ->Orwhere('RegularClassType', '=', 2)->where('EndDate', '>=', $ClassInfo->StartDate);
//                            })->count();





//                        $ClientRegisterRegular2 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $ClassInfo->StartDate)->where('StatusType', '=', '12')
//
//                            ->count();
//
//                        $ClientRegisterRegularWating2 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $ClassInfo->StartDate)->where('StatusType', '=', '9')
//
//                            ->count();
//
//
//
//                        $ClientRegisterRegular = $ClientRegisterRegular1 + $ClientRegisterRegular2;
//
//                        $ClientRegisterRegularWating = $ClientRegisterRegularWating1 + $ClientRegisterRegularWating2;





//                        DB::table('classstudio_date')
//
//                            ->where('CompanyNum', '=', $CompanyNum)
//
//                            ->where('id', '=', $DeletesActClass->ClassId)
//
//                            ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList, 'ClientRegisterRegular' => $ClientRegisterRegular, 'ClientRegisterRegularWating' => $ClientRegisterRegularWating));



                    }





                    CreateLogMovement(//FontAwesome Icon

                        lang('log_archived_ajax'), //LogContent

                        $ClientId //ClientId

                    );





                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('Status', '0')

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Status' => '3', 'Reason' => lang('moved_to_archive')));



                    DB::table('classstudio_dateregular')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('ClientId', '=', $ClientId)

                        ->delete();

                }





                CreateLogMovement(//FontAwesome Icon

                    lang('log_client_status_ajax'), //LogContent

                    $ClientId //ClientId

                );





                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;

//END QuickUpdate :: ClientProfile :: Status





//QuickUpdate :: ClientProfile :: Dob

        case 'EditClientQuickdob':

            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Dob' => $_POST['dob'], 'ClientId' => $_POST['ClientId']),

                array('Dob' => 'required', 'ClientId' => 'required')

            );



            if ($validator->passes()) {

                $CurrentUser = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $time = date('Y-m-d G:i:s');

                $Dob = $_POST['dob'];

                $ClientId = $_POST['ClientId'];



                if (new DateTime() <= new DateTime($Dob)) {

                    $Dob = date('0000-00-00');

                }



                DB::table('client')

                    ->where('id', $ClientId)

                    ->update(array('Dob' => $Dob));



                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;

//END QuickUpdate :: ClientProfile :: Dob

        // UpdateLeadInfo - Add

        case 'UpdateLeadInfo':



            if (Auth::guest()) exit;





            $time = date('Y-m-d H:i:s');

            $UserId = Auth::user()->id;

            $CompanyNum = Auth::user()->CompanyNum;

            $ItemId = Auth::user()->ItemId;


            if(!isset($_POST['ClientId'])) {
                json_message(lang('clinet_not_found'), false);
                exit;
            }



            $ClientId = $_POST['ClientId'];

            $PipelineId = $_POST['PipelineId'];

            $FirstName = trim($_POST['FirstName']);

            $LastName = trim($_POST['LastName']);

            $ClassType = $_POST['ClassType'] ?? '';

            $PipeLine = @$_POST['PipeLine'];



            if ($ClassType == '' || $ClassType == 'BA999') {

                $ClassType = 'BA999';

                $ClassNames = lang('all_classes');

            }



            if ($ClassType != 'BA999') {

                //// סיום בדיקת שדות חובה

                $JsonMemberType = '';

                foreach ($ClassType as $value) {

                    $JsonMemberType .= $value . ",";

                }

                $JsonMemberType = substr($JsonMemberType, 0, -1);





                $z = '1';

                $myArray = explode(',', $JsonMemberType);

                $ClassNames = '';

                $SoftInfos = DB::table('class_type')->whereIn('id', $myArray)->where('CompanyNum', $CompanyNum)->get();

                $SoftCount = count($SoftInfos);



                foreach ($SoftInfos as $SoftInfo) {



                    $ClassNames .= $SoftInfo->Type;



                    if ($SoftCount == $z) {

                    } else {

                        $ClassNames .= ', ';

                    }



                    ++$z;

                }



                $ClassNames = $ClassNames;

            } else {

                $ClassNames = lang('all_classes');

                $JsonMemberType = 'BA999';

            }





            if ($FirstName == '') {

                $FirstName = lang('without');

            }



            if ($LastName == '') {

                $LastName = lang('store_name');

            }

            $CompanyName = $FirstName . ' ' . $LastName;
            $ClientInfo = DB::table('client')->where('id', $ClientId)->where('CompanyNum', $CompanyNum)->first();
            $isMinor = !empty($ClientInfo) && $ClientInfo->parentClientId != 0;

            $ContactMobile = $_POST['ContactMobile'];
            $mobile = substr($ContactMobile, 0, 4) == '+972' ? substr($ContactMobile, 4, strlen($ContactMobile)) : $ContactMobile;
            $mobile = substr($mobile, 0, 1) == '0' ? substr($mobile, 1, strlen($mobile)) : $mobile;

            $mobileRegex = "^[\+972|\+91|\+1|\+44]*0?".$mobile."$";
            $isMobileExist = DB::table('client')->where('id', '!=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->whereRaw("ContactMobile regexp '".$mobileRegex."'")->first();
            if (!empty($isMobileExist) && !empty($mobile) && !$isMinor) {

                json_message(lang('mobile_exists_ajax'), false);

                exit;

            }

            // israeli phone number with country code
            $ContactMobile = !empty($ContactMobile) ? '+972'.$mobile : '';

            $Email = trim($_POST['Email']);

            if ($ContactMobile == '' && @$Email == '' && !$isMinor) {

                json_message(lang('mobile_field_numbers_ajax'), false);

                exit;

            }





            if (@$Email != '') {

                $CheckEmail = DB::table('client')->where('CompanyNum', '=', $CompanyNum)->where('id', '!=', $ClientId)->where('Email', '=', $Email)->first();



                if (@$CheckEmail->id != '') {

                    json_message(lang('email_exists_ajax'), false);

                    exit;

                }



            }



            $Status = $_POST['Status'];



            $Brands = @$_POST['Brands'];



            $BrandsInfo = DB::table('brands')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Brands)->first();

            if (@$BrandsInfo->BrandName != '') {

                $BrandName = @$BrandsInfo->BrandName;

            } else {

                $BrandName = lang('primary_branch');

            }





            $Source = @$_POST['Source'];



            $SourceInfo = DB::table('leadsource')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Source)->first();

            if (@$SourceInfo->Title != '') {

                $SourceName = @$SourceInfo->Title;

            } else {

                $SourceName = lang('without');

            }



            $OldStatus = DB::table('pipeline')->where('id', $PipelineId)->where('CompanyNum', $CompanyNum)->first();


            $CheckActStatus = DB::table('leadstatus')->where('CompanyNum', $CompanyNum)->where('id', $Status)->first();

            $StstusFilter = @$CheckActStatus->Act;



            if ($StstusFilter == '') {

                $StstusFilter = '0';

            }





            if ($StstusFilter == '1') {

                $ConvertDate = date('Y-m-d H:i:s');



                $ClientStatus = '0';

            } else {

                $ConvertDate = null;

                $ClientStatus = $ClientInfo->Status;

            }



            $ConvertDates = date('Y-m-d H:i:s');

            //// עדכן פרטי לקוח



            DB::table('client')

                ->where('id', $ClientId)

                ->where('CompanyNum', $CompanyNum)

                ->update(array('CompanyName' => $CompanyName, 'FirstName' => $FirstName, 'LastName' => $LastName, 'ContactMobile' => $ContactMobile, 'Email' => $Email, 'Brands' => $Brands, 'BrandName' => $BrandName, 'ConvertDate' => $ConvertDate, 'Status' => $ClientStatus));



            /////  עדכן פרטי ליד



            DB::table('pipeline')

                ->where('id', $PipelineId)

                ->where('CompanyNum', $CompanyNum)

                ->update(array('MainPipeId' => $PipeLine, 'PipeId' => $Status, 'ClassInfo' => $JsonMemberType, 'ClassInfoNames' => $ClassNames, 'Brands' => $Brands, 'BrandsNames' => $BrandName, 'SourceId' => $Source, 'Source' => $SourceName, 'StatusFilter' => $StstusFilter, 'ConvertDate' => $ConvertDates));



            if ($Status != @$OldStatus->PipeId) {



                $LeadStatusAfterChange = DB::table('leadstatus')->where('CompanyNum', $CompanyNum)->where('id', $Status)->first();

                $NameStatusAfter = @$LeadStatusAfterChange->Title;



                $LeadPipeLineBeforeChange = DB::table('leadstatus')->where('CompanyNum', $CompanyNum)->where('id', $OldStatus->PipeId)->first();

                $NameStatusBefore = @$LeadPipeLineBeforeChange->Title;



                CreateLogMovement( //FontAwesome Icon

                    lang('moved_lead_ajax').' '.$ClientInfo->CompanyName.' '.lang('from_status_ajax').' '.@$NameStatusBefore.' '.lang('to_status_ajax').' '.@$NameStatusAfter, //LogContent

                    $ClientId //ClientId

                );





            }



            CreateLogMovement( //FontAwesome Icon

                lang('log_edit_lead_ajax') . $ClientInfo->CompanyName, //LogContent

                $ClientId //ClientId

            );

            json_message();

            break;



        // AddPipelineReasons - Add



        case 'AddPipelineReasons':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {

                $Title = $_POST['Title'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $Items = DB::table('pipereasons')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Title' => $Title));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditPipelineReasons - Edit



        case 'EditPipelineReasons':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Status = $_POST['Status'];

                $Title = $_POST['Title'];

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('pipereasons')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Title' => $Title, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // MemberShip - Add



        case 'AddMemberShip':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = trim($_POST['Type']);



                $ViewClassAct = $_POST['ViewClassAct'];

                $ViewClassDayNum = $_POST['ViewClassDayNum'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $Type = str_replace("\\","/",$Type);
                $Items = DB::table('membership_type')->insertGetId(

                    array('Type' => $Type, 'CompanyNum' => $CompanyNum, 'ClassMemberType' => 'BA999', 'ViewClassAct' => $ViewClassAct, 'ViewClassDayNum' => $ViewClassDayNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // MemberShip - Edit



        case 'EditMemberShip':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = trim($_POST['Type']);

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];



                $ViewClassAct = $_POST['ViewClassAct'];

                $ViewClassDayNum = $_POST['ViewClassDayNum'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;




                $Type = str_replace("\\","/",$Type);
                DB::table('membership_type')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Type' => $Type, 'Status' => $Status, 'ViewClassAct' => $ViewClassAct, 'ViewClassDayNum' => $ViewClassDayNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddActivity':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {





                $CompanyNum = Auth::user()->CompanyNum;

                $Vat = $SettingsInfo->Vat;

                $ClientId = $_POST['ClientId'];

                $Items = @$_POST['Items1'];

                $StartDates = @$_POST['ClassDate'];

                $Vaild_LastCalss = @$_POST['Vaild_LastCalss'];

                $ItemsDetailsId = $_POST['itemDetailsId'] ?? null;
                $ItemsDetailsObj = new ItemDetails($ItemsDetailsId);

                $ItemNamep = trim(@$_POST['ItemNamep']);

                $ItemPricep = trim(@$_POST['ItemPricep']);

                $ClassDateEnd = @$_POST['ClassDateEnd'];

                $FirstDate = '0';

                $FirstDateStatus = '0';

                $companyProductSettings = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum);



                $SalesId = @$_POST['Agents'];

                if ($SalesId == '') {

                    $SalesId = Auth::user()->id;

                }



                if (@$Items == '') {

                    json_message(lang('select_membership_ajax'), false);

                    exit;

                }



                if (@$StartDates == '') {

                    $Today = date('Y-m-d');

                    $StartDate = date('Y-m-d');

                } else {

                    $Today = $StartDates;

                    $StartDate = $StartDates;

                }





                ///// בדיקת תאריך הצטרפות



                $CountMembership = DB::table('client_activities')->where('ClientId', @$ClientId)->where('CompanyNum', @$CompanyNum)->whereIn('Department', array('1,2'))->where('Status', '!=', '2')->count();



                if ($CountMembership == '0') {



                    DB::table('client')

                        ->where('id', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('JoinDate' => $StartDate));





                }



                /// קליטת פרטי פעילות



                $ItemsInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Items)->first();





                $ItemText = $ItemsInfo->ItemName;

                if ($ItemNamep != '') {

                    $ItemText = $ItemNamep;

                }





                $ItemPrice = $ItemsInfo->ItemPrice;

                $ItemPriceVat = $ItemsInfo->ItemPriceVat;





                $Department = $ItemsInfo->Department; // חוק מנוי

                $MemberShip = $ItemsInfo->MemberShip; // סוג מנוי



                $Vaild = $ItemsInfo->Vaild; // חישוב תוקף

                $Vaild_Type = $ItemsInfo->Vaild_Type; // סוג חישוב

                $LimitClass = $ItemsInfo->LimitClass; // הגבלת שיעורים

                $NotificationDays = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->NotificationDays ?? 0; // התראה לפני סוף מנוי


                $BalanceClass = $ItemsInfo->BalanceClass; // כמות שיעורים

                $MinusCards = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->offsetMemberships ?? 1; // קיזוז מכרטיסיה קודמת

                $StartTime = $ItemsInfo->StartTime; // הגבלת הזמנת שיעורים

                $EndTime = $ItemsInfo->EndTime; // הגבלת הזמנת שיעורים

                $CancelLImit = $ItemsInfo->CancelLImit; // ביטול הגבלה

                $ClassSameDay = $ItemsInfo->ClassSameDay; // הזמנת שיעור באותו היום

                $FreezMemberShip = $ItemsInfo->FreezMemberShip; // ניתן להקפאה?

                $FreezMemberShipDays = $ItemsInfo->FreezMemberShipDays; // מספר ימים מקסימלי להקפאה

                $FreezMemberShipCount = $ItemsInfo->FreezMemberShipCount; // מספר פעמים שניתן להקפיא מנוי





                $LimitClassMorning = $ItemsInfo->LimitClassMorning;

                $LimitClassEvening = $ItemsInfo->LimitClassEvening;

                $LimitClassMonth = $ItemsInfo->LimitClassMonth;



                $TrueBalanceClass = $BalanceClass;

                $BalanceValueLog = NULL;





                $MemberShipRule = '';

                $MemberShipRule .= '{"data": [';

                $MemberShipRule .= '{"LimitClass": "' . $LimitClass . '", "NotificationDays": "' . $NotificationDays . '", "StartTime": "' . $StartTime . '", "EndTime": "' . $EndTime . '", "CancelLImit": "' . $CancelLImit . '", "ClassSameDay": "' . $ClassSameDay . '", "FreezMemberShip": "' . $FreezMemberShip . '", "FreezMemberShipDays": "' . $FreezMemberShipDays . '", "FreezMemberShipCount": "' . $FreezMemberShipCount . '", "LimitClassMorning": "' . $LimitClassMorning . '", "LimitClassEvening": "' . $LimitClassEvening . '", "LimitClassMonth": "' . $LimitClassMonth . '"}';

                $MemberShipRule .= ']}';





                // מנוי תקופתי

                if ($Department == '1') {



                    /// חישוב תוקף מהשיעור האחרון במידה וקיים

                    if ($Vaild_LastCalss == '2') {

                        /// חישוב תוקף מהמנוי האחרון במידה וקיים

                        if ($MembershipType == '0') {

                            $LastClass = DB::table('client_activities')

                                ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)->orderBy('id', 'DESC')->first();

                        } else {

                            $LastClass = DB::table('client_activities')

                                ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->orderBy('id', 'DESC')->first();

                        }



                        if (@$LastClass->TrueDate != '') {

                            $StartDate = $LastClass->TrueDate;

                        }



                    } elseif ($Vaild_LastCalss == '3') {

                        /// חישוב תוקף מהשיעור האחרון במידה וקיים

                        if ($MembershipType == '0') {

                            $LastClass = DB::table('classstudio_act')
                                ->where('CompanyNum', '=', $CompanyNum)
                                ->where('FixClientId', '=', $ClientId)
                                ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                ->where('MemberShip', '=', $MemberShip)
                                ->orderBy('ClassDate', 'DESC')
                                ->first();

                        } else {
                            $LastClass = DB::table('classstudio_act')
                                ->where('CompanyNum', '=', $CompanyNum)
                                ->where('FixClientId', '=', $ClientId)
                                ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                ->orderBy('ClassDate', 'DESC')
                                ->first();

                        }



                        if (@$LastClass->ClassDate != '') {

                            $StartDate = $LastClass->ClassDate;

                        }



                    } elseif ($Vaild_LastCalss == '5') {

                        $FirstDate = '1';

                        $FirstDateStatus = '1';

                    }



                    $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                    $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                    $time = strtotime($StartDate);

                    $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));





                    if ($Vaild_LastCalss == '5') {

                        $FirstDate = '1';

                        $FirstDateStatus = '1';

                    }





                } // כרטיסיה

                elseif ($Department == '2') {



                    $ClassDate = NULL;



                    /// חישוב תוקף

                    if ($Vaild != '0') {





                        /// חישוב תוקף מהשיעור האחרון במידה וקיים

                        if ($Vaild_LastCalss == '2') {

                            /// חישוב תוקף מהמנוי האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)->orderBy('id', 'DESC')->first();

                            } else {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->orderBy('id', 'DESC')->first();

                            }



                            if (@$LastClass->TrueDate != '') {

                                $StartDate = $LastClass->TrueDate;

                            }



                        } elseif ($Vaild_LastCalss == '3') {

                            /// חישוב תוקף מהשיעור האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->where('MemberShip', '=', $MemberShip)
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();

                            } else {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();

                            }



                            if (@$LastClass->ClassDate != '') {

                                $StartDate = $LastClass->ClassDate;

                            }



                        } elseif ($Vaild_LastCalss == '5') {

                            $FirstDate = '1';

                            $FirstDateStatus = '1';

                        }





                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($StartDate);

                        $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));



                        if ($Vaild_LastCalss == '5') {

                            $FirstDate = '1';

                            $StartDateChanged = false;

                            if ($MinusCards == 1) {
                                if ($MembershipType == '0') {
                                    $ClientMinusCard = DB::table('client_activities')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('ClientId', '=', $ClientId)
                                        ->where('MemberShip', '=', $MemberShip)
                                        ->where('Department', '=', 2)
                                        ->where('TrueBalanceValue', '<', 0)
                                        ->where('TrueBalanceValueStatus', '=', 0)
                                        ->orderBy('id', 'DESC')->first();
                                } else {
                                    $ClientMinusCard = DB::table('client_activities')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('ClientId', '=', $ClientId)
                                        ->where('Department', '=', 2)
                                        ->where('TrueBalanceValue', '<', 0)
                                        ->where('TrueBalanceValueStatus', '=', 0)
                                        ->orderBy('id', 'DESC')->first();
                                }
                            }

                            if(isset($ClientMinusCard) && $ClientMinusCard->TrueBalanceValue < 0 ) {

//                                $Limit = str_replace('-', '', $ClientMinusCard->TrueBalanceValue);
                                $Limit = abs((int)$ClientMinusCard->TrueBalanceValue);
                                $beginOfDay = date('Y-m-d', strtotime("today"));

                                if ($MembershipType == '0') {
                                    $LastClass = DB::table('classstudio_act')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('FixClientId', '=', $ClientId)
                                        ->whereIn('Status', array(1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23))
                                        ->where('MemberShip', '=', $MemberShip)
                                        ->orderBy('ClassDate', 'DESC')->limit($Limit)->get();
                                } else {
                                    $LastClass = DB::table('classstudio_act')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('FixClientId', '=', $ClientId)
                                        ->whereIn('Status', array(1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23))
                                        ->orderBy('ClassDate', 'DESC')->limit($Limit)->get();
                                }

                                $ReverseClass = array_reverse($LastClass);
                                foreach ($ReverseClass as $Class) {
                                    if ($Class->ClassDate < $beginOfDay) {
                                        $StartDate = $Class->ClassDate;
                                        $StartDateChanged = true;
                                        break;
                                    }
                                }
                            }

                            if($StartDateChanged) { // if found class was before today, StartDate changed and need to update other arguments
                                $time = strtotime($StartDate);
                                $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));
                                $FirstDateStatus = '0';
                            } else {
                                $FirstDateStatus = '1';
                            }

                        }





                    }



                } // התנסות

                elseif ($Department == '3') {

                    $checkTryLimit = ClientActivities::where('CompanyNum', $CompanyNum)
                        ->where('Department', 3)
                        ->where('Status', '!=', 2)
                        ->where(function ($q) use ($ClientId) {
                            return $q->where('ClientId', $ClientId)
                                ->orWhere('TrueClientId', 'LIKE', '%'.$ClientId.'%');
                        })->sum('TrueBalanceValue');

                    if (!empty($checkTryLimit) && $checkTryLimit + $BalanceClass > 5) {
                        json_message(lang('trial_activity_limit_error'), false);
                        exit;
                    }

                    $ClassDate = NULL;



                    /// חישוב תוקף

                    if ($Vaild != '0') {





                        /// חישוב תוקף מהשיעור האחרון במידה וקיים

                        if ($Vaild_LastCalss == '2') {

                            /// חישוב תוקף מהמנוי האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)->orderBy('id', 'DESC')->first();

                            } else {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->orderBy('id', 'DESC')->first();

                            }



                            if (@$LastClass->TrueDate != '') {

                                $StartDate = $LastClass->TrueDate;

                            }



                        } else if ($Vaild_LastCalss == '3') {

                            /// חישוב תוקף מהשיעור האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->where('MemberShip', '=', $MemberShip)
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();

                            } else {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();
                            }



                            if (@$LastClass->ClassDate != '') {

                                $StartDate = $LastClass->ClassDate;

                            }



                        } else if ($Vaild_LastCalss == '5') {


                            $FirstDate = '1';

                            $FirstDateStatus = '1';

                        }





                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($StartDate);

                        $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));



                        if ($Vaild_LastCalss == '5') {

                            $FirstDate = '1';

                            $FirstDateStatus = '1';

                        }





                    }





                    $MemberShipRule = NULL;

                    $LimitClass = '999';





                } // פריט כללי

                elseif ($Department == '4') {

                    $ClassDate = NULL;

                    $MemberShipRule = NULL;

                    $LimitClass = '0';

                    $BalanceClass = '0';

                }



                // מספור מספר המנויים שהלקוח רכש

                $CardNum = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->count();

                $CardNumber = $CardNum + 1;



                if (($ClassDateEnd != '' && $Department == '1') || ($ClassDateEnd != '' && $Department == '2')) {

                    $ClassDate = $ClassDateEnd;

                }

                /// הכנסת נתונים ועדכון טבלאות



                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d H:i:s');





                $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                $ItemsTime = '-' . $NotificationDays . ' ' . $Vaild_TypeOptions;



                $time = strtotime($ClassDate);

                $NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                if ($NotificationDays == '0' || $NotificationDays == '' || $Department == '4' || $Department == '3' || $Vaild_LastCalss == '5') {

                    $NotificationDate = NULL;

                }





                if ($ItemPricep != '') {



                    $ItemPrice = $ItemPricep;

                    $CompanyVat = $SettingsInfo->CompanyVat;



                    $Vat = $_POST['Vat'] ?? 0;



                    if ($CompanyVat == '0') {



                        if ($Vat == 0) {



                            $Vat = $SettingsInfo->Vat;

                            $Vats = '1.' . $Vat;




                            $TotalVatItemPrice = $ItemPrice / $Vats;


                            $TotalVatItemPrice = round($ItemPrice - $TotalVatItemPrice, 2);



                            $ItemPriceVat = round($ItemPrice - $TotalVatItemPrice, 2);



                        } else {

                            $ItemPriceVat = $ItemPrice;

                            $Vat = $SettingsInfo->Vat;

//                            $Vat = $Vat;

                            $TotalVatItemPrice = $ItemPrice * $Vat / 100;

                            $TotalVatItemPrice = round($TotalVatItemPrice, 2);

                            $ItemPrice = $ItemPrice + $TotalVatItemPrice;



                        }





                    } else {

                        $ItemPriceVat = $ItemPrice;

                    }





                }



                $VatAmount = $ItemPrice - $ItemPriceVat;

                $AddClientActivity = DB::table('client_activities')->insertGetId(array(
                    'CompanyNum' => $CompanyNum,
                    'CardNumber' => $CardNumber,
                    'ClientId' => $ClientId,
                    'Department' => $Department,
                    'MemberShip' => $MemberShip,
                    'ItemId' => $Items,
                    'ItemText' => $ItemText,
                    'ItemPrice' => $ItemPrice,
                    'ItemPriceVat' => $ItemPriceVat,
                    'ItemPriceVatDiscount' => $ItemPriceVat,
                    'Vat' => $Vat,
                    'VatAmount' => $VatAmount,
                    'StartDate' => $StartDate,
                    'VaildDate' => $ClassDate,
                    'TrueDate' => $ClassDate,
                    'BalanceValue' => $BalanceClass,
                    'TrueBalanceValue' => $BalanceClass,
                    'ActBalanceValue' => $BalanceClass,
                    'LimitClass' => $LimitClass,
                    'Dates' => $Dates,
                    'UserId' => $UserId,
                    'BalanceMoney' => $ItemPrice,
                    'MemberShipRule' => $MemberShipRule,
                    'NotificationDays' => $NotificationDate,
                    'BalanceValueLog' => $BalanceValueLog,
                    'FirstDate' => $FirstDate,
                    'FirstDateStatus' => $FirstDateStatus,
                    'SalesId' => $SalesId,
                    'ItemDetailsId' => $ItemsDetailsObj->useItemDetails()
                ));



                ///// מעבר ניקובים+שיעורים ממנוי ישן לחדש
                $MembershipType = $AppSettings->MembershipType ?? 1;
                $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', $Items)->first();
                $TrueClasessFinal = $CheckItemsRoleTwo->GroupId ?? '';

                $data = [
                    "CompanyNum" => $CompanyNum,
                    "ClientId" => $ClientId,
                    "ActivityId" => $AddClientActivity,
                    "MemberShip" => $MemberShip,
                    "MembershipType" => $MembershipType,
                    "MinusCards" => $MinusCards,
                    "Department" => $Department,
                    "TrueClasessFinal" => $TrueClasessFinal,
                    "BalanceClass" => $BalanceClass,
                    "StartDate" => $StartDate
                ];
                (new ClientActivities())->moveClassesToNewActivity($data);


                if (!empty(@$_POST['Fees'])) {



                    $Fees = DB::table('registration_fees')->where('CompanyNum', '=', $CompanyNum)->where('Type', '=', '1')->first();

                    $GeneralItemId = $SettingsInfo->GeneralItemId;

                    $CardNumber = $CardNumber + 1;

                    $Vaild = $Fees->Vaild;

                    $Fees_StartDate = $StartDate;

                    if ($Vaild != '0') {



                        $Vaild_Type = $Fees->Vaild_Type;



                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($Fees_StartDate);

                        $Fees_ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));



                        $Fees_NotificationDays = $Fees->NotificationDays;

                        $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                        $ItemsTime = '-' . $Fees_NotificationDays . ' ' . $Vaild_TypeOptions;

                        $time = strtotime($Fees_ClassDate);

                        $Fees_NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                    } else {

                        $Fees_ClassDate = null;

                        $Fees_NotificationDate = null;

                    }



                    $AddClientFees = DB::table('client_activities')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'CardNumber' => $CardNumber, 'ClientId' => $ClientId, 'Department' => '4', 'MemberShip' => 'BA999', 'ItemId' => $GeneralItemId, 'ItemText' => $Fees->ItemName, 'ItemPrice' => $Fees->ItemPrice, 'ItemPriceVat' => $Fees->ItemPriceVat, 'ItemPriceVatDiscount' => $Fees->ItemPriceVat, 'Vat' => $Vat, 'VatAmount' => $Fees->VatAmount, 'StartDate' => $Fees_StartDate, 'VaildDate' => $Fees_ClassDate, 'TrueDate' => $Fees_ClassDate, 'BalanceValue' => '0', 'TrueBalanceValue' => '0', 'ActBalanceValue' => '0', 'LimitClass' => '0', 'Dates' => $Dates, 'UserId' => $UserId, 'BalanceMoney' => $Fees->ItemPrice, 'MemberShipRule' => null, 'NotificationDays' => $Fees_NotificationDate, 'BalanceValueLog' => null, 'FirstDate' => '0', 'FirstDateStatus' => '0', 'SalesId' => $SalesId, 'RegistrationFees' => '1'));



                }



                if (!empty(@$_POST['Insurance'])) {



                    $Insurance = DB::table('registration_fees')->where('CompanyNum', '=', $CompanyNum)->where('Type', '=', '2')->first();

                    $GeneralItemId = $SettingsInfo->GeneralItemId;

                    $CardNumber = $CardNumber + 1;

                    $Vaild = $Insurance->Vaild;

                    $Fees_StartDate = $StartDate;

                    if ($Vaild != '0') {



                        $Vaild_Type = $Insurance->Vaild_Type;



                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($Fees_StartDate);

                        $Fees_ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));



                        $Fees_NotificationDays = $Insurance->NotificationDays;

                        $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                        $ItemsTime = '-' . $Fees_NotificationDays . ' ' . $Vaild_TypeOptions;

                        $time = strtotime($Fees_ClassDate);

                        $Fees_NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                    } else {

                        $Fees_ClassDate = null;

                        $Fees_NotificationDate = null;

                    }



                    $AddClientFees = DB::table('client_activities')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'CardNumber' => $CardNumber, 'ClientId' => $ClientId, 'Department' => '4', 'MemberShip' => 'BA999', 'ItemId' => $GeneralItemId, 'ItemText' => $Insurance->ItemName, 'ItemPrice' => $Insurance->ItemPrice, 'ItemPriceVat' => $Insurance->ItemPriceVat, 'ItemPriceVatDiscount' => $Insurance->ItemPriceVat, 'Vat' => $Vat, 'VatAmount' => $Insurance->VatAmount, 'StartDate' => $Fees_StartDate, 'VaildDate' => $Fees_ClassDate, 'TrueDate' => $Fees_ClassDate, 'BalanceValue' => '0', 'TrueBalanceValue' => '0', 'ActBalanceValue' => '0', 'LimitClass' => '0', 'Dates' => $Dates, 'UserId' => $UserId, 'BalanceMoney' => $Insurance->ItemPrice, 'MemberShipRule' => null, 'NotificationDays' => $Fees_NotificationDate, 'BalanceValueLog' => null, 'FirstDate' => '0', 'FirstDateStatus' => '0', 'SalesId' => $SalesId, 'RegistrationFees' => '2'));



                }





                //// עדכון חוב ללקוח



                $MemberShipText = '';

                $MemberShipText .= '{"data": [';

                $Taski = '1';

                $GetTasks = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->orderBy('CardNumber', 'ASC')->get();

                $TaskCount = count($GetTasks);

                foreach ($GetTasks as $GetTask) {

                    if ($Taski < $TaskCount) {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                    } else {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                    }

                    ++$Taski;

                }

                $MemberShipText .= ']}';

                $family_membership_transferees = ClientActivities::transferFamilyMembership($ClientId, $CompanyNum, $companyProductSettings->familyMembershipTransfer, $MemberShip);

                if (!empty($family_membership_transferees)) {
                    ClientActivities::where('id', $AddClientActivity)->update(['TrueClientId' => implode(',', $family_membership_transferees)]);
                }



                //// בדיקת כרטיסית אב



                $CheckCleintPayment = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                $BalanceAmount = '0.00';





                if (@$CheckCleintPayment->PayClientId != '0') {

                    $PayClientId = $CheckCleintPayment->PayClientId;



                    $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $PayClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                    DB::table('client')

                        ->where('id', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('BalanceAmount' => '0.00'));



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('PayClientId' => $PayClientId));



                } else {

                    $PayClientId = $ClientId;



                    $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $ClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('PayClientId' => '0'));



                }



                $CheckClientInfoer = DB::table('client')->where('CompanyNum', $CompanyNum)->where('PayClientId', $PayClientId)->get();

                if (!empty($CheckClientInfoer)) {

                    foreach ($CheckClientInfoer as $CheckClientInfo) {

                        if (@$CheckClientInfo->id != '') {

                            $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $CheckClientInfo->id)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');

                        }

                    }

                }





                DB::table('client')

                    ->where('id', $PayClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('BalanceAmount' => $BalanceAmount, 'MemberShipText' => $MemberShipText));





                //// סגירת מנוי קודם

                if($Department != 2 || (($Department == 2 && $BalanceClass > 1)))
                {
                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '1')

                        ->where('Status', '=', '0')
                        ->where('Freez', '!=', '1')
                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));





                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '2')

                        ->where('Status', '=', '0')
                        ->where('Freez', '!=', '1')
                        ->where('TrueBalanceValue', '<=', '0')

                        ->update(array('Status' => '3'));



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '2')

                        ->where('Status', '=', '0')
                        ->where('Freez', '!=', '1')
                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));

                }



                ///// סגירת מנוי היכרות/התנסות


                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('Department', '=', '3')

                    ->where('Status', '=', '0')
                    ->where('Freez', '!=', '1')
                    ->where('TrueBalanceValue', '<=', '0')

                    ->update(array('Status' => '3'));



                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('Department', '=', '3')

                    ->where('Status', '=', '0')
                    ->where('Freez', '!=', '1')
                    ->where('TrueDate', '<=', date('Y-m-d'))

                    ->update(array('Status' => '3'));





                if (($Department == 1 || ($Department == 2 && $BalanceClass > 1))) {



                    $GetClasess = DB::table('classstudio_act')
                        ->where('CompanyNum', $CompanyNum)
                        ->where('ClassDate', '>=', $StartDate)
                        ->whereIn('Status', array(12, 9));

                    if (!empty($family_membership_transferees)) {

                        $family_membership_transferees[] = $ClientId;

                        $GetClasess = $GetClasess->whereIn('FixClientId', $family_membership_transferees);
                    } else {
                        $GetClasess = $GetClasess->where('FixClientId', $ClientId);
                    }

                    $GetClasess = $GetClasess->get();



                    foreach ($GetClasess as $GetClases) {





                        $TrueClasess = '';

                        $TrueClasessFinal = '';

                        $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClases->ClassId)->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->first();
                        if($ClassInfo) {
                            $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $Items, $ClassInfo->ClassNameType);
                            if ($CheckItemsRole) {
                                $GroupId = $CheckItemsRole->GroupId;
                                $TrueClasessFinal = $CheckItemsRole->GroupId;
                                $TrueClasess = $CheckItemsRole->Class;
                            }
                        }

                        if ($TrueClasessFinal != '') {



                            if ($GetClases->FixClientId == $ClientId) {

                                DB::table('classstudio_act')
                                    ->where('id', $GetClases->id)
                                    ->where('CompanyNum', $CompanyNum)
                                    ->update(array(
                                        'ClientId' => $ClientId,
                                        'TrueClientId' => '0',
                                        'ClientActivitiesId' => $AddClientActivity,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip));

                            } else {

                                DB::table('classstudio_act')
                                    ->where('id', $GetClases->id)
                                    ->where('CompanyNum', $CompanyNum)
                                    ->update(array('ClientId' => $ClientId,
                                        'TrueClientId' => $GetClases->FixClientId,
                                        'ClientActivitiesId' => $AddClientActivity,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip));

                            }





                            DB::table('classstudio_dateregular')

                                ->where('id', $GetClases->RegularClassId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('ClientActivitiesId' => $AddClientActivity, 'MemberShipType' => $MemberShip));





                        }



                    }





                }





                /// עדכון ספירה לסוג המנוי

                if ($Department == '1' || $Department == '2' || $Department == '3') {





                    if ($Department == '1') {



                        $GetActivityCount = DB::table('client_activities')->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('MemberShip', '=', $MemberShip)->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                    } else if ($Department == '2') {



                        $GetActivityCount = DB::table('client_activities')
                            ->where('ActBalanceValue', '>=', '1')
                            ->where('StartDate', '<=', date('Y-m-d'))
                            ->whereNull('TrueDate')
                            ->where('Department', '=', '2')
                            ->where('MemberShip', '=', $MemberShip)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->where('Status', '=', '0')
                            ->Orwhere('ActBalanceValue', '>=', '1')
                            ->where('FirstDateStatus', '=', '0')
                            ->where('TrueDate', '>=', date('Y-m-d'))
                            ->where('StartDate', '<=', date('Y-m-d'))
                            ->where('Department', '=', '2')
                            ->where('MemberShip', '=', $MemberShip)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->where('Status', '=', '0')
                            ->where('FirstDateStatus', '=', '0')->count();



                    } else if ($Department == '3') {



                        $GetActivityCount = DB::table('client_activities')->where('CompanyNum', $CompanyNum)->where('StartDate', '<=', date('Y-m-d'))->where('Department', '3')->where('MemberShip', $MemberShip)->where('ActBalanceValue', '>=', '1')->where('Status', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                    }





                    DB::table('membership_type')

                        ->where('id', $MemberShip)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Count' => $GetActivityCount));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        case 'AddDiscountActivity':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId'], 'ActivityId' => $_POST['ActivityId']),

                array('ClientId' => 'Required', 'ActivityId' => 'Required')

            );



            if ($validator->passes()) {

                $Vat = $SettingsInfo->Vat;

                $CompanyVat = $SettingsInfo->CompanyVat;

                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $DiscountsItem = $_POST['Discounts'] ?? 0;

                $DiscountsItemDB = @$_POST['Discounts'];

                $DiscountsTypeItem = $_POST['DiscountsType'];




                if ($DiscountsItem == '') {

                    $DiscountsItem = '0';

                    $DiscountsTypeItem = '1';

                    $DiscountsItemDB = '0';

                }

                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('id', '=', $ActivityId)->first();
                $OldPrice = $ActivityInfo->BalanceMoney;



                if ($ActivityInfo->Department == '1' || $ActivityInfo->Department == '2' || $ActivityInfo->Department == '3') {

                    $ItemText = $ActivityInfo->ItemText;

                } else {

                    $ItemText = $_POST['ItemText'];

                }

                $ItemPrice = $_POST['ItemPrice'];


                if ($DiscountsTypeItem == '1' && $DiscountsItemDB > '100') {

                    $DiscountsItemDB = '100';

                    $DiscountsItem = '100';

                } else if ($DiscountsTypeItem == '2' && $DiscountsItemDB > $ItemPrice) {

                    $DiscountsItemDB = $ItemPrice;

                    $DiscountsItem = $ItemPrice;

                }

                $TotalVatItemPrice = '0.00';


                    $ItemPriceVat = $ItemPrice;


                $Total = $ItemPrice;


                if ($Vat == '0' || $DiscountsTypeItem == '1') {

                    $TotalVatDiscount = $DiscountsItem;

                } else {

                    if ($SettingsInfo->CompanyVat == '0') {



                        $Vats = 1;


                        $TotalVatDiscount = $DiscountsItem / $Vats;

                        $TotalVatDiscount = round($DiscountsItem - $TotalVatDiscount, 2);

                        $DiscountsItem = $DiscountsItem - $TotalVatDiscount;





                    }

                }



                if ($DiscountsTypeItem == '1') {



                    $NewDiscount = $Total * $DiscountsItem / 100;

                    $TotalNewPrice = round($Total - $NewDiscount, 2);

                    $Total = $TotalNewPrice;

                } else {



                    $TotalNewPrice = $Total - $DiscountsItem;

                    $NewDiscount = $DiscountsItem;

                    $Total = $TotalNewPrice;



                }

                $TotalVat = '0';

                $ItemTotal = round($Total + $TotalVat, 1);

                $ItemDiscountAmount = $NewDiscount;



                $ItemPriceVat = round($ItemPrice, 2);

                $ItemPrice = round($ItemPrice + $TotalVatItemPrice, 2);



                /// בדיקת עיגול אגורות



                $CheckAgura = $ItemTotal - $Total;



                if ($TotalVat != $CheckAgura) {



                    $MinusAgura = $TotalVat - $CheckAgura;

                    $TotalVat = $TotalVat - $MinusAgura;



                }



                $BalanceMoney = $Total + $TotalVat;


                $CancelStatus = '0';



                $update_data = [
                    'ItemText' => $ItemText,
                    'ItemPrice' => $ItemPrice,
                    'ItemPriceVat' => $ItemPriceVat,
                    'ItemPriceVatDiscount' => $Total,
                    'Vat' => $Vat,
                    'VatAmount' => $TotalVat,
                    'DiscountType' => $DiscountsTypeItem,
                    'Discount' => $DiscountsItemDB,
                    'DiscountAmount' => $ItemDiscountAmount,
                    'BalanceMoney' => $BalanceMoney,
                    'CancelStatus' => $CancelStatus
                ];

                if (!empty($_POST['Status'])){
                    $update_data['Status'] = $_POST['Status'];
                }

                DB::table('client_activities')
                    ->where('id', $ActivityId)
                    ->update($update_data);

                $CheckCleintPayment = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();
                $BalanceAmount = '0.00';





                if (@$CheckCleintPayment->PayClientId != '0') {

                    $PayClientId = $CheckCleintPayment->PayClientId;



                    $BalanceAmount = DB::table('client_activities')->where('ClientId', '=', $PayClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                } else {

                    $PayClientId = $ClientId;

                }





                $CheckClientInfoer = DB::table('client')->where('CompanyNum', $CompanyNum)->where('PayClientId', $PayClientId)->get();

                if (!empty($CheckClientInfoer)) {

                    foreach ($CheckClientInfoer as $CheckClientInfo) {

                            $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $CheckClientInfo->id)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');

                    }

                } else {

                    $BalanceAmount = DB::table('client_activities')->where('ClientId', '=', $ClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');

                }

                DB::table('client')
                    ->where('id', $PayClientId)
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('BalanceAmount' => $BalanceAmount));

                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }
            break;

        case 'AddFreez':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClassDate' => $_POST['ClassDate'], 'ClassDateEnd' => $_POST['ClassDateEnd'], 'Reason' => $_POST['Reason']),
                array('ClassDate' => 'Required', 'ClassDateEnd' => 'Required', 'Reason' => 'Required')
            );

            if ($validator->passes()) {
                $dataArray = [
                    'CompanyNum' => $CompanyNum,
                    'ClassDate' => $_POST['ClassDate'],
                    'ClassDateEnd' => $_POST['ClassDateEnd'],
                    'ClientId' => $_POST['ClientId'],
                    'ActivityId' => $_POST['ActivityId'],
                    'Reason' => $_POST['Reason'],
                ];
                ClientActivities::freezeMembership($dataArray);

                json_message();
            } else {

                json_message($validator->errors()->toArray(), false);
            }
            break;

        case 'FreezAllClients':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClassDate' => $_POST['ClassDate'], 'ClassDateEnd' => $_POST['ClassDateEnd'], 'Reason' => $_POST['Reason']),
                array('ClassDate' => 'Required', 'ClassDateEnd' => 'Required', 'Reason' => 'Required')
            );

            if ($validator->passes()) {
                $ClassDate = $_POST['ClassDate'];
                $ClassDateEnd = $_POST['ClassDateEnd'];

                if (strtotime($ClassDate) > strtotime($ClassDateEnd)) {
                    json_message(lang('freeze_date_start_high_ajax'), false);
                    exit();
                }

                if (empty($_POST['membership_type'])) {
                    json_message(lang('select_membership_freeze_ajax'), false);
                    exit();
                }

                $Reason = htmlentities($_POST['Reason']);
                $membership_types = $_POST['membership_type'];

                $UserId = Auth::user()->id;

                $clients = DB::table('client')->where('CompanyNum', $CompanyNum)->where('Status', '=', '0')->get();
                $count = 0;
                foreach ($clients as $client) {
                    $activities = DB::table('client_activities')
                        ->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $client->id)->where('Freez', '!=', '1')->where('Status', '=', '0')->whereIn('MemberShip', $membership_types)->where('MemberShip', '!=', 'BA999')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')
                        ->Orwhere('StartDate', '<=', date('Y-m-d'))->whereNull('TrueDate')->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $client->id)->where('Freez', '!=', '1')->where('Status', '=', '0')->whereIn('MemberShip', $membership_types)->where('MemberShip', '!=', 'BA999')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')
                        ->Orwhere('StartDate', '<=', date('Y-m-d'))->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $client->id)->where('Freez', '!=', '1')->where('Status', '=', '0')->whereIn('MemberShip', $membership_types)->where('MemberShip', '!=', 'BA999')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')
                        ->get();

                    foreach ($activities as $activity) {
                        $dataArray = [
                            'CompanyNum' => $CompanyNum,
                            'ClassDate' => $_POST['ClassDate'],
                            'ClassDateEnd' => $_POST['ClassDateEnd'],
                            'ClientId' => $client->id,
                            'ActivityId' => $activity->id,
                            'Reason' => $_POST['Reason'],
                        ];
                        ClientActivities::freezeMembership($dataArray);
                        $count++;
                    }
                }

                if ($count > 0) {
                    $freezArr = array(
                        "CompanyNum" => $CompanyNum,
                        "start_freez" => $ClassDate,
                        "end_freez" => $ClassDateEnd,
                        "activities_count" => $count,
                        "memberships" => json_encode($membership_types),
                        "status" => 1,
                        "reason" => $Reason,
                        "update_date" => date('Y-m-d H:i:s')
                    );
                    $freez_id = DB::table('freez_activities')->insertGetId($freezArr);

                    $logContent = lang('freeze_done_ajax') . ' ' . $count . ' ' . lang('memberships_single') . '<br>';
                    $logContent .= lang('from_date') . ' ' . $ClassDate . ' ' . lang('up_to_date_ajax') . ' ' . $ClassDateEnd . '.<br>' . lang('reason') . ':' . $Reason;
                    $logId = DB::table('log')->insertGetId(array('UserId' => $UserId, 'Text' => $logContent, 'Dates' => date('Y-m-d H:i:s'), 'CompanyNum' => $CompanyNum));
                }
                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        case 'AddDateCalss':
            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassDate' => $_POST['ClassDate'], 'Reason' => $_POST['Reason']),

                array('ClassDate' => 'Required', 'Reason' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;

                $ClassDate = $_POST['ClassDate'];

                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $Reason = htmlentities($_POST['Reason']);



                $time = date('Y-m-d G:i:s');





                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('id', '=', $ActivityId)->first();

                $UserId = Auth::user()->id;

                $StudioVaildDateLog = '';

                $StudioVaildDateLog .= '{"data": [';





                if ($ActivityInfo->StudioVaildDateLog != '') {

                    $Loops = json_decode($ActivityInfo->StudioVaildDateLog, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $StudioVaildDateDB = $val['StudioVaildDate'];

                        $TrueDateDB = $val['TrueDate'];

                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];

                        $ReasonDB = $val['Reason'];



                        $StudioVaildDateLog .= '{"StudioVaildDate": "' . $StudioVaildDateDB . '", "TrueDate": "' . $TrueDateDB . '", "Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Reason":"' . $ReasonDB . '"},';



                    }

                }



                $StudioVaildDateLog .= '{"StudioVaildDate": "' . $ClassDate . '", "TrueDate": "' . $ClassDate . '", "Dates": "' . $time . '", "UserId": "' . $UserId . '", "Reason":"' . $Reason . '"}';



                $StudioVaildDateLog .= ']}';





                $ItemsInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();



                $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                $NotificationDays = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->NotificationDays ?? 0;


                $ItemsTime = '-' . $NotificationDays . ' ' . $Vaild_TypeOptions;



                $time = strtotime($ClassDate);

                $NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                if ($ActivityInfo->FirstDateStatus == '1') {

                    $StartDate = date("Y-m-d", strtotime($ActivityInfo->Dates));

                    $VaildDate = $ClassDate;

                } else {

                    $StartDate = $ActivityInfo->StartDate;

                    $VaildDate = $ActivityInfo->VaildDate;

                }



                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('id', $ActivityId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('StudioVaildDate' => $ClassDate, 'TrueDate' => $ClassDate, 'StudioVaildDateLog' => $StudioVaildDateLog, 'NotificationDays' => $NotificationDate, 'FirstDateStatus' => '0', 'StartDate' => $StartDate, 'VaildDate' => $VaildDate));





                /////// עדכון כרטיס לקוח



                $MemberShipText = '';

                $MemberShipText .= '{"data": [';

                $Taski = '1';

                $GetTasks = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->orderBy('CardNumber', 'ASC')->get();

                $TaskCount = count($GetTasks);



                foreach ($GetTasks as $GetTask) {



                    if ($Taski < $TaskCount) {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                    } else {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                    }





                    ++$Taski;

                }

                $MemberShipText .= ']}';



                DB::table('client')

                    ->where('id', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('MemberShipText' => $MemberShipText));



                $MemberShip = $ActivityInfo->MemberShip;



                $MemberShipCounts = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->whereNull('TrueDate')->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '3')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->get();



                $MemberShipCount = count($MemberShipCounts);



                DB::table('membership_type')

                    ->where('id', $MemberShip)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Count' => $MemberShipCount));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddStartDateCalss':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassDate' => $_POST['ClassDate'], 'Reason' => $_POST['Reason']),

                array('ClassDate' => 'Required', 'Reason' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;

                $ClassDate = $_POST['ClassDate'];

                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $Reason = htmlentities($_POST['Reason']);



                $time = date('Y-m-d G:i:s');





                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('id', '=', $ActivityId)->first();

                $UserId = Auth::user()->id;

                $StudioVaildDateLog = '';

                $StudioVaildDateLog .= '{"data": [';



                $StudioStartDate = $ActivityInfo->StartDate;



                if ($ActivityInfo->StudioStartDateLog != '') {

                    $Loops = json_decode($ActivityInfo->StudioStartDateLog, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $StudioVaildDateDB = $val['StudioVaildDate'];

                        $TrueDateDB = $val['TrueDate'];

                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];

                        $ReasonDB = $val['Reason'];

                        $StudioStartDateDB = $val['StudioStartDate'];



                        $StudioVaildDateLog .= '{"StudioVaildDate": "' . $StudioVaildDateDB . '", "TrueDate": "' . $TrueDateDB . '", "Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Reason":"' . $ReasonDB . '", "StudioStartDate":"' . $StudioStartDateDB . '"},';



                    }

                }



                $StudioVaildDateLog .= '{"StudioVaildDate": "' . $ClassDate . '", "TrueDate": "' . $ClassDate . '", "Dates": "' . $time . '", "UserId": "' . $UserId . '", "Reason":"' . $Reason . '", "StudioStartDate":"' . $StudioStartDate . '"}';



                $StudioVaildDateLog .= ']}';





                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('id', $ActivityId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('StartDate' => $ClassDate, 'StudioStartDateLog' => $StudioVaildDateLog));



                ///// בדיקת תאריך הצטרפות



                $CountMembership = DB::table('client_activities')->where('ClientId', @$ClientId)->where('CompanyNum', @$CompanyNum)->where('Department', '!=', '3')->where('Department', '!=', '4')->where('Status', '!=', '2')->orderBy('CardNumber', 'ASC')->orderBy('id', 'ASC')->first();



                if (@$CountMembership->id != '') {



                    DB::table('client')

                        ->where('id', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('JoinDate' => $CountMembership->StartDate));





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddCalss':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassNumber' => $_POST['ClassNumber'], 'Reason' => $_POST['Reason']),

                array('ClassNumber' => 'Required', 'Reason' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;



                $Act = $_POST['Act'];

                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $Reason = htmlentities($_POST['Reason']);



                $time = date('Y-m-d G:i:s');

                $Dates = date('Y-m-d');



                if ($Act == '0') {

                    $ClassNumber = $_POST['ClassNumber'];

                } else {

                    $ClassNumber = '-' . $_POST['ClassNumber'];

                }





                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('id', '=', $ActivityId)->first();

                $UserId = Auth::user()->id;





                $AddClassStudio = DB::table('classstudio')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'ClassNumber' => $ClassNumber, 'Dates' => $time, 'UserId' => $UserId, 'ActivityId' => $ActivityInfo->id));





                $BalanceValue = $ActivityInfo->TrueBalanceValue + $ClassNumber;

                $ActBalanceValue = $ActivityInfo->ActBalanceValue + $ClassNumber;



                $BalanceValueLog = '';

                $BalanceValueLog .= '{"data": [';





                if ($ActivityInfo->BalanceValueLog != '') {

                    $Loops = json_decode($ActivityInfo->BalanceValueLog, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $ClassNumberDB = $val['ClassNumber'];

                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];

                        $ReasonDB = $val['Reason'];



                        $BalanceValueLog .= '{"ClassNumber": "' . $ClassNumberDB . '", "Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Reason":"' . $ReasonDB . '"},';



                    }

                }



                $BalanceValueLog .= '{"ClassNumber": "' . $ClassNumber . '", "Dates": "' . $time . '", "UserId": "' . $UserId . '", "Reason":"' . $Reason . '"}';



                $BalanceValueLog .= ']}';





                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('id', $ActivityId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('TrueBalanceValue' => $BalanceValue, 'BalanceValueLog' => $BalanceValueLog, 'ActBalanceValue' => $ActBalanceValue));





                /////// עדכון כרטיס לקוח



                $MemberShipText = '';

                $MemberShipText .= '{"data": [';

                $Taski = '1';

                $GetTasks = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->orderBy('CardNumber', 'ASC')->get();

                $TaskCount = count($GetTasks);



                foreach ($GetTasks as $GetTask) {



                    if ($Taski < $TaskCount) {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                    } else {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                    }





                    ++$Taski;

                }

                $MemberShipText .= ']}';



                DB::table('client')

                    ->where('id', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('MemberShipText' => $MemberShipText));



                $MemberShip = $ActivityInfo->MemberShip;



                $MemberShipCounts = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->whereNull('TrueDate')->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->Orwhere('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '3')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('MemberShip', '=', $MemberShip)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                    ->get();



                $MemberShipCount = count($MemberShipCounts);



                DB::table('membership_type')

                    ->where('id', $MemberShip)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Count' => $MemberShipCount));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'CancelNewActivity':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId'], 'ActivityId' => $_POST['ActivityId'], 'Reason' => $_POST['Reason']),
                array('ClientId' => 'Required', 'ActivityId' => 'Required', 'Reason' => 'Required')
            );

            if ($validator->passes()) {
                $ClientId = $_POST['ClientId'];
                $ActivityId = $_POST['ActivityId'];
                $MinusMoney = $_POST['MinusMoney'];
                $Act = $_POST['Act'];
                $Reason = htmlentities($_POST['Reason']);

                require_once __DIR__ . '/office/services/ClientActivityService.php';

                ClientActivityService::cancelMembership($CompanyNum, $ClientId, $ActivityId, $MinusMoney, $Reason, $Act);

                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        case 'FreezOutAllActivities':

            if (Auth::guest()) exit;

            $activities = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('Freez', '=', '1')->get();

            $i = 0;
            foreach($activities as $activity) {

                $EndFreez = $activity->EndFreez;
                $StartFreez = $activity->StartFreez;

                if ($StartFreez > date('Y-m-d')) {
                    $FreezDays = 0;
                }
                else if ($EndFreez >= date('Y-m-d') && $StartFreez <= date('Y-m-d')){

                    $startTimeStamp = strtotime($StartFreez);
                    $endTimeStamp = strtotime(date('Y-m-d'));

                    $timeDiff = abs($endTimeStamp - $startTimeStamp);

                    $numberDays = $timeDiff/86400;


                    $FreezDays = (int)$numberDays;


                } else {

                    $FreezDays = $activity->FreezDays;
                }

                $TrueDate = $activity->TrueDate;

                $ItemsMin = '+' . $FreezDays . ' days';


                if(!empty($TrueDate)) {
                    $ClassTrueDate = date("Y-m-d", strtotime($ItemsMin, strtotime($TrueDate)));
                } else {
                    $ClassTrueDate = null;
                }


                $UserId = Auth::user()->id;

                $time = date('Y-m-d G:i:s');



                $FreezLog = '';

                $FreezLog .= '{"data": [';





                if (!empty($activity->FreezEndLog)) {

                    $Loops = json_decode($activity->FreezEndLog, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $FreezDaysDB = $val['FreezDays'];

                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];



                        $FreezLog .= '{"FreezDays": "' . $FreezDaysDB . '", "Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '"},';



                    }

                }



                $FreezLog .= '{"FreezDays": "' . $FreezDays . '", "Dates": "' . $time . '", "UserId": "' . $UserId . '"}';



                $FreezLog .= ']}';





                DB::table('client_activities')

                    ->where('ClientId', $activity->ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('id', $activity->id)

                    ->update(array('Freez' => '2', 'TrueDate' => $ClassTrueDate, 'StudioVaildDate' => $ClassTrueDate, 'FreezEndLog' => $FreezLog));



                DB::table('client')

                    ->where('CompanyNum', $CompanyNum)

                    ->where('id', $activity->ClientId)

                    ->update(array('FreezStatus' => '0'));





                $GetClientClasses = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->where('RegularClass', '=', '1')->where('ClientActivitiesId', '=', $activity->id)->where('ClientId', '=', $activity->ClientId)->where('Status', '19')->where('ClassDate', '>=', date('Y-m-d'))->get();



                foreach ($GetClientClasses as $GetClientClass) {



                    $Dates = date('Y-m-d G:i:s');

                    $UserId = Auth::user()->id;

                    $UserName = Auth::user()->display_name;



                    $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->first();



                    $ClassCounts = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();



                    $MaxClient = '0';



                    if ($GetClientClass->RegularClass == '1') {



                        $RegularDates = DB::table('classstudio_dateregular')->where('id', '=', $GetClientClass->RegularClassId)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $activity->ClientId)->first();



                        if (!empty($RegularDates->StatusType)) {

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularDates->StatusType)->first();

                        } else {

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', '12')->first();

                        }



                    } else {

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', '1')->first();

                    }





                    if ($ClassCounts >= @$ClassInfo->MaxClient) {

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', '9')->first();

                    }



                    $Status = $CheckNewStatus->id;

                    $StatusCount = $CheckNewStatus->StatusCount;



                    $StatusJson = '';

                    $StatusJson .= '{"data": [';



                    if ($GetClientClass->StatusJson != '') {

                        $Loops = json_decode($GetClientClass->StatusJson, true);

                        foreach ($Loops['data'] as $key => $val) {



                            $DatesDB = $val['Dates'];

                            $UserIdDB = $val['UserId'];

                            $StatusDB = $val['Status'];

                            $StatusTitleDB = $val['StatusTitle'];

                            $UserNameDB = $val['UserName'];



                            $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                        }

                    }



                    $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "19", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                    $StatusJson .= ']}';

                    (new ClassStudioAct($GetClientClass->id))->update([
                        'Status' => $Status,
                        'StatusJson' => $StatusJson,
                        'StatusCount' => $StatusCount,
                    ]);

                    //// עדכון שיעור ברשימת משתתפים



                    $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                    $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();





                    DB::table('classstudio_date')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $GetClientClass->ClassId)

                        ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList));



                    DB::table('classlog')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClassId' => $GetClientClass->ClassId, 'ClientId' => $activity->ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));



                }
                $i++;

            }
            if($i > 0) {

                $updateFreez = DB::table('freez_activities')->where('CompanyNum', '=', $CompanyNum)
                    ->where('status', '=', 1)->where('activities_count', '>', 0)
                    ->where('start_freez', '<=' ,date('Y-m-d'))->where('end_freez', '>', date('Y-m-d'))
                    ->update(array("status" => 0, "end_freez" => date('Y-m-d')));

                $logContent = lang('unfreeze_done_ajax').' '.$i.' '.lang('memberships_single'). '<br>';
                $logId = DB::table('log')->insertGetId(array('UserId' => $UserId, 'Text' => $logContent, 'Dates' => date('Y-m-d H:i:s'), 'CompanyNum' => $CompanyNum));
            }

            json_message($i.' '.lang('membership_unfreezed_ajax'), true);

            break;


        case 'FreezOutActivity':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId'], 'ActivityId' => $_POST['ActivityId']),

                array('ClientId' => 'Required', 'ActivityId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $CompanyNum = $CompanyNum;





                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('id', '=', $ActivityId)->first();



                //$EndFreez = date('Y-m-d');
                $EndFreez = $ActivityInfo->EndFreez;

                $StartFreez = $ActivityInfo->StartFreez;

                // fixed freez days calculation 15/9/19
                if ($StartFreez > date('Y-m-d')) {
                    $FreezDays = 0;
                    // delete notification and info
                    MembershipFreezeNotifications::checkByActivityId($ActivityId);
                }
                else if ($EndFreez >= date('Y-m-d') && $StartFreez <= date('Y-m-d')){

                    $startTimeStamp = strtotime($StartFreez);
                    $endTimeStamp = strtotime(date('Y-m-d'));

                    $timeDiff = abs($endTimeStamp - $startTimeStamp);

                    $numberDays = $timeDiff / 86400;


                    $FreezDays = (int)$numberDays;


                } else {

                    $FreezDays = $ActivityInfo->FreezDays;
                }

                $TrueDate = $ActivityInfo->TrueDate;

                $ItemsMin = '+' . $FreezDays . ' days';


                if(!empty($TrueDate)) {
                    $ClassTrueDate = date("Y-m-d", strtotime($ItemsMin, strtotime($TrueDate)));
                } else {
                    $ClassTrueDate = null;
                }



                $UserId = Auth::user()->id;

                $time = date('Y-m-d G:i:s');



                $FreezLog = '';

                $FreezLog .= '{"data": [';





                if ($ActivityInfo->FreezEndLog != '') {

                    $Loops = json_decode($ActivityInfo->FreezEndLog, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $FreezDaysDB = $val['FreezDays'];

                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];



                        $FreezLog .= '{"FreezDays": "' . $FreezDaysDB . '", "Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '"},';



                    }

                }



                $FreezLog .= '{"FreezDays": "' . $FreezDays . '", "Dates": "' . $time . '", "UserId": "' . $UserId . '"}';



                $FreezLog .= ']}';




                $NotificationDays = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->NotificationDays ?? 0;
                DB::table('client_activities')

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('id', $ActivityId)

                    ->update(array('Freez' => '2', 'TrueDate' => $ClassTrueDate, 'StudioVaildDate' => $ClassTrueDate, 'FreezEndLog' => $FreezLog, 'NotificationDays' => DB::raw('TrueDate - INTERVAL '.$NotificationDays.' DAY')));



                DB::table('client')

                    ->where('CompanyNum', $CompanyNum)

                    ->where('id', $ClientId)

                    ->update(array('FreezStatus' => '0'));





                $GetClientClasses = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->where('RegularClass', '=', '1')->where('ClientActivitiesId', '=', $ActivityInfo->id)->where('ClientId', '=', $ClientId)->where('Status', '19')->where('ClassDate', '>=', date('Y-m-d'))->get();



                foreach ($GetClientClasses as $GetClientClass) {



                    $Dates = date('Y-m-d G:i:s');

                    $UserId = Auth::user()->id;

                    $UserName = Auth::user()->display_name;



                    $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->first();



                    $ClassCounts = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();



                    $MaxClient = '0';



                    if ($GetClientClass->RegularClass == '1') {



                        $RegularDates = DB::table('classstudio_dateregular')->where('id', '=', $GetClientClass->RegularClassId)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->first();



                        if (@$RegularDates->StatusType != '') {

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularDates->StatusType)->first();

                        } else {

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', '12')->first();

                        }



                    } else {

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', '1')->first();

                    }





                    if ($ClassCounts >= @$ClassInfo->MaxClient) {

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', '9')->first();

                    }



                    $Status = $CheckNewStatus->id;

                    $StatusCount = $CheckNewStatus->StatusCount;



                    $StatusJson = '';

                    $StatusJson .= '{"data": [';



                    if ($GetClientClass->StatusJson != '') {

                        $Loops = json_decode($GetClientClass->StatusJson, true);

                        foreach ($Loops['data'] as $key => $val) {



                            $DatesDB = $val['Dates'];

                            $UserIdDB = $val['UserId'];

                            $StatusDB = $val['Status'];

                            $StatusTitleDB = $val['StatusTitle'];

                            $UserNameDB = $val['UserName'];



                            $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                        }

                    }



                    $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "19", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                    $StatusJson .= ']}';

                    (new ClassStudioAct($GetClientClass->id))->update([
                        'Status' => $Status,
                        'StatusJson' => $StatusJson,
                        'StatusCount' => $StatusCount,
                    ]);

                    //// עדכון שיעור ברשימת משתתפים



                    $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                    $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $GetClientClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();





                    DB::table('classstudio_date')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $GetClientClass->ClassId)

                        ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList));



                    DB::table('classlog')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClassId' => $GetClientClass->ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClassType - Add



        case 'AddClassType':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = $_POST['Type'];

                $ClassNotes = $_POST['ClassNotes'];

                $DocsBackgroundColor = $_POST['DocsBackgroundColor'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $Color2 = @$_POST['Color2'];





                $Items = DB::table('class_type')->insertGetId(

                    array('Type' => $Type, 'CompanyNum' => $CompanyNum, 'ClassContent' => $ClassNotes, 'Color' => $DocsBackgroundColor, 'Color2' => $Color2));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditClassType - Edit



        case 'EditClassType':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $ClassNotes = $_POST['ClassNotes'];

                $DocsBackgroundColor = $_POST['DocsBackgroundColor'];

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $Color2 = @$_POST['Color2'];



                DB::table('class_type')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Type' => $Type, 'Status' => $Status, 'ClassContent' => $ClassNotes, 'Color' => $DocsBackgroundColor, 'Color2' => $Color2));





                DB::table('classstudio_date')

                    ->where('ClassNameType', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->where('StartDate', '>=', date('Y-m-d'))

                    ->update(array('color' => $DocsBackgroundColor));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClassNewPopUp - Edit



        case 'AddClassNewPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('SetDate' => @$_POST['SetDate'], 'SetTime' => @$_POST['SetTime'], 'SetToTime' => @$_POST['SetToTime'], 'FloorId' => @$_POST['FloorId'], 'Day' => @$_POST['Day']),

                array('SetDate' => 'Required', 'SetTime' => 'Required', 'SetToTime' => 'Required', 'FloorId' => 'Required', 'Day' => 'Required')

            );





            if ($validator->passes()) {



                $CalendarId = @$_POST['CalendarId'];

                $FloorId = @$_POST['FloorId'];

                $ClassNameType = $_POST['ClassNameType'];

                $ShowApp = $_POST['ShowApp'];

                $ClassName = $_POST['ClassName'];

                $GuideId = $_POST['GuideId'];

                $ExtraGuideId = $_POST['ExtraGuideId'];

                $FixGroupNumber = $_POST['FixGroupNumber'];



                $StartDate = @$_POST['SetDate'];

                if (empty($StartDate) || ($StartDate && strtotime($StartDate) > strtotime("+1 year"))) {
                    json_message(lang('unvalid_update_date'), false);
                    exit;
                }

                $DayNums = @$_POST['Day'];

                $StartTime = @$_POST['SetTime'];

                $EndTime = @$_POST['SetToTime'];

                $ClassType = @$_POST['ClassType'];

                $ClassCount = @$_POST['ClassCount'];

                $ClassRepeat = @$_POST['ClassRepeat'];



                $MaxClient = $_POST['MaxClient'];

                $ClassLimitTypes = $_POST['ClassLimitTypes'] ?? 0; /// למשוך מגבלה לפי סוג מנוי

                $ClassMemberType = @$_POST['ClassMemberType'];



                $MinClass = $_POST['MinClass'];

                $MinClassNum = @$_POST['MinClassNum'];

                $ClassTimeCheck = @$_POST['ClassTimeCheck'];

                $ClassTimeTypeCheck = @$_POST['ClassTimeTypeCheck']; /// 1=min, 2=hour





                $OpenOrder = @$_POST['OpenOrder'];

                $OpenOrderTime = @$_POST['OpenOrderTime'];

                $OpenOrderType = @$_POST['OpenOrderType'];

                $CloseOrder = @$_POST['CloseOrder'];

                $CloseOrderTime = @$_POST['CloseOrderTime'];

                $CloseOrderType = @$_POST['CloseOrderType'];



                if ($OpenOrder == '1' || $OpenOrder == '') {

                    $OpenOrderTime = '10';

                    $OpenOrderType = '1';

                }



                if ($CloseOrder == '1' || $OpenOrder == '') {

                    $CloseOrderTime = '10';

                    $CloseOrderType = '1';

                }





                $ClassWating = $_POST['ClassWating'];

                $MaxWatingList = @$_POST['MaxWatingList'];

                $NumMaxWatingList = @$_POST['NumMaxWatingList'];



                if (($MaxWatingList == '1' && $NumMaxWatingList == '') || ($MaxWatingList == '1' && $NumMaxWatingList == '0')) {

                    $NumMaxWatingList = '0';

                }



                $JsonLimitLevel = '';

                foreach ($_POST['LimitLevel'] as $value) {

                    $JsonLimitLevel .= $value . ",";

                }

                $JsonLimitLevel = substr($JsonLimitLevel, 0, -1);



                $GenderLimit = $_POST['GenderLimit'];



                $ClassLevel = $_POST['ClassLevel'];



                $SendReminder = $_POST['SendReminder'];

                $TypeReminder = $_POST['TypeReminder'];

                $TimeReminder = $_POST['TimeReminder'];

                $image = $_POST["pageImgPath"] ?? null;

                $CancelLaw = $_POST['CancelLaw'];

                $CancelDays = @$_POST['CancelDay'];

                $liveClassLink = $_POST['liveClassLink'] ?? NULL;
                if(isset($_POST['liveClass']) && $_POST['liveClass'] =='studio'){
                    $liveClassLink = null;
                }
                if(isset($_POST['liveClass'])){
                    if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                    if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                }else{
                    $is_zoom_class = 0;
                }
                $registerLimit = NULL;
                if(isset($_POST['registerLimit']) && $is_zoom_class == 0){
                    $registerLimit = $_POST['registerLimit'];
                }
                else if(isset($_POST['registerLimitZoom']) && $is_zoom_class == 1){
                    $registerLimit = $_POST['registerLimitZoom'];
                }
                $FreeClass = $_POST['FreeClass'];



                if (@$CancelDays == '') {

                    $CancelDays = '0';

                    $CancelDayMinus = '7';

                }



                $CancelDay = $CancelDays;



                if ($DayNums == '0') {



                    $Day = lang('sunday');

                    $DayNum = '0';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '1';

                    }





                } else if ($DayNums == '1') {



                    $Day = lang('monday');

                    $DayNum = '1';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '2';

                    }





                } else if ($DayNums == '2') {



                    $Day = lang('tuesday');

                    $DayNum = '2';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '3';

                    }



                } else if ($DayNums == '3') {



                    $Day = lang('wednesday');

                    $DayNum = '3';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '4';

                    }



                } else if ($DayNums == '4') {



                    $Day = lang('thursday');

                    $DayNum = '4';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '5';

                    }



                } else if ($DayNums == '5') {



                    $Day = lang('friday');

                    $DayNum = '5';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '6';

                    }



                } else if ($DayNums == '6') {



                    $Day = lang('saturday');

                    $DayNum = '6';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '7';

                    }



                }





                if (@$CancelDays == '') {

                    $CancelDays = $DayNums;

                    $CancelDay = $CancelDays;

                }





                if ($DayNums == '0') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '1') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '2') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '3') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('saturday');

                    }





                } else if ($DayNums == '4') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '5') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '6') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('saturday');

                    }



                }





                $CancelTillTime = $_POST['CancelTillTime'];



                $StopCancel = $_POST['StopCancel'];

                $StopCancelTime = @$_POST['StopCancelTime'];

                $StopCancelType = @$_POST['StopCancelType'];





                $ShowClientNum = $_POST['ShowClientNum'];

                $ShowClientName = $_POST['ShowClientName'];

                $WatingListOrederShow = $_POST['WatingListOrederShow'];

                $ClassDevice = $_POST['ClassDevice'];

                //// בדיקת מגבלה סוגי מנוי

                $CheckLimitCounts = DB::table('templistmember')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->count();



                //// בדיקת שדות חובה



                if (@$ClassNameType == '') {

                    json_message(lang('req_field_class_type_ajax'), false);

                    exit;

                } else if (@$ClassName == '') {

                    json_message(lang('req_field_class_title_ajax'), false);

                    exit;

                } else if (@$GuideId == '') {

                    json_message(lang('req_field_tutor_ajax'), false);

                    exit;

                } else if (@$MaxClient == '') {

                    json_message(lang('req_field_max_participant_ajax'), false);

                    exit;

                } else if ((@$MinClass == '1' && @$MinClassNum == '') || (@$MinClass == '1' && @$ClassTimeCheck == '')) {

                    json_message(lang('req_field_min_participant_time_ajax'), false);

                    exit;

                } else if (@$ClassType == '2' && @$ClassCount == '') {

                    json_message(lang('req_field_cycle_num_ajax'), false);

                    exit;

                } else if (@$ClassLimitTypes == '1' && @$CheckLimitCounts == '0') {

                    json_message(lang('select_membership_type_ajax'), false);

                    exit;

                } else if (@$TimeReminder == '' && @$SendReminder == '0') {

                    json_message(lang('set_notification_time_ajax'), false);

                    exit;

                } else if ((@$CancelLaw == '1' && @$CancelTillTime == '') || (@$CancelLaw == '2' && @$CancelTillTime == '')) {

                    json_message(lang('set_cancel_time_ajax'), false);

                    exit;

                } else if ((@$CancelLaw == '3' && @$CancelDay == '') || (@$CancelLaw == '3' && @$CancelTillTime == '')) {

                    json_message(lang('select_day_cancel_ajax'), false);

                    exit;

                }





                if (($MaxWatingList == '0' && $NumMaxWatingList == '') || ($MaxWatingList == '0' && $NumMaxWatingList == '0')) {

                    json_message(lang('set_max_waiting_ajax'), false);

                    exit;

                }





                //// סיום בדיקת שדות חובה



                $JsonMemberType = '';



                //// בדיקת משתנים מוסתרים



                if (@$MinClass != '1') {

                    $MinClassNum = '0';

                    $ClassTimeCheck = '0';

                }



                if (@$CancelLaw != '3') {

                    $CancelDay = '0';

                    $CancelDayName = '';

                }



                if (@$ClassDevice == '') {

                    $ClassDevice = '0';

                }



                $CompanyNum = $CompanyNum;

                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;



                ////  מחולל מספר ייחודי לקבוצה

                $GroupNumber = rand(1262055681, 1262055681);

                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                $GroupNumber = uniqid($GroupNumber);





                $CheckGroupNumber = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('Floor', '=', $FloorId)->where('DayNum', '=', $DayNums)->where('StartTime', '=', $StartTime)->where('ClassNameType', '=', $ClassNameType)->where('ClassType', '!=', '3')->where('Status', '!=', '2')->orderBy('id', 'ASC')->first();



                if (@$CheckGroupNumber->id != '') {

                    $GroupNumber = $CheckGroupNumber->GroupNumber;



                    $CheckGroupNumberStartTimes = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GroupNumber)->where('StartTime', '!=', $StartTime)->first();



                    if (@$CheckGroupNumberStartTimes->id != '') {

                        $GroupNumber = rand(1262055681, 1262055681);

                        $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                        $GroupNumber = uniqid($GroupNumber);

                    }



                }



                $GuideNames = DB::table('users')->where('id', '=', $GuideId)->first();





                if (@$ExtraGuideId == '0' || @$ExtraGuideId == '') {

                    $ExtraGuideId = '0';

                    $ExtraGuideNames_display_name = null;

                } else {

                    $ExtraGuideNames = DB::table('users')->where('id', '=', $ExtraGuideId)->first();

                    $ExtraGuideNames_display_name = $ExtraGuideNames->display_name;

                }



                $ClassNameTypeTitle = DB::table('class_type')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassNameType)->first();



                $CheckFloorBrand = DB::table('sections')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $FloorId)->first();



                $BrandId = @$CheckFloorBrand->Brands;



                if ($BrandId == '') {

                    $BrandId = '0';

                }




                if (str_contains($ClassNameTypeTitle->Color, '#'))
                    $color =  $ClassNameTypeTitle->Color;
                else
                    $color = DB::table('colors')->where('id', $ClassNameTypeTitle->Color)->pluck('hex');




                $CalendarId = @$_POST['CalendarId'];





                $ClassSettingsInfo = DB::table('classsettings')->where('CompanyNum', '=', $CompanyNum)->first();

                $GuideCheck = $ClassSettingsInfo->GuideCheck;





                /// הוספת שיעור חדש



                if (@$CalendarId == '') {



                    /// הגדרת שיעור קבוע ו/או מוגבל בזמן

                    if ($ClassType == '1' || $ClassType == '2') {



                        //// מציאת תאריכים לימים שנבחרו



                        if ($ClassType == '1') {

                            $ClassCount = '30';

                        }



                        $ItemsDay = '+' . $ClassCount . ' week';

                        $Today = date('Y-m-d', strtotime($StartDate));

                        $EndDates = date('Y-m-d', strtotime($Today . $ItemsDay));



                        function getDateForSpecificDayBetweenDates($startDate, $endDate, $weekdayNumber)

                        {


                            $endDate = $endDate;



                            $dateArr = array();



                            do {

                                if (date("w", strtotime($startDate)) != $weekdayNumber) {

                                    $startDate = date('Y-m-d', strtotime('+1 day', strtotime($startDate))); // add 1 day

                                }

                            } while (date("w", strtotime($startDate)) != $weekdayNumber);





                            while ($startDate <= $endDate) {

                                $dateArr[] = date('Y-m-d', strtotime($startDate));

                                $startDate = date('Y-m-d', strtotime('+7 day', strtotime($startDate))); // add 7 days



                            }



                            return ($dateArr);

                        }





                        $dateArr = getDateForSpecificDayBetweenDates($Today, $EndDates, $DayNums);





                        // מספר חזרות

                        $i = '1';

                        foreach ($dateArr as $key => $value) {



                            $start_date = $value . ' ' . $StartTime;

                            $end_date = $value . ' ' . $EndTime;





                            //// בדיקת שיעור קיים באותו יום,שעה,אולם





                            if ($GuideCheck == '0') {

                                $CheckFloor = DB::table('classstudio_date')->where('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('EndTime', '!=', '00:00:00')->Orwhere('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')->first();

                                //   ->Orwhere('GuideId','=', $GuideId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $value)->where('StartTime','>=', $StartTime)->where('EndTime','<=', $EndTime)->where('Status','!=', '2')->Orwhere('GuideId','=', $GuideId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $value)->where('StartTime','<', $EndTime)->where('EndTime','>', $StartTime)->where('Status','!=', '2')

                            } else {

                                $CheckFloor = DB::table('classstudio_date')

                                    ->where('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('EndTime', '!=', '00:00:00')

                                    ->Orwhere('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')

                                    ->Orwhere('GuideId', '=', $GuideId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->Orwhere('GuideId', '=', $GuideId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')

                                    ->first();

                            }





                            if (@$CheckFloor->id != '') {

                                $ErrorText = lang('date_class_found_ajax').' '.with(new DateTime($CheckFloor->StartDate))->format('d/m/Y').' '.lang('hours_selected_ajax'). '<br>'.lang('class_placement_error_ajax');

                                json_message(lang('error_booking_ajax').' '.$ErrorText, false);

                                exit;

                            }

                            if(isset($_POST['liveClass'])){
                                if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                                if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                            }else{
                                $is_zoom_class = 0;
                            }

                            $AddClassDesk = DB::table('classstudio_date')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'Brands' => $BrandId, 'start_date' => $start_date,
                                    'end_date' => $end_date, 'text' => $ClassNameTypeTitle->Type, 'color' => $color,
                                    'Floor' => $FloorId, 'ClassNameType' => $ClassNameType, 'ShowApp' => $ShowApp,
                                    'ClassName' => $ClassName, 'GuideId' => $GuideId, 'GuideName' => $GuideNames->display_name,
                                    'ExtraGuideId' => $ExtraGuideId, 'ExtraGuideName' => @$ExtraGuideNames_display_name,
                                    'MaxClient' => $MaxClient, 'MinClass' => $MinClass, 'MinClassNum' => $MinClassNum,
                                    'ClassTimeCheck' => $ClassTimeCheck, 'StartDate' => $value, 'DayNum' => $DayNums,
                                    'Day' => $Day, 'StartTime' => $StartTime, 'EndDate' => $value, 'EndTime' => $EndTime,
                                    'ClassType' => $ClassType, 'ClassCount' => $i, 'ClassDevice' => $ClassDevice,
                                    'ClassMemberType' => 'BA999', 'ClassWating' => $ClassWating, 'ShowClientNum' => $ShowClientNum,
                                    'ShowClientName' => $ShowClientName, 'SendReminder' => $SendReminder,
                                    'TypeReminder' => $TypeReminder, 'TimeReminder' => $TimeReminder, 'CancelLaw' => $CancelLaw,
                                    'CancelDay' => $CancelDay, 'CancelDayMinus' => $CancelDayMinus, 'CancelDayName' => $CancelDayName,
                                    'CancelTillTime' => $CancelTillTime, 'UserId' => $UserId, 'GroupNumber' => $GroupNumber,
                                    'Dates' => $Dates, 'MaxWatingList' => $MaxWatingList, 'NumMaxWatingList' => $NumMaxWatingList,
                                    'ClassTimeTypeCheck' => $ClassTimeTypeCheck, 'ClassLimitTypes' => $ClassLimitTypes,
                                    'LimitLevel' => $JsonLimitLevel, 'GenderLimit' => $GenderLimit, 'FreeClass' => $FreeClass,
                                    'StopCancel' => $StopCancel, 'StopCancelTime' => $StopCancelTime,
                                    'StopCancelType' => $StopCancelType, 'WatingListOrederShow' => $WatingListOrederShow,
                                    'ClassLevel' => $ClassLevel, 'OpenOrder' => $OpenOrder, 'OpenOrderTime' => $OpenOrderTime,
                                    'OpenOrderType' => $OpenOrderType, 'CloseOrder' => $CloseOrder, 'CloseOrderTime' => $CloseOrderTime,
                                    'CloseOrderType' => $CloseOrderType, 'liveClassLink' => $liveClassLink,
                                    'registerLimit' => $registerLimit,'is_zoom_class'=>$is_zoom_class, 'image' => $image));

                            if(gettype($AddClassDesk)== 'integer' && $is_zoom_class == 1) insertIntoClass_zoom($AddClassDesk);





                            if ($ClassLimitTypes == '1') {



                                $count = $_POST['tGroups'];

                                for ($e = 1; $e <= $count; $e++) {



                                    $ClassMemberType = @$_POST['ClassMemberType' . $e];



                                    if ($ClassMemberType != '') {



                                        $JsonMemberType = '';

                                        foreach ($ClassMemberType as $val) {

                                            $JsonMemberType .= $val . ",";

                                        }

                                        $JsonMemberType = substr($JsonMemberType, 0, -1);



                                        $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                        if (@$MaxClientMemberShip == '') {

                                            $MaxClientMemberShip = $MaxClient;

                                        }



                                        $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                            array('CompanyNum' => $CompanyNum, 'ClassId' => $AddClassDesk, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                                    }





                                }



                            }





                            ++$i;



                        }





                    } /// הגדרת שיעור חד פעמי

                    else if ($ClassType == '3') {



                        $ClassCount = '1';





                        $start_date = $StartDate . ' ' . $StartTime;

                        $end_date = $StartDate . ' ' . $EndTime;





                        //// יום שיעור לפי תאריך שנבחר



                        $FindDay = date('l', strtotime($StartDate));



                        if ($FindDay == 'Sunday') {

                            $DayNums = '0';

                            $Day = lang('sunday');

                        } else if ($FindDay == 'Monday') {

                            $DayNums = '1';

                            $Day = lang('monday');

                        } else if ($FindDay == 'Tuesday') {

                            $DayNums = '2';

                            $Day = lang('tuesday');

                        } else if ($FindDay == 'Wednesday') {

                            $DayNums = '3';

                            $Day = lang('wednesday');

                        } else if ($FindDay == 'Thursday') {

                            $DayNums = '4';

                            $Day = lang('thursday');

                        } else if ($FindDay == 'Friday') {

                            $DayNums = '5';

                            $Day = lang('friday');

                        } else if ($FindDay == 'Saturday') {

                            $DayNums = '6';

                            $Day = lang('saturday');

                        }



                        //// בדיקת שיעור קיים באותו יום,שעה,אולם



                        if ($GuideCheck == '0') {

                            $CheckFloor = DB::table('classstudio_date')->where('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('EndTime', '!=', '00:00:00')->Orwhere('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')->first();

                            // ->Orwhere('GuideId','=', $GuideId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','>=', $StartTime)->where('EndTime','<=', $EndTime)->where('Status','!=', '2')->Orwhere('GuideId','=', $GuideId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','<', $EndTime)->where('EndTime','>', $StartTime)->where('Status','!=', '2')

                        } else {

                            $CheckFloor = DB::table('classstudio_date')

                                ->where('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('EndTime', '!=', '00:00:00')

                                ->Orwhere('Floor', '=', $FloorId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')

                                ->Orwhere('GuideId', '=', $GuideId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->Orwhere('GuideId', '=', $GuideId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')

                                ->first();

                        }





                        if (@$CheckFloor->id != '') {

                            $ErrorText = lang('date_class_found_ajax').' '.with(new DateTime($CheckFloor->StartDate))->format('d/m/Y').' '.lang('hours_selected_ajax'). '<br>'.lang('class_placement_error_ajax');

                            json_message(lang('error_booking_ajax') . $ErrorText, false);

                            exit;

                        }


                        if(isset($_POST['liveClass'])){
                            if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                            if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                        }else{
                            $is_zoom_class = 0;
                        }
                        $AddClassDesk = DB::table('classstudio_date')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'Brands' => $BrandId, 'start_date' => $start_date,
                                'end_date' => $end_date, 'text' => $ClassNameTypeTitle->Type, 'color' => $color,
                                'Floor' => $FloorId, 'ClassNameType' => $ClassNameType, 'ShowApp' => $ShowApp,
                                'ClassName' => $ClassName, 'GuideId' => $GuideId, 'GuideName' => $GuideNames->display_name,
                                'ExtraGuideId' => $ExtraGuideId, 'ExtraGuideName' => @$ExtraGuideNames_display_name,
                                'MaxClient' => $MaxClient, 'MinClass' => $MinClass, 'MinClassNum' => $MinClassNum,
                                'ClassTimeCheck' => $ClassTimeCheck, 'StartDate' => $StartDate, 'DayNum' => $DayNums,
                                'Day' => $Day, 'StartTime' => $StartTime, 'EndDate' => $StartDate, 'EndTime' => $EndTime,
                                'ClassType' => $ClassType, 'ClassCount' => $ClassCount, 'ClassDevice' => $ClassDevice,
                                'ClassMemberType' => 'BA999', 'ClassWating' => $ClassWating, 'ShowClientNum' => $ShowClientNum,
                                'ShowClientName' => $ShowClientName, 'SendReminder' => $SendReminder, 'TypeReminder' => $TypeReminder,
                                'TimeReminder' => $TimeReminder, 'CancelLaw' => $CancelLaw, 'CancelDay' => $CancelDay,
                                'CancelDayMinus' => $CancelDayMinus, 'CancelDayName' => $CancelDayName, 'CancelTillTime' => $CancelTillTime,
                                'UserId' => $UserId, 'GroupNumber' => $GroupNumber, 'Dates' => $Dates, 'MaxWatingList' => $MaxWatingList,
                                'NumMaxWatingList' => $NumMaxWatingList, 'ClassTimeTypeCheck' => $ClassTimeTypeCheck,
                                'ClassLimitTypes' => $ClassLimitTypes, 'LimitLevel' => $JsonLimitLevel, 'GenderLimit' => $GenderLimit,
                                'FreeClass' => $FreeClass, 'StopCancel' => $StopCancel, 'StopCancelTime' => $StopCancelTime,
                                'StopCancelType' => $StopCancelType, 'WatingListOrederShow' => $WatingListOrederShow,
                                'ClassLevel' => $ClassLevel, 'OpenOrder' => $OpenOrder, 'OpenOrderTime' => $OpenOrderTime,
                                'OpenOrderType' => $OpenOrderType, 'CloseOrder' => $CloseOrder, 'CloseOrderTime' => $CloseOrderTime,
                                'CloseOrderType' => $CloseOrderType, 'liveClassLink' => $liveClassLink, 'registerLimit' => $registerLimit,'is_zoom_class'=>$is_zoom_class, 'image' => $image));

                        if(gettype($AddClassDesk)== 'integer' && $is_zoom_class == 1) {
                            insertIntoClass_zoom($AddClassDesk);
                        }




                        if ($ClassLimitTypes == '1') {



                            $count = $_POST['tGroups'];

                            for ($e = 1; $e <= $count; $e++) {



                                $ClassMemberType = @$_POST['ClassMemberType' . $e];



                                if ($ClassMemberType != '') {



                                    $JsonMemberType = '';

                                    foreach (@$ClassMemberType as $value) {

                                        $JsonMemberType .= $value . ",";

                                    }

                                    $JsonMemberType = substr($JsonMemberType, 0, -1);



                                    $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                    if (@$MaxClientMemberShip == '') {

                                        $MaxClientMemberShip = $MaxClient;

                                    }



                                    $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                        array('CompanyNum' => $CompanyNum, 'ClassId' => $AddClassDesk, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                                }





                            }



                        }





                    }





                } /// עריכה

                else {



                    $ClassStatus = $_POST['ClassStatus'];
                    $GroupEdit = $_POST['GroupEdit'];
                    $start = $_POST['SetTime'];
                    $end = $_POST['SetToTime'];




                    $CheckClassInfo = DB::table('classstudio_date')->where('id','=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->first();
                    $GroupNumber =  $CheckClassInfo->GroupNumber;
                    $StartDate =  $_POST['SetDate'];
                    $ClassNameF =  $CheckClassInfo->ClassName;
                    $StartTimeF =  $CheckClassInfo->StartTime;
                    $DayF =  $CheckClassInfo->Day;

                    $SectioClassInfo = DB::table('sections')->where('id','=', $CheckClassInfo->Floor)->where('CompanyNum','=', $CompanyNum)->first();
                    $ClassInfoOne = $ClassNameF.' '.lang('in_date_ajax').' '.$StartDate.' '.lang('at_time_ajax').' '.$StartTimeF.' '.lang('at_day_ajax').' '.$DayF.' '.lang('in_room_ajax').' '.htmlentities(@$SectioClassInfo->Title);
                    $ClassInfoRegular = $ClassNameF.' '.lang('at_time_class_ajax').' '.$StartTimeF.' '.lang('at_day_ajax').' '.$DayF.' '.lang('in_room_ajax').' '.htmlentities(@$SectioClassInfo->Title);

                    if ($GuideCheck=='0'){
                        $CheckFloor = DB::table('classstudio_date')->where('id', '!=', $CalendarId)->where('Floor','=', $FloorId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','>=', $start)->where('EndTime','<=', $end)->where('Status','!=', '2')->where('EndTime','!=', '00:00:00')
                            ->Orwhere('Floor','=', $FloorId)->where('id', '!=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','<', $end)->where('EndTime','>', $start)->where('EndTime','!=', '00:00:00')->where('Status','!=', '2')->first();

                    }
                    else {
                        $CheckFloor = DB::table('classstudio_date')
                            ->where('Floor','=', $FloorId)->where('id', '!=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','>=', $start)->where('EndTime','<=', $end)->where('Status','!=', '2')->where('EndTime','!=', '00:00:00')
                            ->orWhere('Floor', '=', $FloorId)->where('id', '!=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $end)->where('EndTime', '>', $start)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')
                            ->orWhere('Floor','=', $FloorId)->where('id', '!=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','<', $start)->where('EndTime','>', $end)->where('EndTime','!=', '00:00:00')->where('Status','!=', '2')
                            ->Orwhere('GuideId','=', $GuideId)->where('id', '!=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','<', $start)->where('EndTime','>', $start)->where('EndTime','<', $end)->where('Status','!=', '2')
                            ->Orwhere('GuideId','=', $GuideId)->where('id', '!=', $CalendarId)->where('CompanyNum','=', $CompanyNum)->where('StartDate','=', $StartDate)->where('StartTime','>', $start)->where('StartTime','<', $end)->where('EndTime','>', $end)->where('EndTime','!=', '00:00:00')->where('Status','!=', '2')
                            ->Orwhere('GuideId', '=', $GuideId)->where('id', '!=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $end)->where('EndTime', '>', $start)->where('EndTime', '!=', '00:00:00')->where('Status', '!=', '2')
                            ->first();
                    }



                    if (@$CheckFloor->id!=''){
                        $ErrorText = lang('date_class_found_ajax').' '.with(new DateTime($CheckFloor->StartDate))->format('d/m/Y').' '.lang('hours_selected_ajax'). '<br>'.lang('class_placement_error_ajax');
                        json_message(lang('error_booking_ajax').$ErrorText , false);
                        exit;
                    }


                    /// עריכה בודדת

                    if ($GroupEdit == '0') {





                        if ($ClassStatus == '1') {

                            DB::table('classstudio_date')

                                ->where('id', $CalendarId)

                                ->whereIn('Status', array(0, 1))

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('Status' => '2', 'Change' => '1', 'displayCancel' => '1'));



                            CancelClass($CalendarId, '0', '0');



                            CreateLogMovement( //FontAwesome Icon

                                lang('log_canceled_class_ajax').' '.$ClassInfoOne, //LogContent

                                '0' //ClientId

                            );





                        } else {



                            CreateLogMovement( //FontAwesome Icon

                                lang('log_edit_class_ajax').' '.$ClassInfoOne, //LogContent

                                '0' //ClientId

                            );

                            if(isset($_POST['liveClass'])){
                                if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                                if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                            }else{
                                $is_zoom_class = 0;
                            }



                            $start_date = $StartDate . ' ' . $StartTime;

                            $end_date = $StartDate . ' ' . $EndTime;

                            ClassStudioDate::updateByIdAndStatus($CalendarId, [0, 1], [
                                'Brands' => $BrandId,
                                'start_date' => $start_date,
                                'end_date' => $end_date,
                                'StartDate' => $StartDate,
                                'StartTime' => $StartTime,
                                'EndDate' => $StartDate,
                                'EndTime' => $EndTime,
                                'Floor' => $FloorId,
                                'text' => $ClassNameTypeTitle->Type,
                                'color' => $color,
                                'ClassNameType' => $ClassNameType,
                                'ShowApp' => $ShowApp,
                                'ClassName' => $ClassName,
                                'GuideId' => $GuideId,
                                'GuideName' => $GuideNames->display_name,
                                'ExtraGuideId' => $ExtraGuideId,
                                'ExtraGuideName' => @$ExtraGuideNames_display_name,
                                'MaxClient' => $MaxClient,
                                'MinClass' => $MinClass,
                                'MinClassNum' => $MinClassNum,
                                'ClassTimeCheck' => $ClassTimeCheck,
                                'ClassDevice' => $ClassDevice,
                                'ClassWating' => $ClassWating,
                                'ShowClientNum' => $ShowClientNum,
                                'ShowClientName' => $ShowClientName,
                                'SendReminder' => $SendReminder,
                                'TypeReminder' => $TypeReminder,
                                'TimeReminder' => $TimeReminder,
                                'CancelLaw' => $CancelLaw,
                                'CancelDay' => $CancelDay,
                                'CancelDayMinus' => $CancelDayMinus,
                                'CancelDayName' => $CancelDayName,
                                'CancelTillTime' => $CancelTillTime,
                                'MaxWatingList' => $MaxWatingList,
                                'NumMaxWatingList' => $NumMaxWatingList,
                                'ClassTimeTypeCheck' => $ClassTimeTypeCheck,
                                'Change' => '1',
                                'ClassLimitTypes' => $ClassLimitTypes,
                                'LimitLevel' => $JsonLimitLevel,
                                'GenderLimit' => $GenderLimit,
                                'FreeClass' => $FreeClass,
                                'StopCancel' => $StopCancel,
                                'StopCancelTime' => $StopCancelTime,
                                'StopCancelType' => $StopCancelType,
                                'WatingListOrederShow' => $WatingListOrederShow,
                                'ClassLevel' => $ClassLevel,
                                'OpenOrder' => $OpenOrder,
                                'OpenOrderTime' => $OpenOrderTime,
                                'OpenOrderType' => $OpenOrderType,
                                'CloseOrder' => $CloseOrder,
                                'CloseOrderTime' => $CloseOrderTime,
                                'CloseOrderType' => $CloseOrderType,
                                'liveClassLink' => $liveClassLink,
                                'registerLimit' => $registerLimit,
                                'is_zoom_class' => $is_zoom_class,
                                'image' => $image,
                            ]);

                            if($is_zoom_class == 1) {
                                insertIntoClass_zoom($CalendarId,true);
                            }

                            //// עדכון פרטי שיבוץ קבוע
                            DB::table('classstudio_dateregular')

                                ->where('GroupNumber', $GroupNumber)

                                ->where('DayNum', $CheckClassInfo->DayNum)

                                ->where('ClassTime', $StartTimeF)

                                ->where('Floor', $FloorId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('ClassTime' => $StartTime));





                            if ($ClassLimitTypes == '1') {



                                DB::table('classstudio_date_roles')->where('ClassId', '=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->delete();



                                $count = $_POST['tGroups'];

                                for ($e = 1; $e <= $count; $e++) {



                                    $ClassMemberType = @$_POST['ClassMemberType' . $e];



                                    if ($ClassMemberType != '') {



                                        $JsonMemberType = '';

                                        foreach (@$ClassMemberType as $value) {

                                            $JsonMemberType .= $value . ",";

                                        }

                                        $JsonMemberType = substr($JsonMemberType, 0, -1);



                                        $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                        if (@$MaxClientMemberShip == '') {

                                            $MaxClientMemberShip = $MaxClient;

                                        }



                                        $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                            array('CompanyNum' => $CompanyNum, 'ClassId' => $CalendarId, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                                    }





                                }



                            } else {

                                DB::table('classstudio_date_roles')->where('ClassId', '=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->delete();

                            }





                        }


                            $ReminderDate = ($TypeReminder == '1') ? $StartDate : date("Y-m-d", strtotime('-1 day', strtotime($StartDate)));

                        ClassStudioAct::reminderStatusUpdate($CalendarId, $ClassStatus, $SendReminder,
                            $CompanyNum, $StartDate, $start, $ReminderDate, $TimeReminder, $CheckClassInfo->Status);


                    } /// עריכת קבוצה

                    else if ($GroupEdit == '1') {



                        if ($ClassStatus == '1') {

                            DB::table('classstudio_date')

                                ->where('GroupNumber', $GroupNumber)

                                ->where('StartTime', $StartTimeF)

                                ->where('DayNum', $CheckClassInfo->DayNum)

                                ->where('Floor', $CheckClassInfo->Floor)

                                ->where('StartDate', '>=', $StartDate)

                                ->whereIn('Status', array(0, 1))

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('Status' => '2', 'Color' => '#e2e2e2', 'Change' => '1'));



                            CancelClass('0', $GroupNumber, $StartDate);



                            CreateLogMovement( //FontAwesome Icon

                                lang('log_canceled_class_group_ajax').' '.$ClassInfoRegular, //LogContent

                                '0' //ClientId

                            );



                        } else {



                            CreateLogMovement( //FontAwesome Icon

                                lang('log_edit_class_group_ajax').' '.$ClassInfoRegular, //LogContent

                                '0' //ClientId

                            );



                            $TrueClassInfos = DB::table('classstudio_date')

                                ->where('GroupNumber', $GroupNumber)

                                ->where('StartTime', $StartTimeF)

                                ->where('DayNum', $CheckClassInfo->DayNum)

                                ->where('Floor', $CheckClassInfo->Floor)

                                ->where('StartDate', '>=', $StartDate)

                                ->whereIn('Status', array(0, 1))

                                ->where('CompanyNum', $CompanyNum)

                                ->get();



                            foreach ($TrueClassInfos as $TrueClassInfo) {



                                $GroupNumber = $TrueClassInfo->GroupNumber;



                                $start_date = $TrueClassInfo->StartDate . ' ' . $StartTime;

                                $end_date = $TrueClassInfo->StartDate . ' ' . $EndTime;

                                ClassStudioDate::updateById($TrueClassInfo->id, [
                                    'Brands' => $BrandId,
                                    'start_date' => $start_date,
                                    'end_date' => $end_date,
                                    'StartDate' => $TrueClassInfo->StartDate,
                                    'StartTime' => $StartTime,
                                    'EndDate' => $TrueClassInfo->StartDate,
                                    'EndTime' => $EndTime,
                                    'Floor' => $FloorId,
                                    'text' => $ClassNameTypeTitle->Type,
                                    'color' => $color,
                                    'ClassNameType' => $ClassNameType,
                                    'ShowApp' => $ShowApp,
                                    'ClassName' => $ClassName,
                                    'GuideId' => $GuideId,
                                    'GuideName' => $GuideNames->display_name,
                                    'ExtraGuideId' => $ExtraGuideId,
                                    'ExtraGuideName' => @$ExtraGuideNames_display_name,
                                    'MaxClient' => $MaxClient,
                                    'MinClass' => $MinClass,
                                    'MinClassNum' => $MinClassNum,
                                    'ClassTimeCheck' => $ClassTimeCheck,
                                    'ClassDevice' => $ClassDevice,
                                    'ClassWating' => $ClassWating,
                                    'ShowClientNum' => $ShowClientNum,
                                    'ShowClientName' => $ShowClientName,
                                    'SendReminder' => $SendReminder,
                                    'TypeReminder' => $TypeReminder,
                                    'TimeReminder' => $TimeReminder,
                                    'CancelLaw' => $CancelLaw,
                                    'CancelDay' => $CancelDay,
                                    'CancelDayMinus' => $CancelDayMinus,
                                    'CancelDayName' => $CancelDayName,
                                    'CancelTillTime' => $CancelTillTime,
                                    'MaxWatingList' => $MaxWatingList,
                                    'NumMaxWatingList' => $NumMaxWatingList,
                                    'ClassTimeTypeCheck' => $ClassTimeTypeCheck,
                                    'Change' => '1',
                                    'ClassLimitTypes' => $ClassLimitTypes,
                                    'LimitLevel' => $JsonLimitLevel,
                                    'GenderLimit' => $GenderLimit,
                                    'FreeClass' => $FreeClass,
                                    'StopCancel' => $StopCancel,
                                    'StopCancelTime' => $StopCancelTime,
                                    'StopCancelType' => $StopCancelType,
                                    'WatingListOrederShow' => $WatingListOrederShow,
                                    'ClassLevel' => $ClassLevel,
                                    'OpenOrder' => $OpenOrder,
                                    'OpenOrderTime' => $OpenOrderTime,
                                    'OpenOrderType' => $OpenOrderType,
                                    'CloseOrder' => $CloseOrder,
                                    'CloseOrderTime' => $CloseOrderTime,
                                    'CloseOrderType' => $CloseOrderType,
                                    'liveClassLink' => $liveClassLink,
                                    'registerLimit' => $registerLimit,
                                    'is_zoom_class' => $is_zoom_class,
                                    'image' => $image,
                                ]);

                                if($is_zoom_class == 1) {
                                    insertIntoClass_zoom( $TrueClassInfo->id,true);
                                }
                                //// עדכון פרטי שיבוץ קבוע



                                DB::table('classstudio_dateregular')

                                    ->where('GroupNumber', $TrueClassInfo->GroupNumber)

                                    ->where('DayNum', $TrueClassInfo->DayNum)

                                    ->where('ClassTime', $TrueClassInfo->StartTime)

                                    ->where('Floor', $FloorId)

                                    ->where('CompanyNum', $CompanyNum)

                                    ->update(array('ClassTime' => $StartTime));


                                if ($ClassLimitTypes == '1') {



                                    DB::table('classstudio_date_roles')->where('ClassId', '=', $TrueClassInfo->id)->where('CompanyNum', '=', $CompanyNum)->delete();



                                    $count = $_POST['tGroups'];

                                    for ($e = 1; $e <= $count; $e++) {



                                        $ClassMemberType = @$_POST['ClassMemberType' . $e];



                                        if ($ClassMemberType != '') {



                                            $JsonMemberType = '';

                                            foreach (@$ClassMemberType as $value) {

                                                $JsonMemberType .= $value . ",";

                                            }

                                            $JsonMemberType = substr($JsonMemberType, 0, -1);



                                            $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                            if (@$MaxClientMemberShip == '') {

                                                $MaxClientMemberShip = $MaxClient;

                                            }



                                            $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                                array('CompanyNum' => $CompanyNum, 'ClassId' => $TrueClassInfo->id, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                                        }





                                    }



                                } else {

                                    DB::table('classstudio_date_roles')->where('ClassId', '=', $TrueClassInfo->id)->where('CompanyNum', '=', $CompanyNum)->delete();

                                }





                            }





                        }





                    }



                }


                DB::table('templistmember')->where('GroupNumber', '=', $FixGroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();





                json_message();


            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddNewClientPopUp - Edit



        case 'AddNewClientPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ClientId' => $_POST['ClientId'], 'ClassId' => $_POST['ClassId']),

                array('ClientId' => 'Required', 'ClassId' => 'Required')

            );



            if ($validator->passes()) {



                $WatingListSort = '0';

                $ClientId = $_POST['ClientId'];

                $ClassId = $_POST['ClassId'];

                $ActivityId = @$_POST['ActivityId'];

                $DeviceId = @$_POST['DeviceId'];

                $Remarks = @$_POST['Remarks'];

                $WatingListSort = '0';

                $TestClass = '1';

                if (@$DeviceId == '') {

                    $DeviceId = '0';

                }



                if (@$ActivityId == '') {

                    json_message(lang('select_membership_booking_ajax'), false);

                    exit;

                }



                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassId)->first();

                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();

                $TrueClientId = $ActivityInfo->TrueClientId;

                $FixClientId = $ActivityInfo->ClientId;





                $ItemId = $ActivityInfo->ItemId;

                $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ItemId, $ClassInfo->ClassNameType);
                if ($CheckItemsRole) {
                    $TrueClasessFinal = $CheckItemsRole->GroupId;
                }

                if (@$TrueClasessFinal == '') {

                    json_message(lang('membership_settings_error_ajax'), false);

                    exit;

                }





                //// בדיקת לקוח קיים בשיעור

                if ($TrueClientId == '0' || $ClientId == $FixClientId) {

                    $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('TrueClientId', '=', '0')->first();

                } else {

                    $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('TrueClientId', '=', $ClientId)->first();

                }





                if (@$CheckClientClass->id != '') {

                    json_message(lang('double_booking_error_ajax'), false);

                    exit;

                }





                //// בדיקת הגדרות שיעור





                $FloorInfo = DB::table('sections')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassInfo->Floor)->first();



                $ReminderStatus = $ClassInfo->SendReminder;

                $TypeReminder = $ClassInfo->TypeReminder;

                $TimeReminder = $ClassInfo->TimeReminder;

                $CancelLaw = $ClassInfo->CancelLaw;

                $CancelDay = $ClassInfo->CancelDay;

                $CancelDayMinus = $ClassInfo->CancelDayMinus;

                $CancelDayName = $ClassInfo->CancelDayName;

                $CancelTillTime = $ClassInfo->CancelTillTime;

                $ClassName = $ClassInfo->ClassName;

                $ClassNameType = $ClassInfo->ClassNameType;

                $ClassDate = $ClassInfo->StartDate;

                $ClassStartTime = $ClassInfo->StartTime;

                $ClassEndTime = $ClassInfo->EndTime;





                if ($ReminderStatus == '1') {

                    $ReminderStatus = '2';

                }





                if ($CancelLaw == '1') {

                    $CancelDate = $ClassDate;

                    $CancelDay = '';

                    $CancelTime = $CancelTillTime;

                } else if ($CancelLaw == '2') {

                    $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                    $CancelDay = '';

                    $CancelTime = $CancelTillTime;

                } else if ($CancelLaw == '3') {

                    $CancelDayNum = '-' . $CancelDayMinus . ' day';

                    $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));

                    $CancelDay = $CancelDayName;

                    $CancelTime = $CancelTillTime;

                } else if ($CancelLaw == '4') {

                    $CancelDate = '';

                    $CancelDay = '';

                    $CancelTime = '';

                } else if ($CancelLaw == '5') {

                    $CancelDate = '';

                    $CancelDay = '';

                    $CancelTime = '';

                }



                $CancelJson = '';

                $CancelJson .= '{"data": [';

                $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw . '"}';

                $CancelJson .= ']}';



                if ($TypeReminder == '1') {

                    $ReminderDate = $ClassDate;

                } else {

                    $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                }



                /// בדיקת הגדרות אפליקציה



                $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן

                $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות

                $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא

                $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי

                $SendSMSWeb = $AppSettings->SendSMS;





                if ($Watinglist == '2') {

                    $TimeAutoWatinglist = null;

                    $StatusTimeAutoWatinglist = '1';

                } else {

                    $TimeAutoWatinglist = null;

                    $StatusTimeAutoWatinglist = '0';

                }





                if ($DifrentTime == '1') {



                    $ItemsMin = '-' . $DifrentTimeMin . ' minutes';

                    $time = strtotime($ClassStartTime);

                    $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));

                    $ChangeClassStatus = '0';

                } else {

                    $ChangeClassTime = null;

                    $ChangeClassStatus = '1';

                }





                /// נתוני המנוי



                $Department = $ActivityInfo->Department;

                $MemberShip = $ActivityInfo->MemberShip;

                $ItemText = $ActivityInfo->ItemText;

                $LimitClass = $ActivityInfo->LimitClass;



                /// נתוני מנוי פנימי

                $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();



                $StartTime = $MemberInfo->StartTime;

                $EndTime = $MemberInfo->EndTime;

                $CancelLImit = $MemberInfo->CancelLImit;

                $ClassSameDay = $MemberInfo->ClassSameDay;

                $BalanceClass = $MemberInfo->BalanceClass;



                $LimitClassMorning = $MemberInfo->LimitClassMorning;

                $LimitClassEvening = $MemberInfo->LimitClassEvening;

                $LimitClassMonth = $MemberInfo->LimitClassMonth;



                $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;



                /// בדיקת מצב שיעור וקביעת סטטוס ראשוני



                $ClassCount = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();



                if ($ClassCount >= $ClassInfo->MaxClient) {

                    $Status = '9';    /// ממתין ברשימת המתנה

                    $StatusCount = '1';

                    /// עדכון רשימת המתנה
                    $WatingListSort = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('Status', '=', '9')->where('CompanyNum', $CompanyNum)->max('WatingListSort');
                    $WatingListSort++;

                } else {

                    $Status = '1';    /// שובץ פעיל/מומש

                    $StatusCount = '0';



                    if ($Department == '2') {



                        ////  ניקוב כרטיסיה



                        $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                        DB::table('client_activities')

                            ->where('id', $ActivityInfo->id)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                    } else if ($Department == '3') {



                        $Status = '11';    /// שיעור ניסיון

                        $StatusCount = '0';

                        $TestClass = '2';



                        ////  ניקוב כרטיסיה



                        $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                        DB::table('client_activities')

                            ->where('id', $ActivityInfo->id)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                    }



                }



                $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();

                $StatusTitle = $CheckNewStatus->Title;

                $UserName = Auth::user()->display_name;



                $StatusJson = '';

                $StatusJson .= '{"data": [';

                $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';

                $StatusJson .= ']}';



                //// חישוב שבוע בשנה

                $WeekNumber = date("Wo", strtotime("+1 day",strtotime($ClassInfo->StartDate)));



//            if (Auth::user()->id=='1') {

//

//            $ShowMe = array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'ClassId' => $ClassId, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'Remarks' => $Remarks, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassTime' => $ChangeClassTime, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $ClassInfo->GuideId, 'FloorId' => $ClassInfo->Floor, 'WatingListSort' => $WatingListSort, 'GroupNumber' => $ClassInfo->GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $ClassInfo->DayNum, 'Day' => $ClassInfo->Day, 'TrueClasess' => @$TrueClasessFinal);

//

//            json_message($ShowMe, false);

//            exit;

//

//            }





                $ChangeClassDate = null;



                if ($DifrentTime == '1') {

                    $ClassDateDifrent = $ClassDate . ' ' . $ClassStartTime;

                    $CancelDayNum = '-' . $DifrentTimeMin . ' minutes';

                    $ChangeClassDate = date("Y-m-d H:i:s", strtotime($CancelDayNum, strtotime($ClassDateDifrent)));



                }





                //// שמירת נתונים בטבלה
                if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                    $AddClassDesk = DB::table('classstudio_act')->insertGetId(
                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'ClassId' => $ClassId, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'Remarks' => $Remarks, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $ClassInfo->GuideId, 'FloorId' => $ClassInfo->Floor, 'WatingListSort' => $WatingListSort, 'GroupNumber' => $ClassInfo->GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $ClassInfo->DayNum, 'Day' => $ClassInfo->Day, 'TrueClasess' => $TrueClasessFinal, 'ChangeClassDate' => $ChangeClassDate, 'FixClientId' => $ClientId));
                } else {
                    $AddClassDesk = DB::table('classstudio_act')->insertGetId(
                        array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'TrueClientId' => $ClientId, 'ClassId' => $ClassId, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'Remarks' => $Remarks, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $ClassInfo->GuideId, 'FloorId' => $ClassInfo->Floor, 'WatingListSort' => $WatingListSort, 'GroupNumber' => $ClassInfo->GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $ClassInfo->DayNum, 'Day' => $ClassInfo->Day, 'TrueClasess' => $TrueClasessFinal, 'ChangeClassDate' => $ChangeClassDate, 'FixClientId' => $ClientId));
                }
                GoogleCalendarService::checkChangedAndSync($AddClassDesk,[], true);

                //// עדכון שיעור ברשימת משתתפים

                if ($ClassInfo) {
                    $update = ClassStudioDate::updateClassRegistersCount($ClassId, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                }

                $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();
//
//                $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();
//
//
//
//                $ClientRegisterRegular1 = DB::table('classstudio_dateregular')
//
//                    ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '1')->where('StatusType', '=', '12')
//
//                    ->count();
//
//                $ClientRegisterRegularWating1 = DB::table('classstudio_dateregular')
//
//                    ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '1')->where('StatusType', '=', '9')
//
//                    ->count();
//
//
//
//
//
//                $ClientRegisterRegular2 = DB::table('classstudio_dateregular')
//
//                    ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $ClassInfo->StartDate)->where('StatusType', '=', '12')
//
//                    ->count();
//
//                $ClientRegisterRegularWating2 = DB::table('classstudio_dateregular')
//
//                    ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $ClassInfo->GroupNumber)->where('DayNum', '=', $ClassInfo->DayNum)->where('ClassTime', '=', $ClassInfo->StartTime)->where('Floor', '=', $ClassInfo->Floor)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $ClassInfo->StartDate)->where('StatusType', '=', '9')
//
//                    ->count();
//
//
//
//                $ClientRegisterRegular = $ClientRegisterRegular1 + $ClientRegisterRegular2;
//
//                $ClientRegisterRegularWating = $ClientRegisterRegularWating1 + $ClientRegisterRegularWating2;
//
//
//
//
//
//                DB::table('classstudio_date')
//
//                    ->where('CompanyNum', '=', $CompanyNum)
//
//                    ->where('id', '=', $ClassId)
//
//                    ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList, 'ClientRegisterRegular' => $ClientRegisterRegular, 'ClientRegisterRegularWating' => $ClientRegisterRegularWating));



                ///// Class Log

                DB::table('classlog')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'ClassId' => $ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                /////////////////////////////////////////





                json_message(array('ClassId' => $ClassId));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClientRemarksPopUp - Edit



        case 'AddClientRemarksPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ActivityId' => $_POST['ActivityId'], 'ClientId' => $_POST['ClientId']),

                array('ActivityId' => 'Required', 'ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $ClientTRRemarks = $_POST['ClientTRRemarks'];

                $ShowRemarks = $_POST['ShowRemarks'];



                if (@$ClientTRRemarks == '') {

                    json_message(lang('add_class_note_ajax'), false);

                    exit;

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $ClassContent = DB::table('classstudio_act')->where('id', '=', $ActivityId)->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                /** @var ClassStudioAct $classAct */
                $classAct = ClassStudioAct::find($ActivityId);
                if ($classAct->ClientId == $ClientId) {
                    $classAct->update([
                        'Remarks' => $ClientTRRemarks,
                        'ShowRemarks' => $ShowRemarks,
                    ]);
                }

                if (@$ClassContent->Remarks == '') {

                    $Content = lang('log_add_note_class_ajax').' '.$ClientTRRemarks;

                } else {

                    $Content = lang('log_edit_last_note_class_ajax').' '.$ClassContent->Remarks;

                }





                CreateLogMovement('<i class="fas fa-edit"></i> '.$Content, $ClientId);



                if ($ShowRemarks == '0') {

                    $IconStatus = '<i class="fas fa-eye-slash"></i>';

                } else {

                    $IconStatus = '<i class="fas fa-eye"></i>';

                }



                $ClientTRRemarks = $ClientTRRemarks . ' ' . $IconStatus;





                json_message(array('ActivityId' => $ActivityId, 'Remarks' => $ClientTRRemarks));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // AddClientDevicePopUp - Edit



        case 'AddClientDevicePopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ActivityId' => $_POST['ActivityId'], 'ClientId' => $_POST['ClientId']),

                array('ActivityId' => 'Required', 'ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $DeviceId = $_POST['DeviceId'];



                if (@$DeviceId == '') {

                    json_message(lang('select_class_equipment_ajax'), false);

                    exit;

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $ClassContent = DB::table('classstudio_act')->where('id', '=', $ActivityId)->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();



                $DeviceTitle = DB::table('numberssub')->where('CompanyNum', $CompanyNum)->where('id', '=', $DeviceId)->first();

                $OldDeviceTitle = DB::table('numberssub')->where('CompanyNum', $CompanyNum)->where('id', '=', $ClassContent->DeviceId)->first();



                DB::table('classstudio_act')

                    ->where('id', $ActivityId)

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('DeviceId' => $DeviceId));



                if (@$OldDeviceTitle->DeviceId == '' || @$OldDeviceTitle->DeviceId == '0') {

                    $Content = lang('log_set_new_equipment_ajax').' '.@$OldDeviceTitle->Name;

                } else {

                    $Content = lang('log_edit_equipment_last_ajax').' '.@$DeviceTitle->Name;

                }





                CreateLogMovement('<i class="fas fa-edit"></i> '.$Content, $ClientId);





                json_message(array('ActivityId' => $ActivityId, 'DeviceTitle' => $DeviceTitle->Name));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClientClassInsetedPopUp - Edit



        case 'AddClientClassInsetedPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ActivityId' => $_POST['ActivityId'], 'ClientId' => $_POST['ClientId']),

                array('ActivityId' => 'Required', 'ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $ForWhichReClass = @$_POST['ForWhichReClass'];

                $ClientReClassReason = @$_POST['ClientReClassReason'];



                if (@$ForWhichReClass == '' || @$ClientReClassReason == '') {

                    json_message(lang('set_class_reason_ajax'), false);

                    exit;

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('classstudio_act')

                    ->where('id', $ActivityId)

                    ->where('ClientId', $ClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ReClass' => '2', 'ForWhichReClass' => $ForWhichReClass, 'ReClassReason' => $ClientReClassReason));





                $Content = lang('complete_class_ajax').' '.$ClientReClassReason;

                CreateLogMovement('<i class="fas fa-edit"></i> '.$Content, $ClientId);





                json_message(array('ActivityId' => $ActivityId, 'ClassTitle' => $ClientReClassReason));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClientAddClass - Edit

        case 'AddClientAddClass':



            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId']),
                array('ClientId' => 'Required')
            );

            if ($validator->passes()) {

                $ClientId = $_POST['ClientId'];

                $ClientAddClassType = $_POST['ClientAddClassType'];

                $ClientAddClassDate = @$_POST['ClientAddClassDate'];

                $ClientAddClassTillDate = @$_POST['ClientAddClassTillDate'];

                $ClientAddClassId = @$_POST['ClientAddClassId'];

                $ActivityId = @$_POST['ActivityId'];

                $Check = 'True';

                $WatingListSort = '0';

                $DeviceId = @$_POST['DeviceId'];

                $Remarks = @$_POST['ClientReClassReason'];

                $ShowRemarks = @$_POST['ShowRemarks'];



                $ClassStatus = @$_POST['ClassStatus'];





                /// בדיקת תאריך ושעת השיעור



                $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClientAddClassId)->first();



                $ClassStartDate = $ClassInfo->StartDate;

                $ClassStartTime = $ClassInfo->StartTime;

                $ClassDay = $ClassInfo->Day;

                $ClassName = $ClassInfo->ClassName;

                $DayNum = $ClassInfo->DayNum;

                $ClassFloor = $ClassInfo->Floor;

                $GroupNumber = $ClassInfo->GroupNumber;

                $ClassNameType = $ClassInfo->ClassNameType;



                if ($ClassStartDate <= date('Y-m-d')) {



                    if ($ClassStartTime <= date('H:i')) {

                        $Check = 'False';

                    } else {

                        $Check = 'True';

                    }



                } else {

                    $Check = 'True';

                }



                if ($ClassInfo->ClassDevice != '0' && $DeviceId == '') {

                    json_message(lang('select_equipment_ajax'), false);

                    exit;

                }



                if ($ActivityId == '') {

                    json_message(lang('select_membership_booking_ajax'), false);

                    exit;

                } elseif ($ClientAddClassId == '') {

                    json_message(lang('select_class_ajax'), false);

                    exit;

                } elseif ($ClientAddClassType == '1' && $Check == 'False') {

                    json_message(lang('error_booking_late_ajax'), false);

                    exit;

                } elseif(($ClientAddClassType == '2' && $ClientAddClassDate == '') || ($ClientAddClassType == '2' && $ClientAddClassTillDate == '')) {

                    json_message(lang('select_date_range_ajax'), false);

                    exit;

                } elseif ($ClientAddClassType == '3' && $ClientAddClassDate == '') {

                    json_message(lang('select_date_for_booking_ajax'), false);

                    exit;

                }

                $Dates = date('Y-m-d H:i:s');
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $TrueClasessFinal = '';
                $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                $TrueClientId = $ActivityInfo->TrueClientId;
                $FixClientId = $ActivityInfo->ClientId;
                $ItemId = $ActivityInfo->ItemId;

                $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ItemId, $ClassInfo->ClassNameType);
                if ($CheckItemsRole) {
                    $TrueClasessFinal = $CheckItemsRole->GroupId;
                }



                if ($TrueClasessFinal == '') {

                    json_message(lang('set_class_for_membership_ajax'), false);

                    exit;
                }

                /// שיבוץ חד פעמי

                if ($ClientAddClassType == '1') {



                    //// בדיקת לקוח קיים בשיעור

                    if ($TrueClientId == '0' || $ClientId == $FixClientId) {

                        $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassInfo->id)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('TrueClientId', '=', '0')->first();

                    } else {

                        $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassInfo->id)->where('CompanyNum', '=', $CompanyNum)->where('TrueClientId', '=', $ClientId)->first();

                    }





                    if ($CheckClientClass) {

                        json_message(lang('client_booked_ajax'), false);

                        exit;

                    }





                    $ClassId = $ClassInfo->id;

                    $TestClass = '1';

                    $WatingListSort = '0';



                    //// בדיקת הגדרות שיעור



                    $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassId)->first();

                    $FloorInfo = DB::table('sections')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassInfo->Floor)->first();



                    $ReminderStatus = $ClassInfo->SendReminder;

                    $TypeReminder = $ClassInfo->TypeReminder;

                    $TimeReminder = $ClassInfo->TimeReminder;

                    $CancelLaw = $ClassInfo->CancelLaw;

                    $CancelDay = $ClassInfo->CancelDay;

                    $CancelDayMinus = $ClassInfo->CancelDayMinus;

                    $CancelDayName = $ClassInfo->CancelDayName;

                    $CancelTillTime = $ClassInfo->CancelTillTime;

                    $ClassName = $ClassInfo->ClassName;

                    $ClassNameType = $ClassInfo->ClassNameType;

                    $ClassDate = $ClassInfo->StartDate;

                    $ClassStartTime = $ClassInfo->StartTime;

                    $ClassEndTime = $ClassInfo->EndTime;





                    if ($ReminderStatus == '1') {

                        $ReminderStatus = '2';

                    }





                    if ($CancelLaw == '1') {

                        $CancelDate = $ClassDate;

                        $CancelDay = '';

                        $CancelTime = $CancelTillTime;

                    } elseif ($CancelLaw == '2') {

                        $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                        $CancelDay = '';

                        $CancelTime = $CancelTillTime;

                    } elseif ($CancelLaw == '3') {

                        $CancelDayNum = '-' . $CancelDayMinus . ' day';

                        $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));

                        $CancelDay = $CancelDayName;

                        $CancelTime = $CancelTillTime;

                    } elseif ($CancelLaw == '4') {

                        $CancelDate = '';

                        $CancelDay = '';

                        $CancelTime = '';

                    } elseif ($CancelLaw == '5') {

                        $CancelDate = '';

                        $CancelDay = '';

                        $CancelTime = '';

                    }



                    $CancelJson = '';

                    $CancelJson .= '{"data": [';

                    $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw . '"}';

                    $CancelJson .= ']}';



                    if ($TypeReminder == '1') {

                        $ReminderDate = $ClassDate;

                    } else {

                        $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                    }



                    /// בדיקת הגדרות אפליקציה



                    $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן

                    $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות

                    $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא

                    $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי

                    $SendSMSWeb = $AppSettings->SendSMS;





                    if ($Watinglist == '2') {

                        $TimeAutoWatinglist = null;

                        $StatusTimeAutoWatinglist = '1';

                    } else {

                        $TimeAutoWatinglist = null;

                        $StatusTimeAutoWatinglist = '0';

                    }





                    if ($DifrentTime == '1') {



                        $ItemsMin = '-' . $DifrentTimeMin . ' minutes';

                        $time = strtotime($ClassStartTime);

                        $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));

                        $ChangeClassStatus = '0';

                    } else {

                        $ChangeClassTime = '';

                        $ChangeClassStatus = '1';

                    }





                    /// נתוני המנוי





                    $Department = $ActivityInfo->Department;

                    $MemberShip = $ActivityInfo->MemberShip;

                    $ItemText = $ActivityInfo->ItemText;

                    $LimitClass = $ActivityInfo->LimitClass;



                    /// נתוני מנוי פנימי

                    $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();



                    $StartTime = $MemberInfo->StartTime;

                    $EndTime = $MemberInfo->EndTime;

                    $MemberShip = $MemberInfo->MemberShip;

                    $CancelLImit = $MemberInfo->CancelLImit;

                    $ClassSameDay = $MemberInfo->ClassSameDay;

                    $BalanceClass = $MemberInfo->BalanceClass;



                    $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;





                    /// בדיקת מצב שיעור וקביעת סטטוס ראשוני



                    $ClassCount = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();





                    if ($ClassCount >= $ClassInfo->MaxClient) {

                        $Status = 9;    /// ממתין ברשימת המתנה

                        $StatusCount = 1;

                        /// עדכון רשימת המתנה
                        $WatingListSort = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('Status', '=', '9')->where('CompanyNum', $CompanyNum)->max('WatingListSort');
                        $WatingListSort++;
                    } else {

                        $Status = 1;    /// שובץ פעיל/מומש

                        $StatusCount = 0;



                        if ($Department == '2') {



                            ////  ניקוב כרטיסיה



                            $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;


                            DB::table('client_activities')

                                ->where('id', $ActivityId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                        } elseif ($Department == '3') {



                            $Status = 11;    /// שיעור נסיון

                            $StatusCount = 0;

                            $TestClass = 2;

                            ////  ניקוב כרטיסיה



                            $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;


                            DB::table('client_activities')
                                ->where('id', $ActivityId)
                                ->where('CompanyNum', $CompanyNum)
                                ->update(array('TrueBalanceValue' => $TrueBalanceValue));


                        }





                    }



                    $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();

                    $StatusTitle = $CheckNewStatus->Title;

                    $UserName = $UserName = Auth::user()->display_name;



                    $StatusJson = '';
                    $StatusJson .= '{"data": [';
                    $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';
                    $StatusJson .= ']}';

                    // תיקון חישוב שבוע בשנה
                    $WeekNumber = date("Wo", strtotime("+1 day",strtotime($ClassInfo->StartDate)));
                    $ChangeClassDate = null;

                    if ($DifrentTime == '1') {

                        $ClassDateDifrent = $ClassDate . ' ' . $ClassStartTime;
                        $CancelDayNum = '-' . $DifrentTimeMin . ' minutes';
                        $ChangeClassDate = date("Y-m-d H:i:s", strtotime($CancelDayNum, strtotime($ClassDateDifrent)));
                    }



                    //// שמירת נתונים בטבלה
                    if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                        $AddClassDesk = DB::table('classstudio_act')->insertGetId(
                            array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'ClassId' => $ClassId, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'Remarks' => $Remarks, 'ShowRemarks' => $ShowRemarks, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $ClassInfo->GuideId, 'FloorId' => $ClassInfo->Floor, 'WatingListSort' => $WatingListSort, 'GroupNumber' => $ClassInfo->GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'ChangeClassDate' => $ChangeClassDate, 'FixClientId' => $ClientId));
                    } else {
                        $AddClassDesk = DB::table('classstudio_act')->insertGetId(
                            array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'TrueClientId' => $ClientId, 'ClassId' => $ClassId, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'Remarks' => $Remarks, 'ShowRemarks' => $ShowRemarks, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $ClassInfo->GuideId, 'FloorId' => $ClassInfo->Floor, 'WatingListSort' => $WatingListSort, 'GroupNumber' => $ClassInfo->GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'ChangeClassDate' => $ChangeClassDate, 'FixClientId' => $ClientId));
                    }
                    GoogleCalendarService::checkChangedAndSync($AddClassDesk, [], true);

                    //// עדכון שיעור ברשימת משתתפים
                    if ($ClassInfo) {
                        $update = ClassStudioDate::updateClassRegistersCount($ClassId, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                    }
                    $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                    ///// Class Log
                    DB::table('classlog')->insertGetId(
                        array('CompanyNum' => $CompanyNum, 'ClassId' => $ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));


                } elseif ($ClientAddClassType == '2') {


                    $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                    $TrueClientId = $ActivityInfo->TrueClientId;
                    $FixClientId = $ActivityInfo->ClientId;
                    /// בדיקה אם כבר קיים שיבוץ לשיעור זה בעבר
                    ///
                    $CheckRegular = DB::table('classstudio_dateregular')
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('ClientId', '=', $ClientId)
//                        ->where('ClassDay', '=', $ClassDay)
//                        ->where('ClassTime', '=', $ClassStartTime)
//                        ->where('Floor', '=', $ClassFloor)
                        ->where('GroupNumber', '=', $GroupNumber)
                        ->where('Status',0)
                        ->where(
                            function ($query)  {
                                $query->whereNull('EndDate')
                                    ->orWhere('EndDate', '>=', date('Y-m-d'));
                            }
                        )
                        ->first();

                    if ($CheckRegular) {
                        json_message(lang('clinet_permanent_booking_ajax'), false);
                        exit;
                    }

                    /// שיבוץ מתאמן
                    $InsertRegular = DB::table('classstudio_dateregular')->insertGetId(array(
                            'CompanyNum' => $CompanyNum,
                            'ClientId' => $ClientId,
                            'Dates' => $Dates,
                            'ClassDay' => $ClassDay,
                            'ClassTime' => $ClassStartTime,
                            'Floor' => $ClassFloor,
                            'DayNum' => $DayNum,
                            'ClassName' => $ClassName,
                            'ClassId' => $ClassNameType,
                            'GroupNumber' => $GroupNumber,
                            'ClientActivitiesId' => $ActivityId,
                            'MemberShipType' => $ActivityInfo->MemberShip,
                            'RegularClassType' => '2',
                            'StartDate' => $ClientAddClassDate,
                            'EndDate' => $ClientAddClassTillDate,
                            'StatusType' => $ClassStatus));

                    $RegularClassId = $InsertRegular;

                    // בדיקת טווח תאריכים לשיעור
                    $ClassDatesInfos = DB::table('classstudio_date')
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->whereBetween('StartDate', array($ClientAddClassDate, $ClientAddClassTillDate))
//                        ->where('Day', '=', $ClassDay)
//                        ->where('Floor', '=', $ClassFloor)
                        ->where('GroupNumber', '=', $GroupNumber)
                        ->orderBy('StartDate', 'ASC')
                        ->limit(30)
                        ->get();


                    foreach ($ClassDatesInfos as $ClassDatesInfo) {
                        //// בדיקת לקוח קיים בשיעור
                        $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                        $TrueClientId = $ActivityInfo->TrueClientId;
                        $FixClientId = $ActivityInfo->ClientId;

                        if ($TrueClientId != 0 || $ClientId != $FixClientId) {
                            $CheckClientClass = DB::table('classstudio_act')
                                ->where('ClassId', '=', $ClassDatesInfo->id)
                                ->where('CompanyNum', '=', $CompanyNum)
                                ->where('TrueClientId', '=', $ClientId)
                                ->first();
                        } else {
                            $CheckClientClass = DB::table('classstudio_act')
                                ->where('ClassId', '=', $ClassDatesInfo->id)
                                ->where('CompanyNum', '=', $CompanyNum)
                                ->where('ClientId', '=', $ClientId)
                                ->where('TrueClientId', '=', '0')
                                ->first();
                        }

                        $ClassId = $ClassDatesInfo->id;

                        //// בדיקת הגדרות שיעור
                        $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassId)->first();
                        $FloorInfo = DB::table('sections')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassInfo->Floor)->first();


                        $ReminderStatus = $ClassInfo->SendReminder;
                        $TypeReminder = $ClassInfo->TypeReminder;
                        $TimeReminder = $ClassInfo->TimeReminder;
                        $CancelLaw = $ClassInfo->CancelLaw;
                        $CancelDay = $ClassInfo->CancelDay;
                        $CancelDayMinus = $ClassInfo->CancelDayMinus;
                        $CancelDayName = $ClassInfo->CancelDayName;
                        $CancelTillTime = $ClassInfo->CancelTillTime;
                        $ClassName = $ClassInfo->ClassName;
                        $ClassNameType = $ClassInfo->ClassNameType;
                        $ClassDate = $ClassInfo->StartDate;
                        $ClassStartTime = $ClassInfo->StartTime;
                        $ClassEndTime = $ClassInfo->EndTime;


                        if ($ReminderStatus == '1') {

                            $ReminderStatus = '2';

                        }





                        if ($CancelLaw == '1') {

                            $CancelDate = $ClassDate;

                            $CancelDay = '';

                            $CancelTime = $CancelTillTime;

                        } elseif ($CancelLaw == '2') {

                            $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                            $CancelDay = '';

                            $CancelTime = $CancelTillTime;

                        } elseif ($CancelLaw == '3') {

                            $CancelDayNum = '-' . $CancelDayMinus . ' day';

                            $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));

                            $CancelDay = $CancelDayName;

                            $CancelTime = $CancelTillTime;

                        } elseif ($CancelLaw == '4') {

                            $CancelDate = '';

                            $CancelDay = '';

                            $CancelTime = '';

                        } elseif ($CancelLaw == '5') {

                            $CancelDate = '';

                            $CancelDay = '';

                            $CancelTime = '';

                        }



                        $CancelJson = '';

                        $CancelJson .= '{"data": [';

                        $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw . '"}';

                        $CancelJson .= ']}';



                        if ($TypeReminder == '1') {

                            $ReminderDate = $ClassDate;

                        } else {

                            $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                        }



                        /// בדיקת הגדרות אפליקציה



                        $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן

                        $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות

                        $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא

                        $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי

                        $SendSMSWeb = $AppSettings->SendSMS;





                        if ($Watinglist == '2') {

                            $TimeAutoWatinglist = null;

                            $StatusTimeAutoWatinglist = '1';

                        } else {

                            $TimeAutoWatinglist = null;

                            $StatusTimeAutoWatinglist = '0';

                        }





                        if ($DifrentTime == '1') {



                            $ItemsMin = '-' . $DifrentTimeMin . ' minutes';

                            $time = strtotime($ClassStartTime);

                            $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));

                            $ChangeClassStatus = '0';

                        } else {

                            $ChangeClassTime = '';

                            $ChangeClassStatus = '1';

                        }

                        $Department = $ActivityInfo->Department;
                        $MemberShip = $ActivityInfo->MemberShip;
                        $ItemText = $ActivityInfo->ItemText;
                        $LimitClass = $ActivityInfo->LimitClass;



                        /// נתוני מנוי פנימי

                        $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();
                        $StartTime = $MemberInfo->StartTime;
                        $EndTime = $MemberInfo->EndTime;
                        $MemberShip = $MemberInfo->MemberShip;
                        $CancelLImit = $MemberInfo->CancelLImit;
                        $ClassSameDay = $MemberInfo->ClassSameDay;
                        $BalanceClass = $MemberInfo->BalanceClass;



                        $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;

                        if ($ClassStatus == 12) {
                            $Status = 12;    /// סטטוס שיבוץ קבוע
                            $StatusCount = 0;
                        } else {
                            $Status = 9;    /// סטטוס שיבוץ ממתין קבוע
                            $StatusCount = 1;
                        }


                        $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();
                        $StatusTitle = $CheckNewStatus->Title;
                        $UserName = Auth::user()->display_name;

                        $StatusJson = '';
                        $StatusJson .= '{"data": [';
                        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';
                        $StatusJson .= ']}';

                        // תיקון חישוב שבוע בשנה
                        $WeekNumber = date("Wo", strtotime("+1 day",strtotime($ClassInfo->StartDate)));
                        $ChangeClassDate = null;


                        if ($DifrentTime == '1') {
                            $ClassDateDifrent = $ClassDate . ' ' . $ClassStartTime;
                            $CancelDayNum = '-' . $DifrentTimeMin . ' minutes';
                            $ChangeClassDate = date("Y-m-d H:i:s", strtotime($CancelDayNum, strtotime($ClassDateDifrent)));
                        }

                        //// שמירת נתונים בטבלה
                        if($CheckClientClass) {
                            $studioActObj = new ClassStudioAct($CheckClientClass->id);
                            $activityObj = new ClientActivities($CheckClientClass->ClientActivitiesId);
                            $cardNum = $activityObj->CardNumber ?? 0;
                            ClientActivities::CancelClassReturnBalance($studioActObj, $CompanyNum, $Status);
                            $transferred = $activityObj->id != $ActivityId;
                            $StatusJson = $studioActObj->getTransferStatusJson($Status, $cardNum, false, $transferred);

                            $arr = array(
                                'ClassNameType' => $ClassNameType,
                                'ClassName' => $ClassName,
                                'ClassDate' => $ClassDate,
                                'ClassStartTime' => $ClassStartTime,
                                'ClassEndTime' => $ClassEndTime,
                                'ClientActivitiesId' => $ActivityId,
                                'Department' => $Department,
                                'MemberShip' => $MemberShip,
                                'ItemText' => $ItemText,
                                'WeekNumber' => $WeekNumber,
                                'DeviceId' => $DeviceId,
                                'Remarks' => $Remarks,
                                'ShowRemarks' => $ShowRemarks,
                                'StatusCount' => $StatusCount,
                                'Status' => $Status,
                                'StatusJson' => $StatusJson,
                                'ActStatus' => 0,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'CancelJson' => $CancelJson,
                                'ReminderStatus' => $ReminderStatus,
                                'ReminderDate' => $ReminderDate,
                                'ReminderTime' => $TimeReminder,
                                'WatinglistMin' => $WatinglistMin,
                                'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                'SendSMSWeb' => $SendSMSWeb,
                                'ChangeClassStatus' => $ChangeClassStatus,
                                'GuideId' => $ClassInfo->GuideId,
                                'FloorId' => $ClassInfo->Floor,
                                'WatingListSort' => $WatingListSort,
                                'GroupNumber' => $ClassInfo->GroupNumber,
                                'DayNum' => $DayNum,
                                'Day' => $ClassDay,
                                'TrueClasess' => $TrueClasessFinal,
                                'RegularClass' => 1,
                                'RegularClassId' => $RegularClassId,
                                'ChangeClassDate' => $ChangeClassDate,
                            );
                            $update = $studioActObj->update($arr);

                        } else {
                            if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                                $AddClassDesk = DB::table('classstudio_act')->insertGetId(array(
                                        'CompanyNum' => $CompanyNum,
                                        'ClientId' => $ClientId,
                                        'TrueClientId' => '0',
                                        'ClassId' => $ClassId,
                                        'ClassNameType' => $ClassNameType,
                                        'ClassName' => $ClassName,
                                        'ClassDate' => $ClassDate,
                                        'ClassStartTime' => $ClassStartTime,
                                        'ClassEndTime' => $ClassEndTime,
                                        'ClientActivitiesId' => $ActivityId,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip,
                                        'ItemText' => $ItemText,
                                        'WeekNumber' => $WeekNumber,
                                        'DeviceId' => $DeviceId,
                                        'Remarks' => $Remarks,
                                        'ShowRemarks' => $ShowRemarks,
                                        'StatusCount' => $StatusCount,
                                        'Status' => $Status,
                                        'Dates' => $Dates,
                                        'UserId' => $UserId,
                                        'CancelJson' => $CancelJson,
                                        'StatusJson' => $StatusJson,
                                        'ReminderStatus' => $ReminderStatus,
                                        'ReminderDate' => $ReminderDate,
                                        'ReminderTime' => $TimeReminder,
                                        'WatinglistMin' => $WatinglistMin,
                                        'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                        'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                        'SendSMSWeb' => $SendSMSWeb,
                                        'ChangeClassStatus' => $ChangeClassStatus,
                                        'GuideId' => $ClassInfo->GuideId,
                                        'FloorId' => $ClassInfo->Floor,
                                        'WatingListSort' => $WatingListSort,
                                        'GroupNumber' => $ClassInfo->GroupNumber,
                                        'DayNum' => $DayNum,
                                        'Day' => $ClassDay,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'RegularClass' => '1',
                                        'RegularClassId' => $RegularClassId,
                                        'ChangeClassDate' => $ChangeClassDate,
                                        'FixClientId' => $ClientId));
                            } else {
                                $AddClassDesk = DB::table('classstudio_act')->insertGetId(array(
                                        'CompanyNum' => $CompanyNum,
                                        'ClientId' => $FixClientId,
                                        'TrueClientId' => $ClientId,
                                        'ClassId' => $ClassId,
                                        'ClassNameType' => $ClassNameType,
                                        'ClassName' => $ClassName,
                                        'ClassDate' => $ClassDate,
                                        'ClassStartTime' => $ClassStartTime,
                                        'ClassEndTime' => $ClassEndTime,
                                        'ClientActivitiesId' => $ActivityId,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip,
                                        'ItemText' => $ItemText,
                                        'WeekNumber' => $WeekNumber,
                                        'DeviceId' => $DeviceId,
                                        'Remarks' => $Remarks,
                                        'ShowRemarks' => $ShowRemarks,
                                        'StatusCount' => $StatusCount,
                                        'Status' => $Status,
                                        'Dates' => $Dates,
                                        'UserId' => $UserId,
                                        'CancelJson' => $CancelJson,
                                        'StatusJson' => $StatusJson,
                                        'ReminderStatus' => $ReminderStatus,
                                        'ReminderDate' => $ReminderDate,
                                        'ReminderTime' => $TimeReminder,
                                        'WatinglistMin' => $WatinglistMin,
                                        'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                        'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                        'SendSMSWeb' => $SendSMSWeb,
                                        'ChangeClassStatus' => $ChangeClassStatus,
                                        'GuideId' => $ClassInfo->GuideId,
                                        'FloorId' => $ClassInfo->Floor,
                                        'WatingListSort' => $WatingListSort,
                                        'GroupNumber' => $ClassInfo->GroupNumber,
                                        'DayNum' => $DayNum,
                                        'Day' => $ClassDay,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'RegularClass' => '1',
                                        'RegularClassId' => $RegularClassId,
                                        'ChangeClassDate' => $ChangeClassDate,
                                        'FixClientId' => $ClientId));
                            }
                            GoogleCalendarService::checkChangedAndSync($AddClassDesk, [], true);
                        }

                        //// עדכון שיעור ברשימת משתתפים

                        if ($ClassInfo) {
                            $update = ClassStudioDate::updateClassRegistersCount($ClassId, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                        }


                        ///// Class Log
                        DB::table('classlog')->insertGetId(array(
                                'CompanyNum' => $CompanyNum,
                                'ClassId' => $ClassId,
                                'ClientId' => $ClientId,
                                'Status' => $CheckNewStatus->Title,
                                'UserName' => $UserId,
                                'numOfClients' => $update['ClientRegister']));

//                        }
                    }
                } elseif ($ClientAddClassType == '3') {

                    $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                    $TrueClientId = $ActivityInfo->TrueClientId;
                    $FixClientId = $ActivityInfo->ClientId;

                    /// בדיקה אם כבר קיים שיבוץ לשיעור זה בעבר
                    $CheckRegular = DB::table('classstudio_dateregular')
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('ClientId', '=', $ClientId)
//                        ->where('ClassDay', '=', $ClassDay)
//                        ->where('ClassTime', '=', $ClassStartTime)
//                        ->where('Floor', '=', $ClassFloor)
                        ->where('GroupNumber', '=', $GroupNumber)
                        ->where('Status',0)
                        ->where(
                            function ($query)  {
                                $query->whereNull('EndDate')
                                    ->orWhere('EndDate', '>', date('Y-m-d'));
                            }
                        )->first();

                    if ($CheckRegular) {
                        json_message(lang('clinet_permanent_booking_ajax'), false);
                        exit;
                    }

                    $UserId = Auth::user()->id;
                    /// שיבוץ מתאמן

                    $InsertRegular = DB::table('classstudio_dateregular')->insertGetId(
                        array('CompanyNum' => $CompanyNum,
                            'ClientId' => $ClientId,
                            'Dates' => $Dates,
                            'ClassDay' => $ClassDay,
                            'ClassTime' => $ClassStartTime,
                            'Floor' => $ClassFloor,
                            'DayNum' => $DayNum,
                            'ClassName' => $ClassName,
                            'ClassId' => $ClassNameType,
                            'GroupNumber' => $GroupNumber,
                            'ClientActivitiesId' => $ActivityId,
                            'MemberShipType' => $ActivityInfo->MemberShip,
                            'StatusType' => $ClassStatus,
                            'RegularClassType' => '1',
                            'StartDate' => $ClientAddClassDate,
                            'UserId' => $UserId));

                    $RegularClassId = $InsertRegular;

                    $ClassDatesInfos = DB::table('classstudio_date')
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->where('StartDate', '>=', $ClientAddClassDate)
//                        ->where('Day', '=', $ClassDay)
//                        ->where('StartTime', '=', $ClassStartTime)
//                        ->where('Floor', '=', $ClassFloor)
                        ->where('Status', '=', '0')
                        ->where('GroupNumber', '=',$GroupNumber)
                        ->orderBy('StartDate', 'ASC')
                        ->limit(30)
                        ->get();

                    foreach ($ClassDatesInfos as $ClassDatesInfo) {

                        //// בדיקת לקוח קיים בשיעור
                        $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                        $TrueClientId = $ActivityInfo->TrueClientId;
                        $FixClientId = $ActivityInfo->ClientId;


                        if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                            $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassDatesInfo->id)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('TrueClientId', '=', '0')->first();
                        } else {
                            $CheckClientClass = DB::table('classstudio_act')->where('ClassId', '=', $ClassDatesInfo->id)->where('CompanyNum', '=', $CompanyNum)->where('TrueClientId', '=', $ClientId)->first();
                        }

                        $ClassId = $ClassDatesInfo->id;

                        //// בדיקת הגדרות שיעור
                        $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassId)->first();
                        $FloorInfo = DB::table('sections')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassInfo->Floor)->first();

                        $ReminderStatus = $ClassInfo->SendReminder;
                        $TypeReminder = $ClassInfo->TypeReminder;
                        $TimeReminder = $ClassInfo->TimeReminder;
                        $CancelLaw = $ClassInfo->CancelLaw;
                        $CancelDay = $ClassInfo->CancelDay;
                        $CancelDayMinus = $ClassInfo->CancelDayMinus;
                        $CancelDayName = $ClassInfo->CancelDayName;
                        $CancelTillTime = $ClassInfo->CancelTillTime;
                        $ClassName = $ClassInfo->ClassName;
                        $ClassNameType = $ClassInfo->ClassNameType;
                        $ClassDate = $ClassInfo->StartDate;
                        $ClassStartTime = $ClassInfo->StartTime;
                        $ClassEndTime = $ClassInfo->EndTime;

                        if ($ReminderStatus == '1') {
                            $ReminderStatus = '2';
                        }
                        if ($CancelLaw == '1') {
                            $CancelDate = $ClassDate;
                            $CancelDay = '';
                            $CancelTime = $CancelTillTime;
                        } elseif ($CancelLaw == '2') {
                            $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));
                            $CancelDay = '';
                            $CancelTime = $CancelTillTime;
                        } elseif ($CancelLaw == '3') {
                            $CancelDayNum = '-' . $CancelDayMinus . ' day';
                            $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));
                            $CancelDay = $CancelDayName;
                            $CancelTime = $CancelTillTime;
                        } elseif ($CancelLaw == '4') {
                            $CancelDate = '';
                            $CancelDay = '';
                            $CancelTime = '';
                        } elseif ($CancelLaw == '5') {
                            $CancelDate = '';
                            $CancelDay = '';
                            $CancelTime = '';
                        }

                        $CancelJson = '';
                        $CancelJson .= '{"data": [';
                        $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw . '"}';
                        $CancelJson .= ']}';

                        if ($TypeReminder == '1') {
                            $ReminderDate = $ClassDate;
                        } else {
                            $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));
                        }

                        /// בדיקת הגדרות אפליקציה
                        $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן
                        $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות
                        $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא
                        $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי
                        $SendSMSWeb = $AppSettings->SendSMS;

                        if ($Watinglist == '2') {
                            $TimeAutoWatinglist = null;
                            $StatusTimeAutoWatinglist = '1';
                        } else {
                            $TimeAutoWatinglist = null;
                            $StatusTimeAutoWatinglist = '0';
                        }

                        if ($DifrentTime == '1') {
                            $ItemsMin = '-' . $DifrentTimeMin . ' minutes';
                            $time = strtotime($ClassStartTime);
                            $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));
                            $ChangeClassStatus = '0';
                        } else {
                            $ChangeClassTime = '';
                            $ChangeClassStatus = '1';
                        }

                        /// נתוני המנוי
                        $Department = $ActivityInfo->Department;
                        $MemberShip = $ActivityInfo->MemberShip;
                        $ItemText = $ActivityInfo->ItemText;
                        $LimitClass = $ActivityInfo->LimitClass;

                        /// נתוני מנוי פנימי
                        $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();

                        $StartTime = $MemberInfo->StartTime;
                        $MemberShip = $MemberInfo->MemberShip;
                        $EndTime = $MemberInfo->EndTime;
                        $CancelLImit = $MemberInfo->CancelLImit;
                        $ClassSameDay = $MemberInfo->ClassSameDay;
                        $BalanceClass = $MemberInfo->BalanceClass;
                        $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;

                        /// בדיקת מצב שיעור וקביעת סטטוס ראשוני
                        //                      $ClassCount = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                        if ($ClassStatus == 12) {
                            $Status = 12;    /// סטטוס שיבוץ קבוע
                            $StatusCount = 0;
                        } else {
                            $Status = 9;    /// סטטוס שיבוץ ממתין קבוע
                            $StatusCount = 1;
                        }

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();
                        $StatusTitle = $CheckNewStatus->Title;
                        $UserName = Auth::user()->display_name;

                        $StatusJson = '';
                        $StatusJson .= '{"data": [';
                        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';
                        $StatusJson .= ']}';

                        // תיקון חישוב שבוע בשנה
                        $WeekNumber = date("Wo", strtotime("+1 day",strtotime($ClassInfo->StartDate)));
                        $ChangeClassDate = null;

                        if ($DifrentTime == '1') {
                            $ClassDateDifrent = $ClassDate . ' ' . $ClassStartTime;
                            $CancelDayNum = '-' . $DifrentTimeMin . ' minutes';
                            $ChangeClassDate = date("Y-m-d H:i:s", strtotime($CancelDayNum, strtotime($ClassDateDifrent)));
                        }

                        //// שמירת נתונים בטבלה
                        if($CheckClientClass) {
                            $studioActObj = new ClassStudioAct($CheckClientClass->id);
                            $activityObj = new ClientActivities($CheckClientClass->ClientActivitiesId);
                            $cardNum = $activityObj->CardNumber ?? 0;
                            ClientActivities::CancelClassReturnBalance($studioActObj, $CompanyNum, $Status);
                            $transferred = $activityObj->id != $ActivityId;
                            $StatusJson = $studioActObj->getTransferStatusJson($Status, $cardNum, false, $transferred);

                            $arr = array(
                                'ClassNameType' => $ClassNameType,
                                'ClassName' => $ClassName,
                                'ClassDate' => $ClassDate,
                                'ClassStartTime' => $ClassStartTime,
                                'ClassEndTime' => $ClassEndTime,
                                'ClientActivitiesId' => $ActivityId,
                                'Department' => $Department,
                                'MemberShip' => $MemberShip,
                                'ItemText' => $ItemText,
                                'WeekNumber' => $WeekNumber,
                                'DeviceId' => $DeviceId,
                                'Remarks' => $Remarks,
                                'ShowRemarks' => $ShowRemarks,
                                'StatusCount' => $StatusCount,
                                'Status' => $Status,
                                'StatusJson' => $StatusJson,
                                'ActStatus' => 0,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'CancelJson' => $CancelJson,
                                'ReminderStatus' => $ReminderStatus,
                                'ReminderDate' => $ReminderDate,
                                'ReminderTime' => $TimeReminder,
                                'WatinglistMin' => $WatinglistMin,
                                'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                'SendSMSWeb' => $SendSMSWeb,
                                'ChangeClassStatus' => $ChangeClassStatus,
                                'GuideId' => $ClassInfo->GuideId,
                                'FloorId' => $ClassInfo->Floor,
                                'WatingListSort' => $WatingListSort,
                                'GroupNumber' => $ClassInfo->GroupNumber,
                                'DayNum' => $DayNum,
                                'Day' => $ClassDay,
                                'TrueClasess' => $TrueClasessFinal,
                                'RegularClass' => 1,
                                'RegularClassId' => $RegularClassId,
                                'ChangeClassDate' => $ChangeClassDate
                            );
                            $update = $studioActObj->update($arr);

                        } else {
                            if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                                $AddClassDesk = DB::table('classstudio_act')->insertGetId(array(
                                        'CompanyNum' => $CompanyNum,
                                        'ClientId' => $ClientId,
                                        'TrueClientId' => '0',
                                        'ClassId' => $ClassId,
                                        'ClassNameType' => $ClassNameType,
                                        'ClassName' => $ClassName,
                                        'ClassDate' => $ClassDate,
                                        'ClassStartTime' => $ClassStartTime,
                                        'ClassEndTime' => $ClassEndTime,
                                        'ClientActivitiesId' => $ActivityId,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip,
                                        'ItemText' => $ItemText,
                                        'WeekNumber' => $WeekNumber,
                                        'DeviceId' => $DeviceId,
                                        'Remarks' => $Remarks,
                                        'ShowRemarks' => $ShowRemarks,
                                        'StatusCount' => $StatusCount,
                                        'Status' => $Status,
                                        'Dates' => $Dates,
                                        'UserId' => $UserId,
                                        'CancelJson' => $CancelJson,
                                        'StatusJson' => $StatusJson,
                                        'ReminderStatus' => $ReminderStatus,
                                        'ReminderDate' => $ReminderDate,
                                        'ReminderTime' => $TimeReminder,
                                        'WatinglistMin' => $WatinglistMin,
                                        'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                        'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                        'SendSMSWeb' => $SendSMSWeb,
                                        'ChangeClassStatus' => $ChangeClassStatus,
                                        'GuideId' => $ClassInfo->GuideId,
                                        'FloorId' => $ClassInfo->Floor,
                                        'WatingListSort' => $WatingListSort,
                                        'GroupNumber' => $ClassInfo->GroupNumber,
                                        'DayNum' => $DayNum,
                                        'Day' => $ClassDay,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'RegularClass' => '1',
                                        'RegularClassId' => $RegularClassId,
                                        'ChangeClassDate' => $ChangeClassDate,
                                        'FixClientId' => $ClientId));
                            } else {
                                $AddClassDesk = DB::table('classstudio_act')->insertGetId(array(
                                        'CompanyNum' => $CompanyNum,
                                        'ClientId' => $FixClientId,
                                        'TrueClientId' => $ClientId,
                                        'ClassId' => $ClassId,
                                        'ClassNameType' => $ClassNameType,
                                        'ClassName' => $ClassName,
                                        'ClassDate' => $ClassDate,
                                        'ClassStartTime' => $ClassStartTime,
                                        'ClassEndTime' => $ClassEndTime,
                                        'ClientActivitiesId' => $ActivityId,
                                        'Department' => $Department,
                                        'MemberShip' => $MemberShip,
                                        'ItemText' => $ItemText,
                                        'WeekNumber' => $WeekNumber,
                                        'DeviceId' => $DeviceId,
                                        'Remarks' => $Remarks,
                                        'ShowRemarks' => $ShowRemarks,
                                        'StatusCount' => $StatusCount,
                                        'Status' => $Status,
                                        'Dates' => $Dates,
                                        'UserId' => $UserId,
                                        'CancelJson' => $CancelJson,
                                        'StatusJson' => $StatusJson,
                                        'ReminderStatus' => $ReminderStatus,
                                        'ReminderDate' => $ReminderDate,
                                        'ReminderTime' => $TimeReminder,
                                        'WatinglistMin' => $WatinglistMin,
                                        'TimeAutoWatinglist' => $TimeAutoWatinglist,
                                        'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist,
                                        'SendSMSWeb' => $SendSMSWeb,
                                        'ChangeClassStatus' => $ChangeClassStatus,
                                        'GuideId' => $ClassInfo->GuideId,
                                        'FloorId' => $ClassInfo->Floor,
                                        'WatingListSort' => $WatingListSort,
                                        'GroupNumber' => $ClassInfo->GroupNumber,
                                        'DayNum' => $DayNum,
                                        'Day' => $ClassDay,
                                        'TrueClasess' => $TrueClasessFinal,
                                        'RegularClass' => '1',
                                        'RegularClassId' => $RegularClassId,
                                        'ChangeClassDate' => $ChangeClassDate,
                                        'FixClientId' => $ClientId));
                            }
                            GoogleCalendarService::checkChangedAndSync($AddClassDesk, [], true);
                        }


                        //// עדכון שיעור ברשימת משתתפים
                        if ($ClassInfo) {
                            $update = ClassStudioDate::updateClassRegistersCount($ClassId, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                        }
                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                        ///// Class Log
                        DB::table('classlog')->insertGetId(array(
                                'CompanyNum' => $CompanyNum,
                                'ClassId' => $ClassId,
                                'ClientId' => $ClientId,
                                'Status' => $CheckNewStatus->Title,
                                'UserName' => $UserId,
                                'numOfClients' => $ClientRegister));

                    }
                }
                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;


        // ClientRemoveRegularClass - Edit



        case 'ClientRemoveRegularClass':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('RemoveClassId' => $_POST['RemoveClassId'], 'RemoveClassClientId' => $_POST['RemoveClassClientId']),

                array('RemoveClassId' => 'Required', 'RemoveClassClientId' => 'Required')

            );



            if ($validator->passes()) {

                $RemoveClassId = $_POST['RemoveClassId'];
                $RemoveClassClientId = $_POST['RemoveClassClientId'];

                $Dates = date('Y-m-d H:i:s');
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;

                $OldClassInfo = DB::table('classstudio_dateregular')->where('id', '=', $RemoveClassId)->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $RemoveClassClientId)->first();
                $ClassInfo = DB::table('classstudio_date')->where('GroupNumber', '=', $OldClassInfo->GroupNumber)->where('CompanyNum', '=', $CompanyNum)->first();

                $UpdateClassInfos = DB::table('classstudio_act')
                    ->where('CompanyNum', '=', $CompanyNum)
                    ->where('ClassDate', '>=', date('Y-m-d'))
                    ->where('RegularClassId', '=', $RemoveClassId)
                    ->whereIn('Status', array(3, 9, 12))
                    ->where('FixClientId', '=', $RemoveClassClientId)
                    ->get();

                $Content = lang('log_removed_booking_ajax').' '.@$ClassInfo->ClassName.' '.lang('a_day_ajax').' '.@$ClassInfo->Day.' '.lang('a_hour_ajax').' '.@$ClassInfo->StartTime;
                CreateLogMovement($Content, $RemoveClassClientId);


                foreach ($UpdateClassInfos as $UpdateClassInfo) {
                    $ClassId = $UpdateClassInfo->ClassId;

                    (new ClassStudioAct())->deleteActById($UpdateClassInfo->id, $CompanyNum);
                    DB::table('classlog')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $RemoveClassClientId)->where('ClassId', '=', $UpdateClassInfo->ClassId)->delete();

                    //// עדכון שיעור ברשימת משתתפים
                    if ($UpdateClassInfo) {
                        $update = ClassStudioDate::updateClassRegistersCount($ClassId, $UpdateClassInfo->GroupNumber, $UpdateClassInfo->FloorId, $UpdateClassInfo->ClassDate);
                    }

                }
                DB::table('classstudio_dateregular')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RemoveClassId)->where('ClientId', '=', $RemoveClassClientId)->delete();

                json_message();

            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;





        // POSClientCancelDocs  - Add



        case 'POSClientCancelDocs':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId']),
                array('ClientId' => 'Required')
            );

            if ($validator->passes()) {
                $StatusPay = '';
                $TempId = $_POST['ClientId'];
                $GroupNumber = $_POST['GroupNumber'];
                $CompanyNum = Auth::user()->CompanyNum;

                /// בדיקת תשלום אשראי
                $studioSettings = Settings::getSettings($CompanyNum);
                /** @var TempReceiptPaymentClient[] $TempPaymentInfos */
                $TempPaymentInfos = TempReceiptPaymentClient::where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->get();

                foreach ($TempPaymentInfos as $TempPaymentInfo) {
                    if ($TempPaymentInfo->TypePayment != '3') {
                        $TempPaymentInfo->delete();
                        $StatusPay = lang('docs_receipt_0');
                    } elseif ($TempPaymentInfo->TypePayment == '3') {
                        //// כרטיס אשראי
                        if ($TempPaymentInfo->YaadCode != '0') {
                            $client = new Client($_POST['ClientId']);
                            $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                            $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                            $order->TempReceiptId = $TempPaymentInfo->id;
                            $order->save();

                            $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                            if ($TypeShva == 0) {
                                // Yaad
                                $tokenId = $TempPaymentInfo->TokenId;
                                $tokenModel = Token::where('id', $tokenId)->first();
                                if (!$tokenModel) {
                                    throw new InvalidArgumentException('Token is not valid');
                                }

                                $order->TokenId = $tokenModel->id;
                                $order->save();

                                try {
                                    $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                                    $CCode = $paymentResult['CCode'];

                                    $TempPaymentInfo->delete();
                                    $StatusPay = lang('docs_receipt_0');
                                } catch (\Throwable $e) {
                                    if (!is_numeric($e->getMessage())) {
                                        LoggerService::error($e, LoggerService::CATEGORY_YAADSARIG);
                                    }

                                    // we keep CCode in message for Yaad
                                    $CCode = $e->getMessage();
                                    $StatusPay = @$StatusreditCard[$CCode];

                                    if ($StatusPay == '') {
                                        $StatusNew = '2';
                                        $StatusPay = lang('unknow_error_meshulam');
                                    }
                                }
                            }
                        } else {
                            $TempPaymentInfo->delete();
                            $StatusPay = lang('docs_receipt_0');
                        }
                    }
                }

                /// מחיקת קבצים זמניים
                $TempPaymentCount = TempReceiptPaymentClient::where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->count();
                if ($TempPaymentCount == 0) {
                    $StatusNew = 1;
                } else {
                    $StatusNew = 0;
                }

                json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'StatusNew' => $StatusNew));
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;

        // POSClientCancelDocsRefound  - Add



        case 'POSClientCancelDocsRefound':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId']),
                array('ClientId' => 'Required')
            );

            if ($validator->passes()) {
                $StatusPay = '';
                $TempId = $_POST['ClientId'];
                $GroupNumber = $_POST['GroupNumber'];
                $CompanyNum = Auth::user()->CompanyNum;

                /// בדיקת תשלום אשראי
                $studioSettings = Settings::getSettings($CompanyNum);
                /** @var TempReceiptPaymentClient[] $TempPaymentInfos */
                $TempPaymentInfos = TempReceiptPaymentClient::where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->get();

                foreach ($TempPaymentInfos as $TempPaymentInfo) {
                    if ($TempPaymentInfo->TypePayment != '3') {
                        $TempPaymentInfo->delete();
                        $StatusPay = lang('docs_receipt_0');
                    } else {
                        $client = new Client($_POST['ClientId']);
                        $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                        $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                        $order->TempReceiptId = $TempPaymentInfo->id;
                        $order->save();

                        $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                        //// כרטיס אשראי
                        if ($TempPaymentInfo->YaadCode != '0') {
                            $tokenId = $TempPaymentInfo->TokenId;
                            $tokenModel = Token::where('id', $tokenId)->first();
                            if (!$tokenModel) {
                                throw new InvalidArgumentException('Token is not valid');
                            }

                            $order->TokenId = $tokenModel->id;
                            $order->save();

                            try {
                                $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                                $CCode = $paymentResult['CCode'];

                                $TempPaymentInfo->delete();
                                $StatusPay = lang('docs_receipt_0');
                            } catch (\Throwable $e) {
                                if (!is_numeric($e->getMessage())) {
                                    LoggerService::error($e, LoggerService::CATEGORY_YAADSARIG);
                                }

                                // we keep CCode in message for Yaad
                                $CCode = $e->getMessage();
                                $StatusPay = @$StatusreditCard[$CCode];

                                if ($StatusPay == '') {
                                    $StatusNew = '2';
                                    $StatusPay = lang('unknow_error_meshulam');
                                }
                            }
                        } else {
                            $TempPaymentInfo->delete();
                            $StatusPay = lang('docs_receipt_0');
                        }
                    }
                }
                /// מחיקת קבצים זמניים
                $TempPaymentCount = DB::table('temp_receipt_payment_client')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->count();
                if ($TempPaymentCount == '0') {
                    $StatusNew = '1';
                } else {
                    $StatusNew = '0';
                }
                json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'StatusNew' => $StatusNew));
            } else {
                json_message($validator->errors()->toArray(), false);
            }

            break;

        // ביטול חיוב



        case 'POSClientCancelPayments':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId'], 'TempListsId' => $_POST['TempListsId']),
                array('ClientId' => 'Required', 'TempListsId' => 'Required')
            );

            if ($validator->passes()) {
                $StatusNew = '1';
                $StatusPay = '';
                $GroupNumber = $_POST['GroupNumber'];
                $TempId = $_POST['ClientId'];
                $TempListsId = $_POST['TempListsId'];
                $Finalinvoicenum = $_POST['Finalinvoicenum'];

                $studioSettings = Settings::getSettings($CompanyNum);
                $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                $TempPaymentInfo = DB::table('temp_receipt_payment_client')->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('TempId', '=', $TempId)->where('id', '=', $TempListsId)->first();

                $success = true;

                if ($TempPaymentInfo->TypePayment != '3') {
                    DB::table('temp_receipt_payment_client')->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('TempId', '=', $TempId)->where('id', '=', $TempListsId)->delete();
                    $StatusPay = lang('docs_receipt_0');
                } //// כרטיס אשראי
                elseif ($TempPaymentInfo->TypePayment == '3') {
                    if ($TempPaymentInfo->YaadCode != '0') {
                        try {
                            $client = new Client($_POST['ClientId']);
                            $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                            $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                            $order->save();

                            if ($studioSettings->TypeShva == 0) {
                                $tokenId = $TempPaymentInfo->TokenId;
                                $tokenModel = Token::where('id', $tokenId)->first();
                                if (!$tokenModel) {
                                    throw new InvalidArgumentException('Token is not valid');
                                }

                                $order->TokenId = $tokenModel->id;
                                $order->save();

                                $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                            } else {
                                $paymentResult = $paymentSystem->makeRefund($studioSettings->MeshulamAPI, $studioSettings->MeshulamUserId, $TempPaymentInfo->YaadCode, $TempPaymentInfo->PayToken, $TempPaymentInfo->Amount, $TempPaymentInfo->MeshulamPageCode);

                                $transaction = new Transaction();
                                $transaction->CompanyNum = $CompanyNum;
                                $transaction->ClientId = $TempId;
                                $transaction->UpdateTransactionDetails = serialize($paymentResult);
                                $transaction->UserId = 0;
                                $transaction->save();

                                $order->TransactionId = $transaction->id;
                                $order->save();
                            }

                            $CCode = $paymentResult['CCode'];
                        } catch (\Throwable $e) {
                            $CCode = $e->getMessage();
                            LoggerService::error($e, LoggerService::CATEGORY_PAYMENT_PROCESS_CANCEL);
                        }

                        if ($CCode == 0) {
                            DB::table('temp_receipt_payment_client')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('id', '=', $TempListsId)->delete();
                            $StatusPay = lang('docs_receipt_0');
                        } else {
                            $StatusPay = @$StatusreditCard[$CCode];
                            $StatusNew = 2;
                            if ($StatusPay == '') {
                                $StatusPay = lang('unknow_error_meshulam');
                            }

                            $success = false;
                        }
                    } else {
                        DB::table('temp_receipt_payment_client')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('id', '=', $TempListsId)->delete();
                        $StatusPay = lang('docs_receipt_0');
                    }
                }

                if ($success) {
                    json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'StatusNew' => $StatusNew, 'GroupNumber' => $GroupNumber, 'Finalinvoicenum' => $Finalinvoicenum));
                } else {
                    json_message(array('Status' => $StatusPay), false);
                }

            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;


        // ביטול זיכוי
        case 'POSClientCancelPaymentsRefound':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId'], 'TempListsId' => $_POST['TempListsId']),
                array('ClientId' => 'Required', 'TempListsId' => 'Required')
            );

            if ($validator->passes()) {
                $StatusNew = '1';
                $StatusPay = '';

                $GroupNumber = $_POST['GroupNumber'];
                $TempId = $_POST['ClientId'];
                $TempListsId = $_POST['TempListsId'];
                $Finalinvoicenum = $_POST['Finalinvoicenum'];

                $studioSettings = Settings::getSettings($CompanyNum);

                $TempPaymentInfo = DB::table('temp_receipt_payment_client')->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('TempId', '=', $TempId)->where('id', '=', $TempListsId)->first();
                if ($TempPaymentInfo->TypePayment != '3') {
                    DB::table('temp_receipt_payment_client')->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('TempId', '=', $TempId)->where('id', '=', $TempListsId)->delete();
                    $StatusPay = lang('docs_receipt_0');
                } elseif ($TempPaymentInfo->TypePayment == '3') {
                    //// כרטיס אשראי
                    if ($TempPaymentInfo->YaadCode != '0') {
                        $paymentSystem = PaymentService::getPaymentSystemByType($studioSettings->TypeShva);

                        $client = new Client($_POST['ClientId']);

                        $order = OrderService::createOrder($client, $TempPaymentInfo->Amount, 1, OrderLogin::TYPE_PAYMENT_CANCELED);

                        $order->PaymentMethod = PaymentService::getPaymentMethodByType($studioSettings->TypeShva);
                        $order->save();

                        $tokenId = $TempPaymentInfo->TokenId;
                        $tokenModel = Token::where('id', $tokenId)->first();
                        if (!$tokenModel) {
                            throw new InvalidArgumentException('Token is not valid');
                        }

                        $order->TokenId = $tokenModel->id;
                        $order->save();

                        $paymentResult = $paymentSystem->makeRefundWithToken($order, $tokenModel);
                        $CCode = $paymentResult['CCode'];

                        if ($CCode == '0') {
                            DB::table('temp_receipt_payment_client')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('id', '=', $TempListsId)->delete();
                            $StatusPay = lang('docs_receipt_0');
                        } else {
                            $StatusPay = @$StatusreditCard[$CCode];
                            $StatusNew = '2';
                            if ($StatusPay == '') {
                                $StatusPay = lang('unknow_error_meshulam');
                            }
                        }
                    } else {
                        DB::table('temp_receipt_payment_client')->where('TempId', '=', $TempId)->where('CompanyNum', '=', $CompanyNum)->where('TypeDoc', '=', $GroupNumber)->where('id', '=', $TempListsId)->delete();
                        $StatusPay = lang('docs_receipt_0');
                    }
                }
                json_message(array('Status' => $StatusPay, 'TempIdNew' => $TempId, 'StatusNew' => $StatusNew, 'GroupNumber' => $GroupNumber, 'Finalinvoicenum' => $Finalinvoicenum));
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        // AddSections - Add



        case 'AddSections':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = $_POST['Type'];

                $Brands = $_POST['Brands'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $Private = $_POST['Private'];
                $outdoor = isset($_POST['outdoor']) ? (int) $_POST['outdoor'] : 0;

                $MaxClient = $_POST['MaxClient'];



                if ($Private == '1' && $MaxClient == '') {

                    json_message(lang('set_max_participants_ajax'), false);

                }



                $Items = DB::table('sections')->insertGetId(

                    array('Title' => $Type, 'CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'Private' => $Private, 'MaxClient' => $MaxClient, 'outdoor' => $outdoor));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditSections - Edit



        case 'EditSections':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $ItemId = $_POST['ItemId'];

                $Brands = $_POST['Brands'];

                $Status = $_POST['Status'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $Private = $_POST['Private'];
                $outdoor = isset($_POST['outdoor']) ? (int) $_POST['outdoor'] : 0;

                $MaxClient = $_POST['MaxClient'];



                if ($Private == '1' && $MaxClient == '') {

                    json_message(lang('set_max_participants_ajax'), false);

                }





                DB::table('sections')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Title' => $Type, 'Status' => $Status, 'Brands' => $Brands, 'Private' => $Private, 'MaxClient' => $MaxClient, 'outdoor' => $outdoor));



                DB::table('classstudio_date')

                    ->where('Floor', $ItemId)

                    ->where('StartDate', '>=', date('Y-m-d'))

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Brands' => $Brands));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddDevice - Add



        case 'AddDevice':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = $_POST['Type'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                $Items = DB::table('numbers')->insertGetId(

                    array('Name' => $Type, 'CompanyNum' => $CompanyNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditDevice - Edit



        case 'EditDevice':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('numbers')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Name' => $Type, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddDevice - Add



        case 'AddDeviceSub':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = $_POST['Type'];

                $NumbersId = $_POST['NumbersId'];

                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                $Items = DB::table('numberssub')->insertGetId(

                    array('NumbersId' => $NumbersId, 'Name' => $Type, 'CompanyNum' => $CompanyNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditDevice - Edit



        case 'EditDeviceSub':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $NumbersId = $_POST['NumbersId'];

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('numberssub')

                    ->where('NumbersId', $NumbersId)

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Name' => $Type, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // ViewClass - Edit



        case 'ViewClass':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ViewClass' => $_POST['ViewClass'], 'ViewClassDates' => $_POST['ViewClassDates']),

                array('ViewClass' => 'Required', 'ViewClassDates' => 'required_if:ViewClass,3')

            );



            if ($validator->passes()) {



                $ViewClass = $_POST['ViewClass'];

                $ViewClassDates = $_POST['ViewClassDates'];

                $ViewClassDayNum = $_POST['ViewClassDayNum'];



                $Sunday = $_POST['Sunday'];

                $Monday = $_POST['Monday'];

                $Tuesday = $_POST['Tuesday'];

                $Wednesday = $_POST['Wednesday'];

                $Thursday = $_POST['Thursday'];

                $Friday = $_POST['Friday'];

                $Saturday = $_POST['Saturday'];



                $SelectDay = $_POST['SelectDay'];

                $SelectTimes = $_POST['SelectTimes'];





                if (@$ViewClassDates == '') {

                    $ViewClassDates = '0';

                }



                if (@$ViewClass != '4' && @$ViewClassDayNum == '') {

                    $ViewClassDayNum = '6';

                }



                if (@$ViewClass == '4' && @$ViewClassDayNum == '') {

                    json_message(lang('select_display_date_range_ajax'), false);

                    exit;

                }





                if (@$ViewClass == '2' && @$SelectTimes == '') {

                    json_message(lang('set_day_and_time_start_ajax'), false);

                    exit;

                }



                if (@$ViewClass != '5' && @$Sunday == '' || @$ViewClass != '5' && @$Monday == '' || @$ViewClass != '5' && @$Tuesday == '' || @$ViewClass != '5' && @$Wednesday == '' || @$ViewClass != '5' && @$Thursday == '' || @$ViewClass != '5' && @$Friday == '' || @$ViewClass != '5' && @$Saturday == '') {



                    $Sunday = '00:00:00';

                    $Monday = '00:00:00';

                    $Tuesday = '00:00:00';

                    $Wednesday = '00:00:00';

                    $Thursday = '00:00:00';

                    $Friday = '00:00:00';

                    $Saturday = '00:00:00';



                }



                if (@$ViewClass == '5' && @$Sunday == '' || @$ViewClass == '5' && @$Monday == '' || @$ViewClass == '5' && @$Tuesday == '' || @$ViewClass == '5' && @$Wednesday == '' || @$ViewClass == '5' && @$Thursday == '' || @$ViewClass == '5' && @$Friday == '' || @$ViewClass == '5' && @$Saturday == '') {

                    json_message('יש להקליד שעה לכל אחד מהימים בשבוע', false);

                    exit;

                }





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                if (@$ViewClass != '2') {

                    $SelectDay = 'Thursday';

                    $SelectTimes = '14:00:00';

                }





                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ViewClass' => $ViewClass, 'ViewClassDates' => $ViewClassDates, 'ViewClassDayNum' => $ViewClassDayNum, 'Sunday' => $Sunday, 'Monday' => $Monday, 'Tuesday' => $Tuesday, 'Wednesday' => $Wednesday, 'Thursday' => $Thursday, 'Friday' => $Friday, 'Saturday' => $Saturday, 'SelectDay' => $SelectDay, 'SelectTimes' => $SelectTimes));





                CreateLogMovement(

                    lang('edited_app_settings_view_ajax'),

                    '0');



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        case 'AppGeneral':



            if (Auth::guest()) exit;

            $SettingsRequest = $_POST;

            $validator = Validator::make(



                array('AppChat' => $SettingsRequest['AppChat']),

                array('AppChat' => 'Required')

            );



            if ($validator->passes()) {

                $appSettings = DB::table('appsettings')->where('CompanyNum', '=', $CompanyNum)->first();

                $AppRenew = $SettingsRequest['AppRenew'] ?? $appSettings->AppRenew;

                $AppFreez = $SettingsRequest['AppFreez'];

                $AppKeva = $SettingsRequest['AppKeva'];

                $MorningTime = $SettingsRequest['MorningTime'] ?? $appSettings->MorningTime;

                $EveningTime = $SettingsRequest['EveningTime'] ?? $appSettings->EveningTime;

                $KevaDays = @$SettingsRequest['KevaDays'];

                $AppChat = $SettingsRequest['AppChat'];

                $KevaTotal = $SettingsRequestT['KevaTotal'] ?? $appSettings->KevaTotal;

                $ShowTakanon = $SettingsRequest['ShowTakanon'] ?? 0;

                $ShowHealth = $SettingsRequest['ShowHealth'] ?? 0;



                if (@$MorningTime == '') {

                    $MorningTime = null;

                }

                if (@$EveningTime == '') {

                    $EveningTime = null;

                }

                if (@$KevaDays == '') {

                    $KevaDays = '0';

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;


                $update = DB::table('appsettings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update([
                        'AppRenew' => $AppRenew,
                        'AppFreez' => $AppFreez,
                        'AppKeva' => $AppKeva,
                        'MorningTime' => $MorningTime,
                        'EveningTime' => $EveningTime,
                        'KevaDays' => $KevaDays,
                        'AppChat' => $AppChat,
                        'KevaTotal' => $KevaTotal,
                        'ShowTakanon' => $ShowTakanon,
                        'ShowHealth' => $ShowHealth
                    ]);

                CreateLogMovement(lang('edited_app_settings_general_ajax'), '0');

                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;

        case 'AppContent':

            if (Auth::guest()) exit;

            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );

            if ($validator->passes()) {

                $color = isset($_POST['DocsBackgroundColor']) ? $_POST['DocsBackgroundColor'] : 'NULL';
                $msg = isset($_POST['Content']) ? $_POST['Content'] : 'NULL';

                DB::table('appsettings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('studioMsg' => $msg, 'msgColor' => $color));

                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;



        case 'AppCancel':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('DifrentTime' => $_POST['DifrentTime']),

                array('DifrentTime' => 'Required')

            );



            if ($validator->passes()) {



                $DifrentTime = $_POST['DifrentTime'];

                $TypeDifrentTime = $_POST['TypeDifrentTime'];

                $DifrentTimeMin = $_POST['DifrentTimeMin'];

                $DifrentTimeOption = $_POST['DifrentTimeOption'];

                $MemberShipLimit = $_POST['MemberShipLimit'];

                $DaysMemberShipLimit = $_POST['DaysMemberShipLimit'];

                $MemberShipLimitMoney = $_POST['MemberShipLimitMoney'];





                $MemberShipLimitType = $_POST['MemberShipLimitType'];



                $MemberShipLimitUnBlock = @$_POST['MemberShipLimitUnBlock'];

                $MemberShipLimitUnBlockDays = @$_POST['MemberShipLimitUnBlockDays'];



                $MemberShipLimitDays = @$_POST['MemberShipLimitDays'];



                $MemberShipLimitLateCancel = @$_POST['MemberShipLimitLateCancel'];

                $MemberShipLimitNoneShow = @$_POST['MemberShipLimitNoneShow'];



                if ($MemberShipLimitLateCancel == '') {

                    $MemberShipLimitLateCancel = '0';

                }



                if ($MemberShipLimitNoneShow == '') {

                    $MemberShipLimitNoneShow = '0';

                }





                if ($MemberShipLimitType == '0' && $MemberShipLimitUnBlock == '0' && $MemberShipLimitUnBlockDays == '' || $MemberShipLimitType == '0' && $MemberShipLimitUnBlock == '0' && $MemberShipLimitUnBlockDays == '0') {

                    json_message(lang('set_days_release_ajax'), false);

                    exit;

                }



                if ($MemberShipLimitType == '1' && $MemberShipLimitDays == '' || $MemberShipLimitType == '1' && $MemberShipLimitDays == '0') {

                    json_message(lang('set_days_short_ajax'), false);

                    exit;

                }



                if ($MemberShipLimitType == '0' && $MemberShipLimitUnBlock == '0' && $MemberShipLimitLateCancel == '0' && $MemberShipLimitNoneShow == '0' || $MemberShipLimitType == '1' && $MemberShipLimitLateCancel == '0' && $MemberShipLimitNoneShow == '0') {

                    json_message(lang('set_status_cancel_ajax'), false);

                    exit;

                }





                if ($MemberShipLimitType == '0') {

                    $MemberShipLimitDays = '1';

                } else if ($MemberShipLimitType == '1') {

                    $MemberShipLimitUnBlock = '1';

                    $MemberShipLimitUnBlockDays = '3';

                } else {

                    $MemberShipLimitLateCancel = '1';

                    $MemberShipLimitNoneShow = '1';

                    $MemberShipLimitDays = '1';

                    $MemberShipLimitUnBlock = '1';

                    $MemberShipLimitUnBlockDays = '3';

                }





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                if ($DifrentTime == '1' && $TypeDifrentTime == '1' && $DifrentTimeOption == '' || $DifrentTime == '1' && $TypeDifrentTime == '2' && $DifrentTimeOption == '') {

                    json_message(lang('select_hour_ajax'), false);

                    exit;

                }



                if ($DifrentTime == '1' && $TypeDifrentTime == '0' && $DifrentTimeMin == '') {

                    json_message(lang('set_time_minutes_ajax'), false);

                    exit;

                }



                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('DifrentTime' => $DifrentTime, 'TypeDifrentTime' => $TypeDifrentTime, 'DifrentTimeMin' => $DifrentTimeMin, 'DifrentTimeOption' => $DifrentTimeOption, 'MemberShipLimit' => $MemberShipLimit, 'DaysMemberShipLimit' => $DaysMemberShipLimit, 'MemberShipLimitMoney' => $MemberShipLimitMoney, 'MemberShipLimitType' => $MemberShipLimitType, 'MemberShipLimitLateCancel' => $MemberShipLimitLateCancel, 'MemberShipLimitNoneShow' => $MemberShipLimitNoneShow, 'MemberShipLimitDays' => $MemberShipLimitDays, 'MemberShipLimitUnBlock' => $MemberShipLimitUnBlock, 'MemberShipLimitUnBlockDays' => $MemberShipLimitUnBlockDays));



                CreateLogMovement(

                    lang('edited_app_settings_cancel_ajax'),

                    '0');





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AppWatingList':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('Watinglist' => $_POST['Watinglist']),
                array('Watinglist' => 'Required')
            );
            if ($validator->passes()) {
                $Watinglist = $_POST['Watinglist'];
                $WatinglistEndMin = $_POST['WatinglistEndMin'];
                $WatinglistMin = $_POST['WatinglistMin'];
                $WatinglistOrder = @$_POST['WatinglistOrder'];
                $WatinglistOrderTime = @$_POST['WatinglistOrderTime'];

                $Dates = date('Y-m-d G:i:s');
                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;

                $WatingListNight = @$_POST['WatingListNight'];
                $WatingListStartTime = @$_POST['WatingListStartTime'];
                $WatingListEndTime = @$_POST['WatingListEndTime'];
                if ($WatingListNight == '1' && $WatingListStartTime == '') {
                    json_message(lang('set_start_hour_ajax'), false);
                    exit;
                }
                if ($WatingListNight == '1' && $WatingListEndTime == '') {
                    json_message(lang('set_end_hour_ajax'), false);
                    exit;
                }
                if ($WatingListNight == '0') {
                    $WatingListStartTime = '01:00:00';
                    $WatingListEndTime = '06:00:00';
                }
                $settingUpdateArray = array('Watinglist' => $Watinglist,
                    'WatinglistEndMin' => $WatinglistEndMin,
                    'WatinglistMin' => $WatinglistMin,
                    'WatinglistOrder' => $WatinglistOrder,
                    'WatinglistOrderTime' => $WatinglistOrderTime,
                    'WatingListNight' => $WatingListNight,
                    'WatingListStartTime' => $WatingListStartTime,
                    'WatingListEndTime' => $WatingListEndTime
                );

                DB::table('appsettings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update($settingUpdateArray);
                CreateLogMovement(lang('edited_app_settings_waiting_ajax'), '0');
                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        case 'AppNotification':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassWeek' => $_POST['ClassWeek']),

                array('ClassWeek' => 'Required')

            );



            if ($validator->passes()) {

                $SendSMS = isset($_POST['SendSMS']) ? $_POST['SendSMS'] : $AppSettings->SendSMS;

                $ClassWeek = $_POST['ClassWeek'];

                $ClassWeekMonth = $_POST['ClassWeekMonth'];

                $SendNotification = $_POST['SendNotification'];

                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;


                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('SendSMS' => $SendSMS, 'ClassWeek' => $ClassWeek, 'ClassWeekMonth' => $ClassWeekMonth, 'SendNotification' => $SendNotification));



                CreateLogMovement(lang('edited_app_settings_notifications_ajax'), '0');

                json_message();


            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;


        // Close Event - Add



        case 'CloseEventPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassIdCloseEvent' => $_POST['ClassIdCloseEvent']),

                array('ClassIdCloseEvent' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ClassIdCloseEvent'];



                $Item = DB::table('classstudio_date')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => '1', 'Color' => '#e2e2e2'));



                $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->where('Status', '=', '12')->get();

                foreach ($Clients as $Client) {



                    /// ניקוב משיבוץ קבוע להגיע/מומש

                    if ($Client->Department == '2') {

                        $ClientInfo = DB::table('client_activities')->where('id', '=', $Client->ClientActivitiesId)->where('CompanyNum', $CompanyNum)->first();



                        $TrueBalanceValue = $ClientInfo->TrueBalanceValue - 1;

                        /// עדכון כרטיסיה

                        DB::table('client_activities')

                            ->where('id', $Client->ClientActivitiesId)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('TrueBalanceValue' => $TrueBalanceValue));



                    }

                    /// עדכון סטטוס חדש
                    (new ClassStudioAct($Client->id))->changeStatus('2');
                }





                //// עדכון שיעור אחרון ללקוח



                $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->where('StatusCount', '=', '0')->get();

                foreach ($Clients as $Client) {



                    DB::table('client')

                        ->where('id', $Client->ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('LastClassDate' => $Client->ClassDate));





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // Cancel Event - Add



        case 'CancelEventPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassIdCloseEvent' => $_POST['ClassIdCloseEvent']),

                array('ClassIdCloseEvent' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ClassIdCloseEvent'];

                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $ReClass = '1';

                $FinalTrueBalanceValue = '0';

                $KnasOption = '0';

                $KnasOptionVule = '0.00';

                $Cards = '';

                $WatingListSort = '0';



                $AppSettings = DB::table('appsettings')->where('CompanyNum', '=', $CompanyNum)->first();



                $MemberShipLimitMoney = $AppSettings->MemberShipLimitMoney;





                $Item = DB::table('classstudio_date')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => '2', 'displayCancel' => '1'));



                $NewStatus = '5'; /// בוטל באמצעות הסטודיו



                $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->whereIn('StatusCount', array(0, 1))->get();

                foreach ($Clients as $Client) {



                    $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Client->ClientActivitiesId)->first();

                    $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

                    $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

                    $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;



                    /// בדיקת סטטוס הלקוח

                    $CheckOldStatus = DB::table('class_status')->where('id', '=', $Client->Status)->first();

                    $CheckNewStatus = DB::table('class_status')->where('id', '=', $NewStatus)->first();



                    $StatusCount = $CheckNewStatus->StatusCount;



                    /// מנוי תקופתי

                    if ($Client->Department == '1') {



                        if ($NewStatus == '4' || $NewStatus == '8') {

                            $KnasOption = '1';

                            $KnasOptionVule = $MemberShipLimitMoney;

                        }





                    } /// כרטיסיה

                    elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {



                        if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                            $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                            $FinalActBalanceValue = $ActBalanceValue;

                        } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                            $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                            $FinalActBalanceValue = $ActBalanceValue + 1;

                        } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                            $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                            $FinalActBalanceValue = $ActBalanceValue + 1;

                        } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                            $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                            $FinalActBalanceValue = $ActBalanceValue - 1;

                        } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                            $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                            $FinalActBalanceValue = $ActBalanceValue;

                        } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                            $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                            $FinalActBalanceValue = $ActBalanceValue;

                        } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                            $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                            $FinalActBalanceValue = $ActBalanceValue - 1;

                        } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                            $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                            $FinalActBalanceValue = $ActBalanceValue;

                        } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                            $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                            $FinalActBalanceValue = $ActBalanceValue;

                        }





                        DB::table('client_activities')

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->where('id', '=', $ClientBalanceValue->id)

                            ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                        $Cards = $FinalTrueBalanceValue . ' / ' . $OrigenalBalanceValue;



                        if ($Client->ActStatus == '1') {



                            DB::table('client_activities')

                                ->where('CompanyNum', '=', $CompanyNum)

                                ->where('id', '=', $ClientBalanceValue->id)

                                ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                        }





                    }



                    // תיעוד שינוי סטטוס



                    $Dates = date('Y-m-d G:i:s');

                    $UserId = Auth::user()->id;



                    $StatusJson = '';

                    $StatusJson .= '{"data": [';



                    if ($Client->StatusJson != '') {

                        $Loops = json_decode($Client->StatusJson, true);

                        foreach ($Loops['data'] as $key => $val) {



                            $DatesDB = $val['Dates'];

                            $UserIdDB = $val['UserId'];

                            $StatusDB = $val['Status'];

                            $StatusTitleDB = $val['StatusTitle'];

                            $UserNameDB = $val['UserName'];



                            $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                        }

                    }



                    $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $NewStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                    $StatusJson .= ']}';





                    //// השלמת שיעור



                    if ($NewStatus == '10') {

                        $ReClass = '2';

                    }





                    /// עדכון לסטטוס חדש
                    (new ClassStudioAct($Client->id))->update([
                        'Status' => $NewStatus,
                        'StatusJson' => $StatusJson,
                        'StatusCount' => $StatusCount,
                        'ReClass' => $ReClass,
                        'KnasOption' => $KnasOption,
                        'KnasOptionVule' => $KnasOptionVule,
                        'WatingListSort' => $WatingListSort,
                    ]);

                    /// הגדרת התראה



                    $Date = date('Y-m-d');

                    $Time = date('H:i:s');

                    $Dates = date('Y-m-d H:i:s');



                    $Template = (new Notificationcontent())->getByTypeAndCompany($CompanyNum, 18);



                    if ($Client->TrueClientId == '0') {

                        $TrueClientId = $Client->ClientId;

                    } else {

                        $TrueClientId = $Client->TrueClientId;

                    }





                    $ClientInfo = DB::table('client')->where('id', '=', $TrueClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                    $CompanyInfo = Company::getInstance();



                    /// עדכון תבנית הודעה

                    $ClassDate_Not = with(new DateTime($Client->ClassDate))->format('d/m/Y');

                    $ClassTime_Not = with(new DateTime($Client->ClassStartTime))->format('H:i');

                    $ClassName_Not = $Client->ClassName;

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Template->Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["cal_new_class_type_name"], $ClassName_Not ?? '', $Content3);
                    $Content5 = str_replace(Notificationcontent::REPLACE_ARR["class_date_single"], $ClassDate_Not ?? '', $Content4);
                    $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["time_of_a_class"], $ClassTime_Not ?? '', $Content5);
//                    $ContentTrue = $Content6;



                    $Text = $ContentTrue; /// משיכת הודעת ביטול שיעור מבסיס הנתונים

                    $Subject = $Template->Subject;


                    if($Template->Status != 1) {
                        $AddNotification = DB::table('appnotification')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ClientId' => $TrueClientId, 'Type' => '0', 'Subject' => $Subject, 'Text' => $Text, 'Dates' => $Dates, 'UserId' => $UserId, 'Date' => $Date, 'Time' => $Time));

                    }

                    $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                    ///// Class Log

                    DB::table('classlog')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClassId' => $Client->ClassId, 'ClientId' => $TrueClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                    /////////////////////////////////////////





                    $CheckClassInfo = DB::table('classstudio_date')->where('id', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->first();

                    $GroupNumber = $CheckClassInfo->GroupNumber;

                    $StartDate = $CheckClassInfo->StartDate;

                    $ClassName = $CheckClassInfo->ClassName;

                    $StartTime = $CheckClassInfo->StartTime;

                    $Day = $CheckClassInfo->Day;

                    $SectioClassInfo = DB::table('sections')->where('id', '=', $CheckClassInfo->Floor)->where('CompanyNum', '=', $CompanyNum)->first();

                    $ClassInfoOne = $ClassName . lang('in_date_ajax').' '.$StartDate.' '.lang('at_time_ajax').' '. $StartTime.' '. lang('at_day_ajax').' '.$Day.' '. lang('in_room_ajax').' '.htmlentities(@$SectioClassInfo->Title);

                    $ClassInfoRegular = $ClassName.' '.lang('at_time_ajax').' '.$StartTime.' '.lang('at_time_ajax').' '. $Day.' '. lang('in_room_ajax').' '. htmlentities(@$SectioClassInfo->Title);

                    CreateLogMovement( //FontAwesome Icon

                        lang('log_canceled_class_ajax').' '. $ClassInfoOne, //LogContent

                        '0' //ClientId

                    );





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // SendNotificationEventPopUp - Add



        case 'SendNotificationEventPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassIdCloseEvent' => $_POST['ClassIdCloseEvent']),

                array('ClassIdCloseEvent' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ClassIdCloseEvent'];

                $Content = $_POST['Content'];

                $Type = $_POST['Type'];

                $TypeSend = $_POST['TypeSend'];



                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                if ($TypeSend == '0') {

                    $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->where('StatusCount', '=', '0')->get();

                } else {

                    $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->where('StatusCount', '!=', '2')->get();

                }





                foreach ($Clients as $Client) {





                    if ($Client->TrueClientId == '0') {

                        $TrueClientId = $Client->ClientId;

                    } else {

                        $TrueClientId = $Client->TrueClientId;

                    }



                    $ClientInfo = DB::table('client')->where('id', '=', $TrueClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                    $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                    if ($BrandsMain == '0') {

                        $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->where('CompanyNum', $CompanyNum)->first();

                    } else {

                        $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->where('BrandsMain', $BrandsMain)->first();

                    }

                    /// עדכון תבנית הודעה

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["full_representative_name"], Auth::user()->display_name, $Content3);
                    $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["representative_name"], $UsersInfo->FirstName, $Content4);

//                    $ContentTrue = $Content5;

                    /// הגדרת התראה



                    $Date = date('Y-m-d');

                    $Time = date('H:i:s');



                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $TrueClientId, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $Type, 'Date' => $Date, 'Time' => $Time));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // SendNotificationClient - Add



        case 'SendNotificationClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $Content = $_POST['Message'];

                $TypeSend = $_POST['TypeSend'];

                $Subject = lang('without_topic_ajax');

                if (@$Content == '') {

                    json_message(lang('add_message_content_ajax'), false);

                    exit;

                }



                $SMSPrice = '0';

                $SMSSumPrice = '0';

                $CountTotalLetters = '0';



                if ($TypeSend == '2') {

                    $Subject = @$_POST['Subject'];



                    if (@$Subject == '') {

                        json_message(lang('type_title_ajax'), false);

                        exit;

                    }



                }

                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->first();



                /// עדכון תבנית הודעה



                $GooglePlayLink = 'https://play.google.com/store/apps/details?id=com.connect_computer.boostnew&gl=IL';
                $AppStoreLink = 'https://apps.apple.com/us/app/boost-%D7%91%D7%95%D7%A1%D7%98/id1479519489';



                if (!empty($CompanyInfo->GooglePlayLink )) {

                    $GooglePlayLink = $CompanyInfo->GooglePlayLink;

                }

                if (!empty($CompanyInfo->AppStoreLink )) {

                    $AppStoreLink = $CompanyInfo->AppStoreLink;

                }


                $AppStore = '<a href="' . $AppStoreLink . '">App Store</a>';

                $GooglePlay = '<a href="' . $GooglePlayLink . '">Google Play</a>';


                $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName ?? '', $Content);
                $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ? htmlentities($ClientInfo->CompanyName) : '', $Content1);
                $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ? htmlentities($ClientInfo->FirstName) : '', $Content2);
                $Content4 = str_replace(Notificationcontent::REPLACE_ARR["full_representative_name"], $UsersInfo->display_name, $Content3);
                $Content5 = str_replace(Notificationcontent::REPLACE_ARR["representative_name"], $UsersInfo->FirstName, $Content4);
                $Content6 = str_replace("AppStore", $AppStore, $Content5);
                $ContentTrue = str_replace("GooglePlay", $GooglePlay, $Content6);

//                $ContentTrue = $Content7;
                /// הגדרת התראה

                $Date = date('Y-m-d');
                $Time = date('H:i:s');


                if ($TypeSend == '1') {

                    $SettingsInfo = Company::getInstance();

                    if (mb_strlen($ContentTrue) <= '200') {

                        $CountTotalLetters = '1';

                    } else {

                        $CountTotalLetters = ceil(mb_strlen($ContentTrue) / 200);

                    }

                    $SMSPrice = $SettingsInfo->SMSPrice;

                    $SMSSumPrice = $CountTotalLetters * $SettingsInfo->SMSPrice;

                } else {

                    $SMSPrice = '0';

                    $SMSSumPrice = '0';

                    $CountTotalLetters = '0';

                }





                $AddNotification = DB::table('appnotification')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $TypeSend, 'Date' => $Date, 'Time' => $Time, 'System' => '0', 'SMSPrice' => $SMSPrice, 'SMSSumPrice' => $SMSSumPrice, 'Count' => $CountTotalLetters, 'SendType' => '1'));





                json_message($AddNotification);



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AppHealth':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Content' => $_POST['Content']),

                array('Content' => 'Required')

            );



            if ($validator->passes()) {



                $Content = $_POST['Content'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Health' => $Content));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AppTakanon':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Content' => $_POST['Content']),

                array('Content' => 'Required')

            );



            if ($validator->passes()) {



                $Content = $_POST['Content'];

                $SignAgian = $_POST['SignAgian'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Takanon' => $Content));





                if ($SignAgian == '1') {

                    DB::table('boostapplogin.studio')

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Takanon' => '0'));



                    DB::table('client')

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Takanon' => '0'));



                }





                CreateLogMovement(lang('edited_app_settings_terms_ajax'), '0');





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddClientMedical':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('Content' => $_POST['Content']),
                array('Content' => 'Required')
            );



            if ($validator->passes()) {



                $Content = $_POST['Content'];

                $ClientId = $_POST['ClientId'];

                $TillDate = @$_POST['TillDate'];



                if (@$TillDate == '') {

                    $TillDate = null;

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('clientmedical')->insertGetId(
                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Content' => $Content, 'TillDate' => $TillDate, 'Dates' => $Dates, 'UserId' => $UserId));
                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // SendNotificationClient - Add



        case 'SendNotificationWorker':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $Content = $_POST['Message'];

                $TypeSend = $_POST['TypeSend'];

                $Subject = lang('without_topic_ajax');

                if (@$Content == '') {

                    json_message(lang('add_message_content_ajax'), false);

                    exit;

                }





                if ($TypeSend == '2') {

                    $Subject = @$_POST['Subject'];



                    if (@$Subject == '') {

                        json_message(lang('type_title_ajax'), false);

                        exit;

                    }



                }

                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                if ($BrandsMain == '0') {

                    $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->where('CompanyNum', $CompanyNum)->first();

                } else {

                    $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->where('BrandsMain', $BrandsMain)->first();

                }

                /// עדכון תבנית הודעה



                $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Content);
                $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                $Content4 = str_replace(Notificationcontent::REPLACE_ARR["full_representative_name"], Auth::user()->display_name, $Content3);
                $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["representative_name"], $UsersInfo->FirstName ?? '', $Content4);

//                $ContentTrue = $Content5;



                /// הגדרת התראה



                $Date = date('Y-m-d');

                $Time = date('H:i:s');





                if ($TypeSend == '1') {

                    $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', Auth::user()->CompanyNum)->first();

                    if (mb_strlen($ContentTrue) <= '200') {

                        $CountTotalLetters = '1';

                    } else {

                        $CountTotalLetters = ceil(mb_strlen($ContentTrue) / 200);

                    }

                    $SMSPrice = $SettingsInfo->SMSPrice;

                    $SMSSumPrice = $CountTotalLetters * $SettingsInfo->SMSPrice;

                } else {

                    $SMSPrice = '0';

                    $SMSSumPrice = '0';

                    $CountTotalLetters = '0';

                }

                $AddNotification = DB::table('appnotification')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $TypeSend, 'Date' => $Date, 'Time' => $Time, 'System' => '1', 'SMSPrice' => $SMSPrice, 'SMSSumPrice' => $SMSSumPrice, 'Count' => $CountTotalLetters));

                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        ///// חיוב מכרטיס לקוח מסמכים במערכת



        case 'SaveReceipt':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId'], 'GroupNumber' => $_POST['GroupNumber']),
                array('ClientId' => 'Required', 'GroupNumber' => 'Required')
            );

            if ($validator->passes()) {
                try {
                    $UserId = Auth::user()->id;
                    $CompanyNum = Auth::user()->CompanyNum;
                    $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();
                    $CpaType = $SettingsInfo->CpaType;
                    $ClientId = $_POST['ClientId'];
                    $UserDate = date('Y-m-d');
                    $TypeHeader = '400'; /// קבלה
                    $FinalinvoiceId = $_POST['FinalinvoiceId']; // מנויים לתשלום
                    $TrueFinalinvoicenum = $_POST['TrueFinalinvoicenum']; /// סה"כ כסף
                    $ClientGroupNumber = $_POST['GroupNumber'];
                    $ManualInvoice = 0;
                    $DocConvert = 0;
                    $PaymentRole = 1;
                    $Dates = date('Y-m-d H:i:s');

                    if (@$FinalinvoiceId == '') {
                        json_message(lang('document_error_generate_ajax'), false);
                        exit;
                    }

                    /// בדיקת תקבול קיים
                    /** @var TempReceiptPaymentClient $TempReceipt */
                    $TempReceipt = TempReceiptPaymentClient::where('TempId', '=', $ClientId)
                        ->where('TypeDoc', '=', $ClientGroupNumber)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->first();

                    if (!$TempReceipt) {
                        $ClientId = DB::table('client')->where('id', '=', $ClientId)->pluck('parentClientId');

                        $TempReceipt = TempReceiptPaymentClient::where('TempId', '=', $ClientId)
                            ->where('TypeDoc', '=', $ClientGroupNumber)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->first();
                        if (!$TempReceipt) {
                            json_message(lang('error_generate_doc_ajax'), false);
                            exit;
                        }
                    }

                    $order = $TempReceipt->order();

                    //// בדיקת סניפים
                    if ($SettingsInfo->BrandsMain != '0' && $SettingsInfo->MainAccounting == '1') {
                        $TrueCompanyNum = $SettingsInfo->BrandsMain;
                    } else {
                        $TrueCompanyNum = $CompanyNum;
                    }

                    /// סוג מסמך וקבלת ID
                    $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('TrueCompanyNum', '=', $TrueCompanyNum)->first();
                    $TypeDoc = $GetDocsId->id;//87 for TypeHeader=400 קבלה / 83 for TypeHeader=305 חשבונית-מס

                    /// בדיקת מספור מסמך + תאריך אחרון
                    $DocsTableNew = DB::table('docstable')->where('id', '=', $TypeDoc)->where('TrueCompanyNum', '=', $TrueCompanyNum)->first();
                    if ($DocsTableNew->Status == '1') {
                        json_message(lang('error_doc_type_ajax'), false);
                        exit;
                    }

                    $GetAmount = TempReceiptPaymentClient::where('TempId', '=', $ClientId)
                        ->where('TypeDoc', '=', $ClientGroupNumber)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->sum('Amount');

                    /// עדכון מנוי בתשלום מלא / תשלום חלקי

                    $ActivityJson = [];
                    $NewAmount = $GetAmount;
                    $ActivityIds = explode(',', $FinalinvoiceId);
                    $Newcount = count($ActivityIds);
                    $Newi = '1';

                    foreach ($ActivityIds as $ActivityId) {
                        $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                        if ($ActivityInfo) {
                            $ItemText = Utils::safeText($ActivityInfo->ItemText);
                            $BalanceMoney = $ActivityInfo->BalanceMoney;
                            $ItemId = $ActivityInfo->ItemId;
                            $TrueClientId = $ActivityInfo->ClientId;

                            // update status meeting
                            if ($ActivityInfo->isForMeeting == 1) {
                                $meeting = ClassStudioAct::getMeetingActByActivityId($ActivityInfo->id);
                                if ($meeting && $meeting->classStudioDate()) {
                                    $statusChanged = EditMeetingService::changeStatus(
                                        $meeting->classStudioDate()->id,
                                        $meeting->classStudioDate()->meetingStatus,
                                        MeetingStatus::COMPLETED,
                                        null
                                    );
                                }
                            }
                            /// בדיקת מצב תקבול לעומת תשלום פעילות
                            if ($NewAmount >= $BalanceMoney) {
                                /// סוגר פעילות ותשלום מלא
                                $NewAmount = $NewAmount - $BalanceMoney;
                                DB::table('client_activities')
                                    ->where('id', $ActivityId)
                                    ->where('ClientId', '=', $TrueClientId)
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->update(array('BalanceMoney' => 0, 'TruePays' => $ClientId, 'isDisplayed' => 1));


                                $ActivityJson[] = [
                                    'ItemText' => $ItemText,
                                    'ItemId' => $ItemId,
                                    'OldBalanceMoney' => $BalanceMoney,
                                    'NewAmount' => 0
                                ];
                            } else {
                                $NewAmount = $BalanceMoney - $NewAmount;
                                DB::table('client_activities')
                                    ->where('id', $ActivityId)
                                    ->where('ClientId', '=', $TrueClientId)
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->update(array('BalanceMoney' => $NewAmount, 'TruePays' => $ClientId, 'isDisplayed' => 1));


                                $ActivityJson[] = [
                                    'ItemText' => $ItemText,
                                    'ItemId' => $ItemId,
                                    'OldBalanceMoney' => $BalanceMoney,
                                    'NewAmount' => $NewAmount
                                ];
                                $NewAmount = '0';
                            }
                        }
                        ++$Newi;
                    }

                    $ActivityJson = json_encode(["data" => $ActivityJson], JSON_PRETTY_PRINT);

                    $DocsCountGets = DB::table('docs')->where('TrueCompanyNum', '=', $TrueCompanyNum)->where('TypeHeader', '=', $TypeHeader)->orderBy('TypeNumber', 'DESC')->orderBy('id', 'DESC')->first();
                    if (@$DocsCountGets->TypeNumber == '') {
                        $TypeNumber = $DocsTableNew->TypeNumber;
                    } else {
                        $TypeNumber = $DocsCountGets->TypeNumber + 1;
                    }

                    /// סוג מסמך וקבלת ID
                    $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->first();
                    $TypeDoc = $GetDocsId->id;
                    $DocsTableNew = DB::table('docstable')->where('id', '=', $TypeDoc)->where('CompanyNum', '=', $CompanyNum)->first();

                    /// פרטי לקוח
                    $ClientDocInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();
                    $Brands = $ClientDocInfo->Brands ?? 0;
                    if (empty($ClientDocInfo->Company)) {
                        $Company = $ClientDocInfo->CompanyName;
                    } else {
                        $Company = $ClientDocInfo->Company;
                    }

                    $PaymentRole = 1;
                    $PaymentTime = $UserDate;
                    $DocDate = date('Y-m-d');
                    $DocMonth = date("m", strtotime($UserDate));
                    $DocYear = date("Y", strtotime($UserDate));
                    $DocTime = date('H:i:s');

                    /// מחולל מספר מסמך
                    $GroupNumber = rand(1262055681, 1262055681);
                    $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);
                    $RandomNumber = uniqid($GroupNumber);

                    $DocsGetAmount = '-' . $GetAmount;
                    $City = '';

                    if ($ClientDocInfo->City != '0') {
                        $BusinessSettingsCity = DB::table('cities')->where('CityId', '=', $ClientDocInfo->City)->first();
                        $City = @$BusinessSettingsCity->City;
                    }
                    if ($ClientDocInfo->Street == '0' || $ClientDocInfo->Street == '99999999') {
                        $Street = $ClientDocInfo->StreetH;
                    } else {
                        $BusinessSettingsStreet = DB::table('street')->where('id', '=', $ClientDocInfo->Street)->first();
                        $Street = @$BusinessSettingsStreet->Street;
                    }

                    $remarks = empty($GetDocsId->DocsRemarks) ? '' : $GetDocsId->DocsRemarks;
                    $remarks .= empty($_POST['Remarks']) ? '' : '<br>' .  $_POST['Remarks'];

                    $DocId = DB::table('docs')->insertGetId(array(
                        'CompanyNum' => $CompanyNum,
                        'Brands' => $Brands,
                        'TrueCompanyNum' => $TrueCompanyNum,
                        'TypeDoc' => $TypeDoc,
                        'TypeHeader' => $DocsTableNew->TypeHeader,
                        'TypeNumber' => $TypeNumber,
                        'ClientId' => $ClientId,
                        'UserDate' => $UserDate,
                        'Dates' => $Dates,
                        'Amount' => $DocsGetAmount,
                        'Vat' => '0',
                        'VatAmount' => '0',
                        'DiscountType' => '1',
                        'Discount' => '0',
                        'DiscountAmount' => '0',
                        'PaymentRole' => '1',
                        'Remarks' => $remarks,
                        'Company' => $Company,
                        'CompanyId' => $ClientDocInfo->CompanyId,
                        'ContactName' => $ClientDocInfo->CompanyName,
                        'Mobile' => $ClientDocInfo->ContactMobile,
                        'Phone' => $ClientDocInfo->ContactPhone,
                        'Fax' => $ClientDocInfo->ContactFax,
                        'Email' => $ClientDocInfo->Email,
                        'UserId' => $UserId,
                        'ManualInvoice' => $ManualInvoice,
                        'DocConvert' => $DocConvert,
                        'PaymentTime' => $PaymentTime,
                        'BalanceAmount' => '0',
                        'Street' => $Street,
                        'Number' => $ClientDocInfo->Number,
                        'PostCode' => $ClientDocInfo->PostCode,
                        'City' => $City,
                        'Accounts' => $DocsTableNew->Accounts,
                        'DocDate' => $DocDate,
                        'DocMonth' => $DocMonth,
                        'DocYear' => $DocYear,
                        'DocTime' => $DocTime,
                        'RandomUrl' => $RandomNumber,
                        'ActivityJson' => $ActivityJson,
                        'Status' => '1',
                        'BusinessCompanyId' => $SettingsInfo->CompanyId,
                        'BusinessType' => $SettingsInfo->BusinessType,
                        'TypeShva' => $SettingsInfo->TypeShva,
                        'CpaType' => $SettingsInfo->CpaType
                    ));

                    foreach ($ActivityIds as $ActivityId) {
                        DocsClientActivities::saveRelation($DocId, $ActivityId);
                    }

                    if ($order) {
                        $order->Description = $ActivityJson;
                        $order->save();
                    }


                    /// שמירת נתוני מסמך תקבולים
                    $TempDocPaymentsInfo = TempReceiptPaymentClient::where('TempId', '=', $ClientId)
                        ->where('TypeDoc', '=', $ClientGroupNumber)
                        ->get();
                    foreach ($TempDocPaymentsInfo as $TempDocPaymentInfo) {
//                        $TransactionId = $TempDocPaymentInfo->TransactionId;
//                        if ($order && $order->PaymentMethod === PaymentService::PAYMENT_TRANZILA) {
//                            $TransactionId = $order->TransactionId;
//                        }

                        if ($TempDocPaymentInfo->TypePayment != 3) {
                            $DocsList = DB::table('docs_payment')->insertGetId(array(
                                'CompanyNum' => $CompanyNum,
                                'Brands' => $Brands,
                                'TrueCompanyNum' => $TrueCompanyNum,
                                'TypeDoc' => $TypeDoc,
                                'TypeHeader' => $TypeHeader,
                                'TypeNumber' => $TypeNumber,
                                'DocsId' => $DocId,
                                'ClientId' => $ClientId,
                                'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                'Amount' => $TempDocPaymentInfo->Amount,
                                'L4digit' => $TempDocPaymentInfo->L4digit,
                                'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                'CCode' => $TempDocPaymentInfo->CCode,
                                'ACode' => $TempDocPaymentInfo->ACode,
                                'Bank' => $TempDocPaymentInfo->Bank,
                                'Payments' => $TempDocPaymentInfo->Payments,
                                'Brand' => $TempDocPaymentInfo->Brand,
                                'BrandName' => $TempDocPaymentInfo->BrandName,
                                'Issuer' => $TempDocPaymentInfo->Issuer,
                                'tashType' => $TempDocPaymentInfo->tashType,
                                'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                'CheckDate' => $TempDocPaymentInfo->CheckDate,
                                'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                'BankDate' => $TempDocPaymentInfo->BankDate,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'Excess' => $TempDocPaymentInfo->Excess,
                                'UserDate' => $UserDate,
                                'DocDate' => $DocDate,
                                'DocMonth' => $DocMonth,
                                'DocYear' => $DocYear,
                                'DocTime' => $DocTime,
                                'CreditType' => $TempDocPaymentInfo->CreditType,
                                'ActivityJson' => $ActivityJson,
                                'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                'BusinessType' => $SettingsInfo->BusinessType,
                                'PayToken' => $TempDocPaymentInfo->PayToken,
                                'TransactionId' => $TempDocPaymentInfo->TransactionId,
                                'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                            ));
                        } /// פירוט תקבולי אשראי - כל תשלום בשורה נפרדת
                        elseif ($TempDocPaymentInfo->Payments == 1 || $CpaType == 1) {

                            $UserDate = $TempDocPaymentInfo->UserDate;
                            $CreditDate = date('Y-m-d');

                            $DocsList = DB::table('docs_payment')->insertGetId(array(
                                'CompanyNum' => $CompanyNum,
                                'Brands' => $Brands,
                                'TrueCompanyNum' => $TrueCompanyNum,
                                'TypeDoc' => $TypeDoc,
                                'TypeHeader' => $TypeHeader,
                                'TypeNumber' => $TypeNumber,
                                'DocsId' => $DocId,
                                'ClientId' => $ClientId,
                                'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                'Amount' => $TempDocPaymentInfo->Amount,
                                'L4digit' => $TempDocPaymentInfo->L4digit,
                                'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                'CCode' => $TempDocPaymentInfo->CCode,
                                'ACode' => $TempDocPaymentInfo->ACode,
                                'Bank' => $TempDocPaymentInfo->Bank,
                                'Payments' => $TempDocPaymentInfo->Payments,
                                'Brand' => $TempDocPaymentInfo->Brand,
                                'BrandName' => $TempDocPaymentInfo->BrandName,
                                'Issuer' => $TempDocPaymentInfo->Issuer,
                                'tashType' => $TempDocPaymentInfo->tashType,
                                'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                'CheckDate' => $CreditDate,
                                'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                'BankDate' => $TempDocPaymentInfo->BankDate,
                                'Dates' => $Dates,
                                'UserId' => $UserId,
                                'Excess' => $TempDocPaymentInfo->Excess,
                                'UserDate' => $UserDate,
                                'DocDate' => $DocDate,
                                'DocMonth' => $DocMonth,
                                'DocYear' => $DocYear,
                                'DocTime' => $DocTime,
                                'CreditType' => $TempDocPaymentInfo->CreditType,
                                'ActivityJson' => $ActivityJson,
                                'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                'BusinessType' => $SettingsInfo->BusinessType,
                                'PayToken' => $TempDocPaymentInfo->PayToken,
                                'TransactionId' => $TempDocPaymentInfo->TransactionId,
                                'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                            ));
                        } else {
                            $UserDate = $TempDocPaymentInfo->UserDate;
                            $Payments = $TempDocPaymentInfo->Payments;
                            $Amount = $TempDocPaymentInfo->Amount;
                            $Money = $Amount;
                            $Payment = $Payments;
                            $MyMoney = $Money / $Payment;
                            $MyMoney = number_format((float)$MyMoney, 2, '.', '');
                            list($whole, $decimal) = explode('.', $MyMoney);
                            $CehckPayment = $whole * ($Payment - 1);
                            $FirstPayment = $Money - $CehckPayment;
                            $FirstPayment = number_format((float)$FirstPayment, 2, '.', '');
                            $SecendPayment = $whole;
                            $SecendPayment = number_format((float)$SecendPayment, 2, '.', '');
                            $count = $Payments;

                            for ($i = 1; $i <= $count; $i++) {
                                if ($i == 1) {
                                    $FixAmount = $FirstPayment;
                                } else {
                                    $FixAmount = $SecendPayment;
                                }
                                $PaymentsNew = $i;

                                $add = $i - 1;
                                $AddDate = '+' . $add . ' month';
                                $CreditDate = date('Y-m-d', strtotime($AddDate, strtotime($UserDate)));
                                $DocsList = DB::table('docs_payment')->insertGetId(array(
                                    'CompanyNum' => $CompanyNum,
                                    'Brands' => $Brands,
                                    'TrueCompanyNum' => $TrueCompanyNum,
                                    'TypeDoc' => $TypeDoc,
                                    'TypeHeader' => $TypeHeader,
                                    'TypeNumber' => $TypeNumber,
                                    'DocsId' => $DocId,
                                    'ClientId' => $ClientId,
                                    'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                    'Amount' => $FixAmount,
                                    'L4digit' => $TempDocPaymentInfo->L4digit,
                                    'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                    'CCode' => $TempDocPaymentInfo->CCode,
                                    'ACode' => $TempDocPaymentInfo->ACode,
                                    'Bank' => $TempDocPaymentInfo->Bank,
                                    'Payments' => $PaymentsNew,
                                    'Brand' => $TempDocPaymentInfo->Brand,
                                    'BrandName' => $TempDocPaymentInfo->BrandName,
                                    'Issuer' => $TempDocPaymentInfo->Issuer,
                                    'tashType' => $TempDocPaymentInfo->tashType,
                                    'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                    'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                    'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                    'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                    'CheckDate' => $CreditDate,
                                    'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                    'BankDate' => $TempDocPaymentInfo->BankDate,
                                    'Dates' => $Dates,
                                    'UserId' => $UserId,
                                    'Excess' => $TempDocPaymentInfo->Excess,
                                    'UserDate' => $UserDate,
                                    'DocDate' => $DocDate,
                                    'DocMonth' => $DocMonth,
                                    'DocYear' => $DocYear,
                                    'DocTime' => $DocTime,
                                    'CreditType' => $TempDocPaymentInfo->CreditType,
                                    'ActivityJson' => $ActivityJson,
                                    'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                    'BusinessType' => $SettingsInfo->BusinessType,
                                    'PayToken' => $TempDocPaymentInfo->PayToken,
                                    'TransactionId' => $TempDocPaymentInfo->TransactionId,
                                    'MeshulamPageCode' => $TempDocPaymentInfo->MeshulamPageCode,
                                ));
                            }
                        }
                    }
                    /// מחיקת נתונים
                    TempReceiptPaymentClient::where('TempId', '=', $ClientId)->where('TypeDoc', '=', $ClientGroupNumber)->delete();

                    //// עדכון מספר קבלה
                    $ActivityIds = explode(',', $FinalinvoiceId);
                    foreach ($ActivityIds as $ActivityId) {
                        $ActivityInfo = DB::table('client_activities')->where('id', '=', $ActivityId)->first();

                        $TrueClientId = $ActivityInfo->ClientId;
                        $ItemId = $ActivityInfo->ItemId;
                        $ReceiptIdJson = '';
                        $ReceiptIdJson .= '{"data": [';

                        if ($ActivityInfo->ReceiptId != '') {
                            $Loops = json_decode($ActivityInfo->ReceiptId, true);
                            foreach ($Loops['data'] as $key => $val) {
                                $DocIdDB = $val['DocId'];
                                $ReceiptIdJson .= '{"DocId": "' . $DocIdDB . '"},';
                            }
                        }

                        $ReceiptIdJson .= '{"DocId": "' . $DocId . '"}';
                        $ReceiptIdJson .= ']}';
                        DB::table('client_activities')
                            ->where('id', $ActivityId)
                            ->where('ClientId', '=', $TrueClientId)
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->update(array('ReceiptId' => $ReceiptIdJson));
                    }
                    //////  עדכון טבלת דוח מכירות

                    $DocsInfo = Docs::find($DocId);
                    // $DocsInfo = DB::table('docs')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $DocId)->first();
                    if (isset($DocsInfo->ActivityJson) && $DocsInfo->ActivityJson != '') {
                        $Loops = json_decode($DocsInfo->ActivityJson, true);
                        foreach ($Loops['data'] as $key => $val) {
                            $ItemId = $val['ItemId'];
                            $NewAmount = $val['NewAmount'];
                            $OldBalanceMoney = $val['OldBalanceMoney'];
                            if ($NewAmount != $OldBalanceMoney) {
                                $FixPrice = $OldBalanceMoney - $NewAmount;
                                $ActivityInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();

                                if ($FixPrice != '0.00' || @$ActivityInfo->ItemName != '') {
                                    DB::table('docs2item')->insertGetId(array('CompanyNum' => $CompanyNum,
                                        'TrueCompanyNum' => $TrueCompanyNum,
                                        'Brands' => $Brands,
                                        'ClientId' => $ClientId,
                                        'ItemId' => $ItemId,
                                        'DocsId' => $DocId,
                                        'Amount' => $FixPrice,
                                        'Department' => $ActivityInfo->Department,
                                        'MemberShip' => $ActivityInfo->MemberShip,
                                        'ItemName' => htmlentities($val['ItemText']),
                                        'UserDate' => $UserDate,
                                        'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                        'BusinessType' => $SettingsInfo->BusinessType
                                    ));
                                }
                            }
                        }
                    }

                    // עדכון חוב לקוח
                    /** @var Client $ClientInfo */
                    $ClientInfo = Client::find($ClientId);
                    $ClientInfo->updateBalanceAmount();

                    AppNotification::sendReceipt($ClientInfo, $RandomNumber, $TypeDoc, $DocsInfo);
                    json_message();

                } catch (Exception $e) {
                    LoggerService::error($e->getMessage(), LoggerService::CATEGORY_EXCEPTION);
                    json_message(lang('error_oops_something_went_wrong'), false);
                }
            } else {
                json_message($validator->errors()->toArray(), false);
            }


        // SupportChangeCompanyNum - Edit



        case 'SupportChangeCompanyNum':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CompanyNum' => $_POST['CompanyNum']),

                array('CompanyNum' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $_POST['CompanyNum'];



                $UserId = Auth::user()->id;



                if (Auth::user()->role_id == '1') {

                    DB::table('users')

                        ->where('id', $UserId)

                        ->update(array('CompanyNum' => $CompanyNum));

                }



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'SendTokens':
            exit;

            if (Auth::guest()) exit;


            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $CreditOptionToken = $_POST['CreditOptionToken'];

                $CC2Token = $_POST['CC2Token']; /// כרטיס מגנטי

                $CCToken = $_POST['CCToken']; /// אשראי הקלדה ידנית

                $TmonthToken = $_POST['TmonthToken'];

                $TyearToken = $_POST['TyearToken'];

                $cvvToken = $_POST['cvvToken'];



                if ($CreditOptionToken == '1' && @$CC2Token == '') {

                    json_message(lang('card_process_ajax'), false);

                    exit;

                } elseif ($CreditOptionToken == '2' && @$CCToken == '' || $CreditOptionToken == '2' && @$TmonthToken == '' || $CreditOptionToken == '2' && @$TyearToken == '') {

                    json_message(lang('insert_cc_numb_ajax'), false);

                    exit;

                }

                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                // minor client section
                if($ClientInfo->parentClientId != 0) {
                    $parentClient = DB::table('boostapp.client')->where('id' ,'=', $ClientInfo->parentClientId)->where('CompanyNum' ,'=', $CompanyNum)->first();
                    if(!empty($parentClient)) {
                        $ClientId = $parentClient->id;
                        $ClientInfo = $parentClient;
                    }
                }

                //// בדיקת מסוף לסניף שונה

                $YaadNumber = $SettingsInfo->YaadNumber;



                if ($ClientInfo->Brands != '0') {



                    $BrandCheckYaadNumber = DB::table('brands')->where('id', '=', $ClientInfo->Brands)->where('CompanyNum', $CompanyNum)->first();



                    if (@$BrandCheckYaadNumber->YaadNumber != '0') {

                        $YaadNumber = $BrandCheckYaadNumber->YaadNumber;

                    }



                }

                $host = 'https://icom.yaad.net/cgi-bin/yaadpay/yaadpay.pl'; // gateway host

                $formdata['action'] = 'soft';

                $formdata['Masof'] = $YaadNumber;

                $formdata['PassP'] = 'beepos.co.il';

                $formdata['Info'] = htmlentities($SettingsInfo->CompanyName);

                $formdata['UTF8'] = 'True';

                $formdata['UTF8out'] = 'True';

                $formdata['MoreData'] = 'True';

                $formdata['Amount'] = '1';

                $formdata['J5'] = 'J2';



                if ($CreditOptionToken == '2') {

                    $formdata['CC'] = $_REQUEST['CCToken'];

                    $formdata['Tmonth'] = $_REQUEST['TmonthToken'];

                    $formdata['Tyear'] = $_REQUEST['TyearToken'];

                    $formdata['cvv'] = $_REQUEST['cvvToken'];

                }

                if ($CreditOptionToken == '1') {

                    $formdata['CC2'] = $_REQUEST['CC2Token'];

                }


                $formdata['UserId'] = '000000000'; //htmlentities(@$ClientInfo->CompanyId);

                $formdata['ClientName'] = htmlentities(@$ClientInfo->FirstName);

                $formdata['ClientLName'] = htmlentities(@$ClientInfo->LastName);

                $formdata['cell'] = htmlentities(@$ClientInfo->ContactMobile);

                $formdata['email'] = htmlentities(@$ClientInfo->Email);



                $poststring = '';



                //formatting the request string

                foreach ($formdata AS $key => $val) {

                    $poststring .= $key . "=" . $val . "&";

                }



                // strip off trailing ampersand

                $poststring = substr($poststring, 0, -1);



                // init curl connection

                $CR = curl_init();

                curl_setopt($CR, CURLOPT_URL, $host);

                curl_setopt($CR, CURLOPT_POST, true);

                curl_setopt($CR, CURLOPT_FAILONERROR, 1);

                curl_setopt($CR, CURLOPT_POSTFIELDS, $poststring);

                curl_setopt($CR, CURLOPT_RETURNTRANSFER, true);

                curl_setopt($CR, CURLOPT_FOLLOWLOCATION, true);

                curl_setopt($CR, CURLOPT_AUTOREFERER, TRUE);

                curl_setopt($CR, CURLOPT_SSL_VERIFYPEER, 0);

                curl_setopt($CR, CURLINFO_HEADER_OUT, true);



                // actual curl execution perfom

                $result = curl_exec($CR);

                $error = curl_error($CR);



                $header = curl_getinfo($CR, CURLINFO_HEADER_OUT);



                $TextResults = urldecode($result);

                $UrlSoft = 'https://wwww.247soft.co.il/?' . $result;

                $parts = parse_url($UrlSoft);

                parse_str($parts['query'], $query);

                $L4digit = $query['L4digit'];

                $YaadCode = $query['Id'];

                $CCode = $query['CCode'];

                $ACode = $query['ACode'];


                $UserId = Auth::user()->id;


                ////// יצירת טוקן ללקוח



                if ($CCode == '0' || $CCode == '700' || $CCode == '600') {



                    $host = 'https://icom.yaad.net/cgi-bin/yaadpay/yaadpay.pl'; // gateway host



                    $formdata['action'] = 'getToken';

                    $formdata['Masof'] = $YaadNumber;



                    $formdata['TransId'] = $YaadCode;



                    $poststring = '';



                    //formatting the request string

                    foreach ($formdata AS $key => $val) {

                        $poststring .= $key . "=" . $val . "&";

                    }



                    // strip off trailing ampersand

                    $poststring = substr($poststring, 0, -1);



                    // init curl connection

                    $CR = curl_init();

                    curl_setopt($CR, CURLOPT_URL, $host);

                    curl_setopt($CR, CURLOPT_POST, true);

                    curl_setopt($CR, CURLOPT_FAILONERROR, 1);

                    curl_setopt($CR, CURLOPT_POSTFIELDS, $poststring);

                    curl_setopt($CR, CURLOPT_RETURNTRANSFER, true);

                    curl_setopt($CR, CURLOPT_FOLLOWLOCATION, true);

                    curl_setopt($CR, CURLOPT_AUTOREFERER, TRUE);

                    curl_setopt($CR, CURLOPT_SSL_VERIFYPEER, 0);

                    curl_setopt($CR, CURLINFO_HEADER_OUT, true);



                    // actual curl execution perfom

                    $result = curl_exec($CR);

                    $error = curl_error($CR);



                    $header = curl_getinfo($CR, CURLINFO_HEADER_OUT);



                    $TextResults = urldecode($result);

                    $UrlSoft = 'https://wwww.247soft.co.il/?' . $result;



                    $parts = parse_url($UrlSoft);

                    parse_str($parts['query'], $query);



                    $YaadCode = $query['Id'];

                    $Token = $query['Token'];

                    $Tokef = $query['Tokef'];



                    $time = date('Y-m-d H:i:s');

                    $UserId = Auth::user()->id;



                    $string = @$_REQUEST['cvvToken'];

                    if ($string != '') {

                        $search = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

                        $replace = array('m-', 's-', 'q-', 'a-', 'o-', 'v-', 'r-', 'x-', 'p-', 't-');

                        $Cvv = str_replace($search, $replace, $string);

                    } else {

                        $Cvv = '';

                    }



                    $InsertToken = DB::table('token')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Token' => $Token, 'Tokef' => $Tokef, 'YaadCode' => $YaadCode, 'Dates' => $time, 'UserId' => $UserId, 'sme' => $Cvv, 'L4digit' => $L4digit, 'YaadNumber' => $YaadNumber)

                    );



                    $StatusNew = '1';

                    $StatusPay = lang('card_saved_ajax');



                } else {



                    $StatusNew = '0';

                    $StatusPay = @$StatusreditCard[$CCode];



                    if ($StatusPay == '') {

                        $StatusPay = lang('unknow_error_meshulam');

                    }





                }





                DB::table('log_yaad_return')->insertGetId(

                    array('UserId' => $UserId, 'Text' => @$TextResults, 'ClientId' => $ClientId, 'CompanyNum' => $CompanyNum, 'Status' => $CCode));





                json_message(array('Status' => $StatusPay, 'StatusNew' => $StatusNew));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AppPasswordAppUsers':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $CompanyNum = Auth::user()->CompanyNum;

                $UserId = Auth::user()->id;



                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', $ClientId)->first();

                $Email = $ClientInfo->Email;





                ///// שינוי יוזר באפליקציה



                $AppUsers = DB::table('boostapplogin.users')->where('email', '=', $Email)->first();



                if (@$AppUsers->newpassword == '' && $CompanyNum != '569121') {

                    $B_newpassword = Hash::make('!b247a*');

                } else {

                    $B_newpassword = @$AppUsers->newpassword;

                }





                $password = $B_newpassword;

                $newpassword = @$AppUsers->password;



                if (@$AppUsers->id != '') {

                    DB::table('boostapplogin.users')

                        ->where('id', $AppUsers->id)

                        ->where('email', $Email)

                        ->update(array('email' => $Email, 'password' => $password, 'newpassword' => $newpassword));

                }





                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        case 'SendAppUsers':

            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId']),
                array('ClientId' => 'Required')
            );

            if ($validator->passes()) {

                $ClientId = $_POST['ClientId'];

                $EmailAddress = @$_POST['EmailAddress'];
                $PhoneNumber = @$_POST['PhoneNumber'];

                $Via = $_POST['Via'];

                if ($Via == 'Email' && $EmailAddress==''){
                    json_message(lang('type_email_ajax'), false);
                    exit;
                } elseif ($Via == 'Sms' && $PhoneNumber=='') {
                    json_message(lang('type_mobile_number_ajax'), false);
                    exit;
                }

                $SendType = $Via == 'Email' ? 2 : 1;

                $CompanyNum = Auth::user()->CompanyNum;
                $UserId = Auth::user()->id;
                $ClientInfo = DB::table('client')->where('CompanyNum', $CompanyNum)->where('id', $ClientId)->first();
                $MakeRandomPass = mt_rand(100000, 999999);
                $password = Hash::make(trim($MakeRandomPass));
                $Email = $ClientInfo->Email ? trim($ClientInfo->Email) : '';
                $GetUsersId = '0';
                $ContactMobile = !empty($ClientInfo->ContactMobile) ? $ClientInfo->ContactMobile : '';
                $mobileRegex = Client::mobileRegex;
                if($ClientInfo->parentClientId != 0) {     //minor client
                    json_message(lang('minor_error_login_ajax'), false);
                    exit;
                }

                if (empty($ContactMobile) || !preg_match($mobileRegex ,$ContactMobile)) {
                    json_message(lang('update_mobile_phone_ajax'), false);
                    exit;
                }
                $mobile = substr($ClientInfo->ContactMobile, 0, 4) == '+972' ? substr($ClientInfo->ContactMobile, 4, strlen($ClientInfo->ContactMobile)) : $ClientInfo->ContactMobile;
                $mobile = substr($mobile, 0, 1) == '0' ? substr($mobile, 1, strlen($mobile)) : $mobile;
                $mobile = '+972'.$mobile;

                $AppUsers = DB::table('boostapplogin.users')->where('newUsername', '=', $mobile)->first();

                if (!empty($AppUsers)) { /// משתמש קיים באפליקציה
                    $GetUsersId = $AppUsers->id;
                    $AppStudio = DB::table('boostapplogin.studio')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();

                    if (!empty($AppStudio)){

                        $GetUsersId = $AppUsers->id;
                        //   set date and time to allow new studio url saved first
                        $lastDate = date("Y-m-d");
                        $lastTime = date("H:i:s");

                        $updateStudio = DB::table('boostapplogin.studio')
                            ->where('id', $AppStudio->id)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array(
                                'UserId' => $AppUsers->id,
                                'Status' => 0,
                                'StatusBadPoint' => 0,
                                'LastDate' => $lastDate,
                                'LastTime' => $lastTime));

                    } else { /// הקם חדש
                        if ($ClientId != 0){
                            $GetUsersId = $AppUsers->id;
                            $AppStudio = DB::table('boostapplogin.studio')->insertGetId(array(
                                    'StudioUrl' => $SettingsInfo->StudioUrl,
                                    'StudioName' => htmlentities($SettingsInfo->AppName),
                                    'CompanyNum' => $CompanyNum,
                                    'UserId' => $AppUsers->id,
                                    'ClientId' => $ClientId,
                                    'Memotag' => $SettingsInfo->Memotag,
                                    'Folder' => $SettingsInfo->Folder,
                                    'Takanon' => $ClientInfo->Takanon ?? 0,
                                    'Medical' => $ClientInfo->Medical ?? 0
                            ));

                        }

                    }


                    $updateUser = DB::table('boostapplogin.users')
                        ->where('id', $AppUsers->id)
                        ->update(array(
                            'username' => $Email ? trim($Email) : '',
                            'email' => $Email ? trim($Email) : '',
                            'password' => $password,
                            'PassAct' => 0
                        ));


                } else { /// שינוי יוזר באפלקיציה

                    $AppUserId = DB::table('boostapplogin.users')->insertGetId(array(
                        'username' => trim($ClientInfo->Email),
                        'email' => trim($ClientInfo->Email),
                        'newUsername' => $mobile,
                        'password' => $password,
                        'display_name' => htmlentities($ClientInfo->CompanyName),
                        'FirstName' => htmlentities($ClientInfo->FirstName),
                        'LastName' => htmlentities($ClientInfo->LastName),
                        'ContactMobile' => $mobile,
                        'AppLoginId' => $mobile,
                        'status' => 1,
                        'PassAct' => 0
                    ));

                    $AppStudio = DB::table('boostapplogin.studio')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();


                    if (!empty($AppStudio)) {

                        DB::table('boostapplogin.studio')
                            ->where('id', $AppStudio->id)
                            ->where('CompanyNum', $CompanyNum)
                            ->update(array('UserId' => $AppUserId, 'Status' => 0, 'StatusBadPoint' => 0));

                        $GetUsersId = $AppUserId;

                        // look for unused duplicate users
                        if(!empty($Email)) {
                            $getUnused = DB::table('boostapplogin.users')->where('email', '=', $Email)->where('id', '!=', $AppUserId)->whereNull('newUsername')->first();
                            if(!empty($getUnused)) {
                                $getStudio = DB::table('boostapplogin.studio')->where('UserId', '=', $getUnused->id)->first();
                                if(empty($getStudio)) {
                                    // delete duplicate user
                                    $delUser = DB::table('boostapplogin.users')->where('id', $getUnused->id)->delete();
                                }
                            }
                        }

                    } else { ////  הקדם חדש

                        $GetUsersId = $AppUserId;
                        if ($AppUserId!='0' && $ClientId!='0') {
                            $AppStudio = DB::table('boostapplogin.studio')->insertGetId(array(
                                    'StudioUrl' => $SettingsInfo->StudioUrl,
                                    'StudioName' => htmlentities($SettingsInfo->AppName),
                                    'CompanyNum' => $CompanyNum,
                                    'UserId' => $AppUserId,
                                    'ClientId' => $ClientId,
                                    'Memotag' => $SettingsInfo->Memotag,
                                    'Folder' => $SettingsInfo->Folder,
                                    'Takanon' => $ClientInfo->Takanon ?? 0,
                                    'Medical' => $ClientInfo->Medical ?? 0
                            ));
                        }

                    }

                }


                ///////////  שליחת פרטי התחברות עדכון דואר אלקטרוני

                $Date = date('Y-m-d');
                $Time = date('H:i:s');
                $Dates = date('Y-m-d H:i:s');

                $Template = (new Notificationcontent())->getByTypeAndCompany($CompanyNum, 21);

                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=' , $CompanyNum)->first();
                $CompanyInfo = Company::getInstance();

                /// עדכון תבנית הודעה

                $GooglePlayLink = 'https://play.google.com/store/apps/details?id=com.connect_computer.boostnew&gl=IL';
                $AppStoreLink = 'https://apps.apple.com/us/app/boost-%D7%91%D7%95%D7%A1%D7%98/id1479519489';

                if (!empty($CompanyInfo->GooglePlayLink)){
                    $GooglePlayLink = $CompanyInfo->GooglePlayLink;
                }
                if (!empty($CompanyInfo->AppStoreLink )){
                    $AppStoreLink = $CompanyInfo->AppStoreLink;
                }

                $AppStore = '<a href="'.$AppStoreLink.'">App Store</a>';
                $GooglePlay = '<a href="'.$GooglePlayLink.'">Google Play</a>';

                $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName,$Template->Content);
                $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '',$Content1);
                $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '' ,$Content2);
                $Content4 = str_replace(Notificationcontent::REPLACE_ARR["username_single"], $Email ?? '',$Content3);
                $Content5 = str_replace(Notificationcontent::REPLACE_ARR["password_single"], $MakeRandomPass ,$Content4);
                $Content6 = str_replace("App Store", $AppStore, $Content5);
                $ContentTrue = str_replace("Google Play", $GooglePlay,$Content6);

                if ($Via=='Email'){
                    $Text = $ContentTrue; /// משיכת הודעת ביטול שיעור מבסיס הנתונים
                }
                else {
                    $Text = lang('login_sms_ajax').'
            '.lang('username_ajax').' '.$Email.'
            '.lang('email_password_ajax').' '.$MakeRandomPass.'
            '.$CompanyInfo->AppName;
                }

                $Subject = $Template->Subject;

                if ($GetUsersId != 0){
                    $AddNotification = DB::table('appnotification')->insertGetId(array(
                        'CompanyNum' => $CompanyNum,
                        'ClientId' => $ClientId,
                        'Type' => $SendType,
                        'Subject' => $Subject,
                        'Text' => $Text,
                        'Dates' => $Dates,
                        'UserId' => $UserId,
                        'Date' => $Date,
                        'Time' => $Time,
                        'SendType' => '1',
                        'EmailAddress' => $EmailAddress,
                        'PhoneNumber' => $PhoneNumber,
                        'priority' => '1'
                    ));

                    DB::table('log')->insert(array('UserId' => $UserId, 'Text' => 'נשלחו פרטי התחברות',
                        'Dates' => date('Y-m-d H:i:s'), 'CompanyNum' => $CompanyNum));
                }


                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;

        case 'savePost':

            break;


        case 'CloseAppUsers':



            if (Auth::guest()) exit;



            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId']),
                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {

                $ClientId = $_POST['ClientId'];
                $CompanyNum = Auth::user()->CompanyNum;
                $UserId = Auth::user()->id;

                DB::table('boostapplogin.studio')
                    ->where('ClientId', '=', $ClientId)
                    ->where('CompanyNum', '=', $CompanyNum)
                    ->update(array('Status' => 1));


                json_message();

            } else {

                json_message($validator->errors()->toArray(), false);

            }

            break;





        case 'SendClientForm':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Email' => $_POST['Email']),

                array('Email' => 'Required')

            );



            if ($validator->passes()) {



                $Email = $_POST['Email'];

                $Brands = $_POST['Brands'];





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $GroupNumber = rand(1262055681, 1262055681);

                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                $CreateCode = uniqid($GroupNumber);

                $CreateCode;

                $time = strtotime(date('Y-m-d'));

                $TimeOut = date("Y-m-d", strtotime("+1 month", $time));



                $AddTempClient = DB::table('tempclient')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'CreateCode' => $CreateCode, 'UserId' => $UserId, 'TimeOut' => $TimeOut));





                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();





/// שליחת מייל הצטרפות לשותף

                $LunchLink = 'https://new.boostapp.co.il/online.php?CreateCode=' . $CreateCode;

                $LunchName = $SettingsInfo->AppName;

                $ClientEmail = $Email;

                $subject = lang('join_form_ajax').' '.$LunchName;

                $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180"  /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_two_ajax').'</span><br /><br />



			 '.lang('join_link_ajax').' ' . $LunchName . ':<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

	 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';





                $mail = new PHPMailer();



                $mail->IsSMTP(); // enable SMTP

                $mail->SMTPAuth = true; // authentication enabled

                $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                $mail->Host = "smtp.sendgrid.net";

                $mail->Port = 587; // or 587

                $mail->IsHTML(true);

                $mail->Username = EmailService::USERNAME_SENDGRID;

                $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                $mail->AddAddress($ClientEmail);

//Set the subject line

                $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                $mail->MsgHTML($message);

//Replace the plain text body with one created manually

                $mail->AltBody = ($message);



//Send the message, check for errors

                if (!$mail->Send()) {

                    "Mailer Error: " . $mail->ErrorInfo;

                } else {

                    "Message sent!";

                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        ///// זיכוי מכרטיס לקוח מסמכים במערכת



        case 'SaveReceiptRefound':
            if (Auth::guest()) exit;
            $validator = Validator::make(
                array('ClientId' => $_POST['ClientId'], 'GroupNumber' => $_POST['GroupNumber']),
                array('ClientId' => 'Required', 'GroupNumber' => 'Required')
            );

            try {
                if (!$validator->passes()) {
                    json_message($validator->errors()->toArray(), false);
                }

                $UserId = Auth::user()->id;
                $CompanyNum = Auth::user()->CompanyNum;
                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();
                $CpaType = $SettingsInfo->CpaType;
                $ClientId = $_POST['ClientId'];
                $UserDate = date('Y-m-d');
                $TypeHeader = '400'; /// קבלה
                $FinalinvoiceId = $_POST['FinalinvoiceId']; // מנויים לתשלום
                $TrueFinalinvoicenum = $_POST['TrueFinalinvoicenum']; /// סה"כ כסף
                $ClientGroupNumber = $_POST['GroupNumber'];
                $ManualInvoice = '0';
                $DocConvert = '0';
                $PaymentRole = '1';
                $Dates = date('Y-m-d H:i:s');

                if (@$FinalinvoiceId == '') {
                    json_message(lang('error_generate_document_subscription_ajax'), false);
                    exit;
                }

                /// בדיקת תקבול קיים
                $CheckPayments = DB::table('temp_receipt_payment_client')->where('TempId', '=', $ClientId)->where('TypeDoc', '=', $ClientGroupNumber)->where('CompanyNum', '=', $CompanyNum)->count();
                if ($CheckPayments == 0) {
                    json_message(lang('error_doc_without_refund_ajax'), false);
                    exit;
                }

                //// בדיקת סניפים
                if (@$SettingsInfo->BrandsMain != '0' && @$SettingsInfo->MainAccounting == '1') {
                    $TrueCompanyNum = $SettingsInfo->BrandsMain;
                } else {
                    $TrueCompanyNum = $CompanyNum;
                }

                /// סוג מסמך וקבלת ID
                $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('TrueCompanyNum', '=', $TrueCompanyNum)->first();
                $TypeDoc = $GetDocsId->id;

                /// בדיקת מספור מסמך + תאריך אחרון
                $DocsTableNew = DB::table('docstable')->where('id', '=', $TypeDoc)->where('TrueCompanyNum', '=', $TrueCompanyNum)->first();
                if ($DocsTableNew->Status == '1') {
                    json_message(lang('error_doc_type_ajax'), false);
                    exit;
                }

                $GetAmount = DB::table('temp_receipt_payment_client')->where('TempId', '=', $ClientId)->where('TypeDoc', '=', $ClientGroupNumber)->where('CompanyNum', '=', $CompanyNum)->sum('Amount');

                /// עדכון מנוי בתשלום מלא / תשלום חלקי
                $ActivityJson = [];
                $NewAmount = $GetAmount;
                $NewAmountFinal = $GetAmount;
                $NewTempId = explode(',', $FinalinvoiceId);
                $Newcount = count($NewTempId);
                $Newi = '1';

                foreach ($NewTempId as $ActivityId) {
                    $ActivityInfo = ClientActivities::find($ActivityId);
                    $ItemText = Utils::safeText($ActivityInfo->ItemText);
                    $BalanceMoney = $ActivityInfo->BalanceRefoundMoney;
                    $ItemId = $ActivityInfo->ItemId;
                    $TrueClientId = $ActivityInfo->ClientId;
                    $BalanceRefoundMoney = (($ActivityInfo->ItemPriceVatDiscount + $ActivityInfo->VatAmount) - $ActivityInfo->BalanceMoney) - ($ActivityInfo->TrueBalanceRefoundMoney);
                    $FixBalanceRefoundMoney = ($ActivityInfo->TrueBalanceRefoundMoney) - ($BalanceMoney);

                    /// בדיקת מצב תקבול לעומת תשלום פעילות
                    if ($NewAmount >= $BalanceRefoundMoney) {
                        /// סוגר פעילות ותשלום מלא
                        $NewAmount = $NewAmount - $BalanceRefoundMoney; ///50
                        $NewAmounts = str_replace('-', "", $NewAmount - $NewAmountFinal); // 40
                        $TrueBalanceRefoundMoney = $ActivityInfo->TrueBalanceRefoundMoney + $NewAmounts;
                        $NewAmountFinal = $GetAmount - $NewAmounts;

                        $ActivityInfo->BalanceRefoundMoney = $NewAmounts;
                        $ActivityInfo->TrueBalanceRefoundMoney = $TrueBalanceRefoundMoney;
                        if ($ActivityInfo->isForMeeting == 1 && $ActivityInfo->isPaymentForSingleClass == 1)
                            $ActivityInfo->BalanceMoney = $ActivityInfo->BalanceMoney + $BalanceRefoundMoney;
                        $ActivityInfo->save();

                        $ActivityJson[] = [
                            'ItemText' => $ItemText,
                            'ItemId' => $ItemId,
                            'OldBalanceMoney' => $BalanceMoney,
                            'NewAmount' => 0,
                            'FixNewAmount' => $NewAmounts
                        ];
                    } else {
                        $TrueBalanceRefoundMoney = $ActivityInfo->TrueBalanceRefoundMoney + $NewAmount;

                        $ActivityInfo->BalanceRefoundMoney = $NewAmount;
                        $ActivityInfo->TrueBalanceRefoundMoney = $TrueBalanceRefoundMoney;
                        if ($ActivityInfo->isForMeeting == 1 && $ActivityInfo->isPaymentForSingleClass == 1)
                            $ActivityInfo->BalanceMoney = $ActivityInfo->BalanceMoney + $NewAmount;
                        $ActivityInfo->save();

                        $FixNewAmount = $NewAmount;
                        $NewAmount = $BalanceRefoundMoney - $NewAmount;

                        $ActivityJson[] = [
                            'ItemText' => $ItemText,
                            'ItemId' => $ItemId,
                            'OldBalanceMoney' => $BalanceMoney,
                            'NewAmount' => $NewAmount,
                            'FixNewAmount' => $FixNewAmount
                        ];
                        $NewAmount = '0';
                    }

                    ++$Newi;
                }

                $ActivityJson = json_encode(['data' => $ActivityJson], JSON_PRETTY_PRINT);

                $DocsCountGets = DB::table('docs')->where('TrueCompanyNum', '=', $TrueCompanyNum)->where('TypeHeader', '=', $TypeHeader)->orderBy('TypeNumber', 'DESC')->orderBy('id', 'DESC')->first();

                if (@$DocsCountGets->TypeNumber == '') {
                    $TypeNumber = $DocsTableNew->TypeNumber;
                } else {
                    $TypeNumber = $DocsCountGets->TypeNumber + 1;
                }

                /// סוג מסמך וקבלת ID
                $GetDocsId = DB::table('docstable')->where('TypeHeader', '=', $TypeHeader)->where('CompanyNum', '=', $CompanyNum)->first();
                $TypeDoc = $GetDocsId->id;
                $DocsTableNew = DB::table('docstable')->where('id', '=', $TypeDoc)->where('CompanyNum', '=', $CompanyNum)->first();

                /// פרטי לקוח
                $ClientDocInfo = Client::find($ClientId);
                $ClientDocInfo->updateBalanceAmount();
                $Brands = $ClientDocInfo->Brands;
                if ($ClientDocInfo->Company == '') {
                    $Company = htmlentities($ClientDocInfo->CompanyName);
                } else {
                    $Company = htmlentities($ClientDocInfo->Company);
                }

                $PaymentRole = '1';
                $PaymentTime = $UserDate;
                $DocDate = date('Y-m-d');
                $DocMonth = date("m", strtotime($UserDate));
                $DocYear = date("Y", strtotime($UserDate));
                $DocTime = date('H:i:s');

                /// מחולל מספר מסמך
                $GroupNumber = rand(1262055681, 1262055681);
                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);
                $RandomNumber = uniqid($GroupNumber);
                $DocsGetAmount = $GetAmount;
                $City = '';

                if ($ClientDocInfo->City != '0') {
                    $BusinessSettingsCity = DB::table('cities')->where('CityId', '=', $ClientDocInfo->City)->first();
                    $City = $BusinessSettingsCity->City;
                }

                if ($ClientDocInfo->Street == '0' || $ClientDocInfo->Street == '99999999') {
                    $Street = $ClientDocInfo->StreetH;
                } else {
                    $BusinessSettingsStreet = DB::table('street')->where('id', '=', $ClientDocInfo->Street)->first();
                    $Street = @$BusinessSettingsStreet->Street;
                }

                $remarks = empty($GetDocsId->DocsRemarks) ? '' : $GetDocsId->DocsRemarks;
                $remarks .= empty($_POST['Remarks']) ? '' : '<br>' .  $_POST['Remarks'];

                $DocId = DB::table('docs')->insertGetId(
                    array('CompanyNum' => $CompanyNum,
                        'Brands' => $Brands,
                        'TrueCompanyNum' => $TrueCompanyNum,
                        'TypeDoc' => $TypeDoc,
                        'TypeHeader' => $DocsTableNew->TypeHeader,
                        'TypeNumber' => $TypeNumber,
                        'ClientId' => $ClientId,
                        'UserDate' => $UserDate,
                        'Dates' => $Dates,
                        'Amount' => $DocsGetAmount,
                        'Vat' => '0',
                        'VatAmount' => '0',
                        'DiscountType' => '1',
                        'Discount' => '0',
                        'DiscountAmount' => '0',
                        'PaymentRole' => '1',
                        'Remarks' => $remarks,
                        'Company' => $Company,
                        'CompanyId' => $ClientDocInfo->CompanyId,
                        'ContactName' => $ClientDocInfo->CompanyName,
                        'Mobile' => $ClientDocInfo->ContactMobile,
                        'Phone' => $ClientDocInfo->ContactPhone,
                        'Fax' => $ClientDocInfo->ContactFax,
                        'Email' => $ClientDocInfo->Email,
                        'UserId' => $UserId,
                        'ManualInvoice' => $ManualInvoice,
                        'DocConvert' => $DocConvert,
                        'PaymentTime' => $PaymentTime,
                        'BalanceAmount' => '0',
                        'Street' => $Street,
                        'Number' => $ClientDocInfo->Number,
                        'PostCode' => $ClientDocInfo->PostCode,
                        'City' => $City,
                        'Accounts' => $DocsTableNew->Accounts,
                        'DocDate' => $DocDate,
                        'DocMonth' => $DocMonth,
                        'DocYear' => $DocYear,
                        'DocTime' => $DocTime,
                        'RandomUrl' => $RandomNumber,
                        'ActivityJson' => $ActivityJson,
                        'Status' => '1',
                        'Refound' => '1',
                        'BusinessCompanyId' => $SettingsInfo->CompanyId,
                        'BusinessType' => $SettingsInfo->BusinessType,
                        'TypeShva' => $SettingsInfo->TypeShva,
                        'CpaType' => $SettingsInfo->CpaType
                    ));

                foreach ($NewTempId as $ActivityId){
                    DocsClientActivities::saveRelation($DocId, $ActivityId);
                }

                /// שמירת נתוני מסמך תקבולים
                $TempDocPaymentsInfo = DB::table('temp_receipt_payment_client')->where('TempId', '=', $ClientId)->where('TypeDoc', '=', $ClientGroupNumber)->get();
                foreach ($TempDocPaymentsInfo as $TempDocPaymentInfo) {
                    $RefoundAmount = '-' . $TempDocPaymentInfo->Amount;
                    if ($TempDocPaymentInfo->TypePayment != '3') {
                        $DocsList = DB::table('docs_payment')->insertGetId(
                            array('CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'TrueCompanyNum' => $TrueCompanyNum, 'TypeDoc' => $TypeDoc, 'TypeHeader' => $TypeHeader, 'TypeNumber' => $TypeNumber, 'DocsId' => $DocId, 'ClientId' => $ClientId, 'TypePayment' => $TempDocPaymentInfo->TypePayment, 'Amount' => $RefoundAmount, 'L4digit' => $TempDocPaymentInfo->L4digit, 'YaadCode' => $TempDocPaymentInfo->YaadCode, 'CCode' => $TempDocPaymentInfo->CCode, 'ACode' => $TempDocPaymentInfo->ACode, 'Bank' => $TempDocPaymentInfo->Bank, 'Payments' => $TempDocPaymentInfo->Payments, 'Brand' => $TempDocPaymentInfo->Brand, 'BrandName' => $TempDocPaymentInfo->BrandName, 'Issuer' => $TempDocPaymentInfo->Issuer, 'tashType' => $TempDocPaymentInfo->tashType, 'CheckBank' => $TempDocPaymentInfo->CheckBank, 'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif, 'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode, 'CheckNumber' => $TempDocPaymentInfo->CheckNumber, 'CheckDate' => $TempDocPaymentInfo->CheckDate, 'BankNumber' => $TempDocPaymentInfo->BankNumber, 'BankDate' => $TempDocPaymentInfo->BankDate, 'Dates' => $Dates, 'UserId' => $UserId, 'Excess' => $TempDocPaymentInfo->Excess, 'UserDate' => $UserDate, 'DocDate' => $DocDate, 'DocMonth' => $DocMonth, 'DocYear' => $DocYear, 'DocTime' => $DocTime, 'CreditType' => $TempDocPaymentInfo->CreditType, 'ActivityJson' => $ActivityJson, 'Refound' => '1', 'BusinessCompanyId' => $SettingsInfo->CompanyId, 'BusinessType' => $SettingsInfo->BusinessType, 'PayToken' => $TempDocPaymentInfo->PayToken, 'TransactionId' => $TempDocPaymentInfo->TransactionId));
                    } /// פירוט תקבולי אשראי - כל תשלום בשורה נפרדת
                    else {
                        /// תשלום אחד
                        if (($TempDocPaymentInfo->Payments == 1 && $CpaType == 0) || $CpaType == 1) {
                            $UserDate = $TempDocPaymentInfo->UserDate;
                            $CreditDate = date('Y-m-d');
                            $DocsList = DB::table('docs_payment')->insertGetId(
                                array('CompanyNum' => $CompanyNum,
                                    'Brands' => $Brands,
                                    'TrueCompanyNum' => $TrueCompanyNum,
                                    'TypeDoc' => $TypeDoc,
                                    'TypeHeader' => $TypeHeader,
                                    'TypeNumber' => $TypeNumber,
                                    'DocsId' => $DocId,
                                    'ClientId' => $ClientId,
                                    'TypePayment' => $TempDocPaymentInfo->TypePayment,
                                    'Amount' => $RefoundAmount,
                                    'L4digit' => $TempDocPaymentInfo->L4digit,
                                    'YaadCode' => $TempDocPaymentInfo->YaadCode,
                                    'CCode' => $TempDocPaymentInfo->CCode,
                                    'ACode' => $TempDocPaymentInfo->ACode,
                                    'Bank' => $TempDocPaymentInfo->Bank,
                                    'Payments' => $TempDocPaymentInfo->Payments,
                                    'Brand' => $TempDocPaymentInfo->Brand,
                                    'BrandName' => $TempDocPaymentInfo->BrandName,
                                    'Issuer' => $TempDocPaymentInfo->Issuer,
                                    'tashType' => $TempDocPaymentInfo->tashType,
                                    'CheckBank' => $TempDocPaymentInfo->CheckBank,
                                    'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif,
                                    'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode,
                                    'CheckNumber' => $TempDocPaymentInfo->CheckNumber,
                                    'CheckDate' => $CreditDate,
                                    'BankNumber' => $TempDocPaymentInfo->BankNumber,
                                    'BankDate' => $TempDocPaymentInfo->BankDate,
                                    'Dates' => $Dates,
                                    'UserId' => $UserId,
                                    'Excess' => $TempDocPaymentInfo->Excess,
                                    'UserDate' => $UserDate,
                                    'DocDate' => $DocDate,
                                    'DocMonth' => $DocMonth,
                                    'DocYear' => $DocYear,
                                    'DocTime' => $DocTime,
                                    'CreditType' => $TempDocPaymentInfo->CreditType,
                                    'ActivityJson' => $ActivityJson,
                                    'Refound' => '1',
                                    'BusinessCompanyId' => $SettingsInfo->CompanyId,
                                    'BusinessType' => $SettingsInfo->BusinessType,
                                    'PayToken' => $TempDocPaymentInfo->PayToken,
                                    'TransactionId' => $TempDocPaymentInfo->TransactionId));
                        } else {
                            $UserDate = $TempDocPaymentInfo->UserDate;
                            $Payments = $TempDocPaymentInfo->Payments;
                            $Amount = $TempDocPaymentInfo->Amount;
                            $Money = $Amount;
                            $Payment = $Payments;

                            $MyMoney = $Money / $Payment;
                            $MyMoney = number_format((float)$MyMoney, 2, '.', '');
                            list($whole, $decimal) = explode('.', $MyMoney);
                            $CehckPayment = $whole * ($Payment - 1);
                            $FirstPayment = $Money - $CehckPayment;
                            $FirstPayment = number_format((float)$FirstPayment, 2, '.', '');
                            $SecendPayment = $whole;
                            $SecendPayment = number_format((float)$SecendPayment, 2, '.', '');

                            $count = $Payments;

                            for ($i = 1; $i <= $count; $i++) {
                                if ($i == 1) {
                                    $FixAmount = '-' . $FirstPayment;
                                } else {
                                    $FixAmount = '-' . $SecendPayment;
                                }

                                $PaymentsNew = $i;
                                $add = $i - 1;
                                $AddDate = '+' . $add . ' month';
                                $CreditDate = date('Y-m-d', strtotime($AddDate, strtotime($UserDate)));

                                $DocsList = DB::table('docs_payment')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'TrueCompanyNum' => $TrueCompanyNum, 'TypeDoc' => $TypeDoc, 'TypeHeader' => $TypeHeader, 'TypeNumber' => $TypeNumber, 'DocsId' => $DocId, 'ClientId' => $ClientId, 'TypePayment' => $TempDocPaymentInfo->TypePayment, 'Amount' => $FixAmount, 'L4digit' => $TempDocPaymentInfo->L4digit, 'YaadCode' => $TempDocPaymentInfo->YaadCode, 'CCode' => $TempDocPaymentInfo->CCode, 'ACode' => $TempDocPaymentInfo->ACode, 'Bank' => $TempDocPaymentInfo->Bank, 'Payments' => $PaymentsNew, 'Brand' => $TempDocPaymentInfo->Brand, 'BrandName' => $TempDocPaymentInfo->BrandName, 'Issuer' => $TempDocPaymentInfo->Issuer, 'tashType' => $TempDocPaymentInfo->tashType, 'CheckBank' => $TempDocPaymentInfo->CheckBank, 'CheckBankSnif' => $TempDocPaymentInfo->CheckBankSnif, 'CheckBankCode' => $TempDocPaymentInfo->CheckBankCode, 'CheckNumber' => $TempDocPaymentInfo->CheckNumber, 'CheckDate' => $CreditDate, 'BankNumber' => $TempDocPaymentInfo->BankNumber, 'BankDate' => $TempDocPaymentInfo->BankDate, 'Dates' => $Dates, 'UserId' => $UserId, 'Excess' => $TempDocPaymentInfo->Excess, 'UserDate' => $UserDate, 'DocDate' => $DocDate, 'DocMonth' => $DocMonth, 'DocYear' => $DocYear, 'DocTime' => $DocTime, 'CreditType' => $TempDocPaymentInfo->CreditType, 'ActivityJson' => $ActivityJson, 'Refound' => '1', 'BusinessCompanyId' => $SettingsInfo->CompanyId, 'BusinessType' => $SettingsInfo->BusinessType, 'PayToken' => $TempDocPaymentInfo->PayToken, 'TransactionId' => $TempDocPaymentInfo->TransactionId));
                            }
                        }
                    }
                }

                /// מחיקת נתונים
                DB::table('temp_receipt_payment_client')->where('TempId', '=', $ClientId)->where('TypeDoc', '=', $ClientGroupNumber)->delete();

                //// עדכון מספר קבלה
                $NewTempId = explode(',', $FinalinvoiceId);
                foreach ($NewTempId as $check) {
                    $ActivityId = $check;
                    $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();
                    $ItemId = $ActivityInfo->ItemId;
                    $TrueClientId = $ActivityInfo->ClientId;
                    $ReceiptIdJson = '';
                    $ReceiptIdJson .= '{"data": [';

                    if ($ActivityInfo->ReceiptId != '') {
                        $Loops = json_decode($ActivityInfo->ReceiptId, true);
                        foreach ($Loops['data'] as $key => $val) {
                            $DocIdDB = $val['DocId'];
                            $ReceiptIdJson .= '{"DocId": "' . $DocIdDB . '"},';
                        }
                    }

                    $ReceiptIdJson .= '{"DocId": "' . $DocId . '"}';
                    $ReceiptIdJson .= ']}';

                    DB::table('client_activities')
                        ->where('id', $ActivityId)
                        ->where('ClientId', '=', $TrueClientId)
                        ->where('CompanyNum', '=', $CompanyNum)
                        ->update(array('ReceiptId' => $ReceiptIdJson));
                }

                //////  עדכון טבלת דוח מכירות
                $DocsInfo = DB::table('docs')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $DocId)->first();
                if ($DocsInfo->ActivityJson != '') {
                    $Loops = json_decode($DocsInfo->ActivityJson, true);
                    foreach ($Loops['data'] as $key => $val) {
                        $ItemId = $val['ItemId'];
                        $NewAmount = $val['FixNewAmount'];
                        $OldBalanceMoney = $val['OldBalanceMoney'];

                        if ($NewAmount != '0') {
                            $FixPrice = $NewAmount;
                            $FixPrice = '-' . $FixPrice;
                            $ActivityInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();

                            if ($NewAmount != '0.00' || @$ActivityInfo->ItemName != '') {
                                DB::table('docs2item')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'TrueCompanyNum' => $TrueCompanyNum, 'Brands' => $Brands, 'ClientId' => $ClientId, 'ItemId' => $ItemId, 'DocsId' => $DocId, 'Amount' => $FixPrice, 'Department' => $ActivityInfo->Department, 'MemberShip' => $ActivityInfo->MemberShip, 'ItemName' => htmlentities($ActivityInfo->ItemName), 'UserDate' => $UserDate, 'BusinessCompanyId' => $SettingsInfo->CompanyId, 'BusinessType' => $SettingsInfo->BusinessType));
                            }
                        }
                    }
                }
                /// עדכון תבנית הודעה
                if ($DocId) {
                    $Template = (new Notificationcontent())->getByTypeAndCompany($CompanyNum, 23);
                    $FullLinks = 'https://new.boostapp.co.il/office/PDF/DocsClient.php?RandomUrl=' . $RandomNumber . '&ClientId=' . $ClientId;
                    $DocUrlTrue = '<a href="' . $FullLinks . '">' . lang('view_doc_ajax') . '</a>';

                    $DocsTypeInfo = DB::table('docstable')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TypeDoc)->first();
                    $TypeDocName = $DocsTypeInfo->TypeTitleSingle;

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $SettingsInfo->AppName, $Template->Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["doc_number"], $TypeNumber ?? '', $Content3);
                    $Content5 = str_replace(Notificationcontent::REPLACE_ARR["doc_type"], $TypeDocName ?? '', $Content4);
                    $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["doc_link"], $DocUrlTrue ?? '', $Content5);
//                    $ContentTrue = $Content6;
                    $Subject1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $SettingsInfo->AppName, $Template->Subject);
                    $Subject = str_replace(Notificationcontent::REPLACE_ARR["doc_type"], $TypeDocName, $Subject1);
//                    $Subject = $Subject2;

                    $AddNotification = DB::table('appnotification')->insertGetId(
                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => date('Y-m-d H:i:s'), 'UserId' => '0', 'Type' => '2', 'Date' => date('Y-m-d'), 'Time' => date('H:i:s'), 'ClassId' => '0'));
                }
                json_message();
            } catch (Throwable $e) {
                LoggerService::sendToLog($e->getMessage(), LoggerService::CATEGORY_PAYMENT_PROCESS_REFUND);

                json_message('שגיאה ' . $e->getCode(), false);
            }

            break;


        // SendNotificationEventPopUp - Add



        case 'SendClientPush':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('me' => $_POST['me']),

                array('me' => 'Required')

            );



            if ($validator->passes()) {


                $Type = $_POST['Type'];

                $Content = $Type == '2' ? $_POST['emailContent'] : $_POST['Content'];
                if (empty($Content) || $Content == "<p><br></p>") {
                    json_message(lang('error_send_empty_message_ajax'), false);
                    exit;
                }

                $TypeSend = $_POST['TypeSend'];

                $Subject = isset($_POST['Subject']) && !empty($_POST['Subject']) ? $_POST['Subject'] : lang('without_topic_ajax');



                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                if ($TypeSend == '0') {

                    $Clients = DB::table('client')->where('Status', '=', '0')->where('CompanyNum', $CompanyNum)->get();

                } else if ($TypeSend == '1') {

                    $Clients = DB::table('client')->whereIn('Status', array(0, 2))->where('CompanyNum', $CompanyNum)->get();

                } else if ($TypeSend == '3') {

                    $Clients = DB::table('client')->where('Status', '=', '1')->where('CompanyNum', $CompanyNum)->get();

                } else if ($TypeSend == '4') {

                    $Clients = DB::table('client')->where('Status', '=', '2')->where('CompanyNum', $CompanyNum)->get();

                } else {

                    $Clients = DB::table('client')->where('CompanyNum', $CompanyNum)->get();

                }



                $CompanyInfo = Company::getInstance();

                $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->first();



                foreach ($Clients as $ClientInfo) {

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["full_representative_name"], Auth::user()->display_name, $Content3);
                    $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["representative_name"], $UsersInfo->FirstName ?? '', $Content4);

//                    $ContentTrue = $Content5;

                    $Date = date('Y-m-d');

                    $Time = date('H:i:s');

                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientInfo->id, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $Type, 'Date' => $Date, 'Time' => $Time, 'SendType' => '1'));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'SendClientPushReport':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('me' => $_POST['me']),

                array('me' => 'Required')

            );



            if ($validator->passes()) {



                $Content = $_POST['Content'];

                $Type = $_POST['Type'];

                $SendType = ($Type == 2) ? 0 : 1;

                $Subject = $_POST['Subject'];

                $ClientsIds = $_POST['clientsIds'];



                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                if ($Content == '') {

                    json_message(lang('add_message_content_ajax'), false);

                    exit;

                }



                if ($Type == '2' && $Subject == '') {

                    json_message(lang('type_message_topic_ajax'), false);

                    exit;

                }



                $ClientsVar = explode(',', $ClientsIds);



                foreach ($ClientsVar as $ClientId) {

                    $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();



                    $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                    $UsersInfo = DB::table('users')->where('id', '=', Auth::user()->id)->first();

                    /// עדכון תבנית הודעה

                    $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Content);
                    $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                    $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                    $Content4 = str_replace(Notificationcontent::REPLACE_ARR["full_representative_name"], Auth::user()->display_name, $Content3);
                    $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["representative_name"], $UsersInfo->FirstName ?? '', $Content4);

                    if (!empty($_POST['landingUrl'])):

                        $Content6 = str_replace(Notificationcontent::REPLACE_ARR["link"], $_POST['landingUrl'] . "?ref=" . 'U' . $ClientId . 'C' . $CompanyNum . 'T' . time(), $ContentTrue);

                        $ContentTrue = $Content6;

                    endif;



                    if (!empty($_POST['formsUrl'])):

                        $GetTinyUrl = get_tiny_url($_POST['formsUrl'] . "&GetUrl=" . $CompanyInfo->StudioUrl . '&Id=' . $ClientId);

                        $Content6 = str_replace(Notificationcontent::REPLACE_ARR["link"], $GetTinyUrl, $ContentTrue);

                        $ContentTrue = $Content6;

                    endif;





                    /// הגדרת התראה



                    $Date = date('Y-m-d');

                    $Time = date('H:i:s');





                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientInfo->id, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $Type, 'Date' => $Date, 'Time' => $Time, 'SendType' => $SendType));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AgentClientPushReport':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('me' => $_POST['me']),

                array('me' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $ClientsIds = $_POST['newclientsIds'];



                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;

                $UserId = Auth::user()->id;

                $Dates = date('Y-m-d G:i:s');



                if ($Type == '') {

                    json_message(lang('select_representative_ajax'), false);

                    exit;

                }



                $ClientsVar = explode(',', $ClientsIds);



                foreach ($ClientsVar as $ClientId) {

                    $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();



                    $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                    $LeadInfo = DB::table('pipeline')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();



                    if (@$LeadInfo->AgentId == '0' || @$LeadInfo->AgentId == '') {

                        $OldAgent = lang('without_representative');

                    } else {

                        $OldUsersInfo = DB::table('users')->where('id', '=', @$LeadInfo->AgentId)->first();

                        $OldAgent = @$OldUsersInfo->display_name;

                    }





                    if ($Type == '0') {

                        $NewAgent = lang('without_representative_link_ajax');

                    } else {

                        $UsersInfo = DB::table('users')->where('id', '=', $Type)->first();

                        $NewAgent = $UsersInfo->display_name;

                    }





                    DB::table('pipeline')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('AgentId' => $Type));



                    $LogText = lang('link_representative_to_ajax').' '.$ClientInfo->CompanyName.' '.lang('from_representative_ajax').' '.$OldAgent.' '.lang('to_representative_ajax').' '. $NewAgent;



                    CreateLogMovement($LogText, $ClientId);





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'DeskSettings':
            if (Auth::guest()) exit;

            $ClassSettingsInfo = DB::table('classsettings')->where('CompanyNum', '=', Auth::user()->CompanyNum)->first();

            if ($ClassSettingsInfo) {
                $MaxClient = $_POST['MaxClient'] ?? $ClassSettingsInfo->MaxClient;
                $MinClient = $_POST['MinClient'] ?? $ClassSettingsInfo->MinClient;
                $CheckMinClient = $_POST['CheckMinClient'] ?? $ClassSettingsInfo->CheckMinClient;
                $CheckMinClientType = $_POST['CheckMinClientType'] ?? $ClassSettingsInfo->CheckMinClientType;
                $EndClassTime = $_POST['EndClassTime'] ?? $ClassSettingsInfo->EndClassTime;
                $ReminderTime = $_POST['ReminderTime'] ?? $ClassSettingsInfo->ReminderTime;
                $ReminderTimeType = $_POST['ReminderTimeType'] ?? $ClassSettingsInfo->ReminderTimeType;
                $ReminderTimeDayBefore = $_POST['ReminderTimeDayBefore'] ?? $ClassSettingsInfo->ReminderTimeDayBefore;
                $CancelTime = $_POST['CancelTime'] ?? $ClassSettingsInfo->CancelTime;
                $CancelTimeType = $_POST['CancelTimeType'] ?? $ClassSettingsInfo->CancelTimeType;
                $CancelTimeDayBefore = $_POST['CancelTimeDayBefore'] ?? $ClassSettingsInfo->CancelTimeDayBefore;

                $WatingListPOPUP = $_POST['WatingListPOPUP'];
                $RegularNum = $_POST['RegularNum'];
                $CancelMinimum = $_POST['CancelMinimum'];
                $GuideCheck = $_POST['GuideCheck'];

                DB::table('classsettings')
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array(
                        'MaxClient' => $MaxClient,
                        'MinClient' => $MinClient,
                        'CheckMinClient' => $CheckMinClient,
                        'CheckMinClientType' => $CheckMinClientType,
                        'EndClassTime' => $EndClassTime,
                        'ReminderTime' => $ReminderTime,
                        'ReminderTimeType' => $ReminderTimeType,
                        'ReminderTimeDayBefore' => $ReminderTimeDayBefore,
                        'CancelTime' => $CancelTime,
                        'CancelTimeType' => $CancelTimeType,
                        'CancelTimeDayBefore' => $CancelTimeDayBefore,
                        'WatingListPOPUP' => $WatingListPOPUP,
                        'RegularNum' => $RegularNum,
                        'CancelMinimum' => $CancelMinimum,
                        'GuideCheck' => $GuideCheck,
                    ));

                json_message();
            }
            break;

        case 'AddMultiClients':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {
                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];


                $AddClientMultiActivity = @$_POST['AddClientMultiActivity'];

                $LimitMultiActivity = @$_POST['LimitMultiActivity'];


                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;


                if ($AddClientMultiActivity != '') {
                    $JsonMemberType = '';

                    foreach (@$AddClientMultiActivity as $value) {
                        $JsonMemberType .= $value . ",";
                    }

                    $JsonMemberType = substr($JsonMemberType, 0, -1);
                } else {
                    $JsonMemberType = '0';

                    $LimitMultiActivity = '0';
                }

                // detect clients remove/insert changes and log them
                $ActInsertedClients = array();
                $ActRemovedClients = array();
                $ActToInsertClients = $AddClientMultiActivity;
                $ActExisingClients = DB::table('client_activities')->where('id', $ActivityId)->where('ClientId', $ClientId)->where('CompanyNum', $CompanyNum)->pluck('TrueClientId');
                $ActExisingClients = !empty($ActExisingClients) && is_string($ActExisingClients) ? explode(',', $ActExisingClients) : array();
                $exisingClientsString = count($ActExisingClients) ? implode(",", $ActExisingClients) : "";

                if(count($ActExisingClients)){ // check for clients to be removed
                    foreach($ActExisingClients as $clientId){
                        $clientName = DB::table('client')->where('id', $clientId)->pluck('CompanyName');
                        if(!empty($clientName) && !preg_match("/$clientId/", $JsonMemberType)){
                            $clientLink = $_SERVER['HTTP_ORIGIN']."/office/ClientProfile.php?u=$clientId";
                            array_push($ActRemovedClients, "<a href='$clientLink'> $clientName </a>");
                        }
                    }
                }

                if(is_array($ActToInsertClients) && count($ActToInsertClients)){ // check for new clients to be added
                    foreach($ActToInsertClients as $clientId){
                        $clientName = DB::table('client')->where('id', $clientId)->pluck('CompanyName');
                        if(!empty($clientName) && !preg_match("/$clientId/", $exisingClientsString)){
                            $clientLink = $_SERVER['HTTP_ORIGIN']."/office/ClientProfile.php?u=$clientId";
                            array_push($ActInsertedClients, "<a href='$clientLink'> $clientName </a>");
                        }
                    }
                }

                $res = DB::table('client_activities')
                    ->where('id', $ActivityId)
                    ->where('ClientId', $ClientId)
                    ->where('CompanyNum', $CompanyNum)
                    ->update(array('TrueClientId' => $JsonMemberType, 'LimitMultiActivity' => $LimitMultiActivity));

                if($res){
                    $logMessage = "";
                    $activityName = DB::table('client_activities')->where('id', $ActivityId)->pluck('ItemText');
                    $activityNameShorter = mb_strlen($activityName) > 20 ? mb_substr($activityName, 0 , 20)."..." : $activityName;
                    $activityTooltip = "<strong>$activityNameShorter <i class='fas fa-info-circle' data-toggle='tooltip' data-placement='top' title='$activityName'></i></strong>";
                    if(count($ActRemovedClients)){
                        $logMessage = count($ActRemovedClients) > 1 ? lang('clients').":" : lang('client_single');
                        $logMessage .= " " . implode(", ", $ActRemovedClients) . " ";
                        $logMessage .= count($ActRemovedClients) > 1 ? lang('they_removed_from_membership') : lang('removed_from_membership');
                        $logMessage .= " $activityTooltip ";
                    }

                    if(count($ActInsertedClients)){
                        $logMessage .= $logMessage == "" ? "" : " <br/> ";
                        $logMessage .= count($ActInsertedClients) > 1 ? lang('clients').":" : lang('client_single');
                        $logMessage .= " " . implode(", ", $ActInsertedClients) . " ";
                        $logMessage .= count($ActInsertedClients) > 1 ? lang('they_added_to_membership') : lang('added_to_membership');
                        $logMessage .= " $activityTooltip ";
                    }

                    // Log it all
                    CreateLogMovement(htmlentities($logMessage), $ClientId);
                }

//                $activity = DB::table('client_activities')->where('id', $ActivityId)->first();
//
//                $department = $activity->Department;
//                $StartDate = $activity->StartDate;
//                $MemberShip = $activity->MemberShip;
//                $Items = $activity->ItemId;
//                if ($department == '1' || $department == '2') {
//                    $GetClasess = DB::table('classstudio_act')
//                        ->where('CompanyNum', $CompanyNum)
//                        ->where(function ($query) use ($JsonMemberType) {
//                            $query->where ('ClientId',$JsonMemberType )
//                                ->where ('TrueClientId', '0')
//                                ->orWhere ('TrueClientId', $JsonMemberType);
//                        })
//                        ->where('ClassDate', '>=', $StartDate)
//                        ->whereIn('Status', array(12, 9))
//                        ->get();
//
//                    foreach ($GetClasess as $GetClases) {
//                        $TrueClasess = '';
//                        $TrueClasessFinal = '';
//                        $ClassInfo = DB::table('classstudio_date')
//                            ->where('id', '=', $GetClases->ClassId)
//                            ->where('Status', '=','0')
//                            ->where('CompanyNum', '=', $CompanyNum)
//                            ->first();
//                        $CheckItemsRoles = $CheckItemsRoles = DB::select('select * from boostapp.items_roles where CompanyNum = "' . $CompanyNum . '" AND ItemId = "' . $Items . '"  AND (FIND_IN_SET("' . @$ClassInfo->ClassNameType . '",Class) > 0 OR Class LIKE "BA999")');
//                        if (!empty($CheckItemsRoles)) {
//                            foreach ($CheckItemsRoles as $CheckItemsRole) {
//                                $GroupId = $CheckItemsRole->GroupId;
//                                $TrueClasessFinal = $CheckItemsRole->GroupId;
//                                $TrueClasess = $CheckItemsRole->Class;
//                            }
//                        }
//                        if ($TrueClasessFinal != '') {
//                            $res = DB::table('classstudio_act')
//                                ->where('id', $GetClases->id)
//                                ->where('CompanyNum', $CompanyNum)
//                                ->where('TrueClientId', $JsonMemberType)
//                                ->update(
//                                    array(
//                                        'ClientActivitiesId' => $ActivityId,
//                                        'TrueClasess' => $TrueClasessFinal,
//                                        'Department' => $department,
//                                        'MemberShip' => $MemberShip
//                                    )
//                                );
//
//                            $res = DB::table('classstudio_dateregular')
//                                ->where('id', $GetClases->RegularClassId)
//                                ->where('CompanyNum', $CompanyNum)
//                                ->update(array('ClientActivitiesId' => $ActivityId, 'MemberShipType' => $MemberShip));
//                        }
//                    }
//                }

                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // AddFAQ - Add



        case 'AddFAQ':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Question' => $_POST['Question'], 'Answer' => $_POST['Answer']),

                array('Question' => 'Required', 'Answer' => 'Required')

            );



            if ($validator->passes()) {

                $Question = $_POST['Question'];

                $Answer = $_POST['Answer'];



                $Items = DB::table('faq')->insertGetId(

                    array('Question' => $Question, 'Answer' => $Answer));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditFAQ - Edit



        case 'EditFAQ':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Question' => $_POST['Question'], 'Answer' => $_POST['Answer']),

                array('Question' => 'Required', 'Answer' => 'Required')

            );



            if ($validator->passes()) {



                $Question = $_POST['Question'];

                $Answer = $_POST['Answer'];

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];





                DB::table('faq')

                    ->where('id', $ItemId)

                    ->update(array('Question' => $Question, 'Answer' => $Answer, 'Status' => $Status));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddRoles - Add



        case 'AddRoles':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {

                $Title = $_POST['Title'];

                $CheckBoxRoles = @$_POST['CheckBoxRoles'];

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $Dates = date('H:i:s');



                if (@$CheckBoxRoles == '') {

                    json_message(lang('select_permission_ajax'), false);

                    exit;

                }





                $permissions = implode(',', $_POST['CheckBoxRoles']);





                $Items = DB::table('roles')->insertGetId(

                    array('name' => $Title, 'Title' => $Title, 'permissions' => $permissions, 'CompanyNum' => $CompanyNum, 'UserId' => $UserId));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditRoles - Edit



        case 'EditRoles':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Title = $_POST['Title'];

                $CheckBoxRoles = @$_POST['CheckBoxRoles'];

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $Dates = date('H:i:s');



                if (@$CheckBoxRoles == '') {

                    json_message(lang('select_permission_ajax'), false);

                    exit;

                }





                $permissions = implode(',', $_POST['CheckBoxRoles']);



                $ItemId = $_POST['ItemId'];





                DB::table('roles')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('name' => $Title, 'Title' => $Title, 'permissions' => $permissions));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditRoles - Edit



        case 'AddClassRemarksPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('RemarksStatus' => $_POST['RemarksStatus']),

                array('RemarksStatus' => 'Required')

            );



            if ($validator->passes()) {



                $RemarksStatus = $_POST['RemarksStatus'];

                $Remarks = @$_POST['Remarks'];

                $ItemId = $_POST['ClassIdCloseEvent'];

                $UpdateAllClass = $_POST['UpdateAllClass'];

                $UpdateAllClassDay = $_POST['UpdateAllClassDay'];


                if ($UpdateAllClass == '1') {
                    ClassStudioDate::updateById($ItemId, [
                        'Remarks' => $Remarks,
                        'RemarksStatus' => $RemarksStatus,
                    ]);
                } else {
                    $ClassInfo = DB::table('classstudio_date')->where('id', '=', $ItemId)->where('CompanyNum', '=', $CompanyNum)->first();

                    // get id list and update individually
                    $idList = DB::table('classstudio_date')
                        ->where('StartDate', '>=', $ClassInfo->StartDate)
                        ->where('Floor', $ClassInfo->Floor)
                        ->where('StartTime', $ClassInfo->StartTime)
                        ->where('ClassNameType', $ClassInfo->ClassNameType)
                        ->where('DayNum', $ClassInfo->DayNum)
                        ->where('CompanyNum', $CompanyNum)
                        ->select('id')
                        ->get();

                    foreach ($idList as $line) {
                        ClassStudioDate::updateById($line->id, [
                            'Remarks' => $Remarks,
                            'RemarksStatus' => $RemarksStatus,
                        ]);
                    }
                }

                if ($UpdateAllClassDay == '0') {
                    $ClassInfo = DB::table('classstudio_date')->where('id', '=', $ItemId)->where('CompanyNum', '=', $CompanyNum)->first();

                    // get id list and update individually
                    $idList = DB::table('classstudio_date')
                        ->where('StartDate', '=', $ClassInfo->StartDate)
                        ->where('DayNum', $ClassInfo->DayNum)
                        ->where('CompanyNum', $CompanyNum)
                        ->select('id')
                        ->get();

                    foreach ($idList as $line) {
                        ClassStudioDate::updateById($line->id, [
                            'Remarks' => $Remarks,
                            'RemarksStatus' => $RemarksStatus,
                        ]);
                    }
                }

                json_message();
            } else {
                json_message($validator->errors()->toArray(), false);
            }
            break;





        // AddSalary - Add



        case 'AddSalary':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('CoachId' => $_POST['CoachId']),

                array('CoachId' => 'Required')

            );



            if ($validator->passes()) {



                $CoachId = $_POST['CoachId'];

                $Salary = $_POST['Salary'];

                $StartDate = $_POST['StartDate'];

                $NumClient = @$_POST['NumClient'];

                $ClassMemberType = @$_POST['ClassMemberType'];

                $Amount = $_POST['Amount'];

                $ExtraAmount = @$_POST['ExtraAmount'];

                $NoneShow = @$_POST['NoneShow'];

                $LateCancel = @$_POST['LateCancel'];



                if ($ExtraAmount == '') {

                    $ExtraAmount = '0';

                }



                if ($NoneShow == '') {

                    $NoneShow = '0';

                }



                if ($LateCancel == '') {

                    $LateCancel = '0';

                }





                if ($Salary == '2' && $ClassMemberType == '' || $Salary == '4' && $ClassMemberType == '') {

                    json_message(lang('select_class_type_ajax'), false);

                    exit;

                } else if ($Salary == '3' && $ClassMemberType == '' || $Salary == '3' && $NumClient == '') {

                    json_message(lang('inster_traine_number_ajax'), false);

                    exit;

                }



                if ($NumClient == '') {

                    $NumClient = '0';

                }



                if ($ClassMemberType == '') {

                    $ClassMemberType = 'BA999';

                }



                if ($StartDate == '') {

                    $StartDate = date('Y-m-d');

                }





                if (@$ClassMemberType != 'BA999') {

                    //// סיום בדיקת שדות חובה

                    $JsonMemberType = '';

                    foreach ($ClassMemberType as $value) {

                        $JsonMemberType .= $value . ",";

                    }

                    $JsonMemberType = substr($JsonMemberType, 0, -1);



                } else {

                    $JsonMemberType = 'BA999';

                }





                $SalaryInserts = DB::table('coach_paymentstep')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'CoachId' => $CoachId, 'Type' => $Salary, 'NumClient' => $NumClient, 'Amount' => $Amount, 'StartDate' => $StartDate, 'ClassType' => $JsonMemberType, 'ExtraAmount' => $ExtraAmount, 'NoneShow' => $NoneShow, 'LateCancel' => $LateCancel));



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditSalary - Add



        case 'EditSalary':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId']),

                array('ItemId' => 'Required')

            );



            if ($validator->passes()) {



                $Salary = $_POST['Salary'];

                $StartDate = $_POST['StartDate'];

                $NumClient = @$_POST['NumClient'];

                $ClassMemberType = @$_POST['ClassMemberType'];

                $Amount = $_POST['Amount'];

                $ExtraAmount = @$_POST['ExtraAmount'];

                $NoneShow = @$_POST['NoneShow'];

                $LateCancel = @$_POST['LateCancel'];



                if ($ExtraAmount == '') {

                    $ExtraAmount = '0';

                }



                if ($NoneShow == '') {

                    $NoneShow = '0';

                }



                if ($LateCancel == '') {

                    $LateCancel = '0';

                }



                if ($Salary == '2' && $ClassMemberType == '' || $Salary == '4' && $ClassMemberType == '') {

                    json_message(lang('select_class_type_ajax'), false);

                    exit;

                } else if ($Salary == '3' && $ClassMemberType == '' || $Salary == '3' && $NumClient == '') {

                    json_message(lang('select_class_type_ajax'), false);

                    exit;

                }



                if ($NumClient == '') {

                    $NumClient = '0';

                }



                if ($ClassMemberType == '') {

                    $ClassMemberType = 'BA999';

                }



                if ($StartDate == '') {

                    $StartDate = date('Y-m-d');

                }





                if (@$ClassMemberType != 'BA999') {

                    //// סיום בדיקת שדות חובה

                    $JsonMemberType = '';

                    foreach ($ClassMemberType as $value) {

                        $JsonMemberType .= $value . ",";

                    }

                    $JsonMemberType = substr($JsonMemberType, 0, -1);



                } else {

                    $JsonMemberType = 'BA999';

                }



                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];





                DB::table('coach_paymentstep')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Type' => $Salary, 'NumClient' => $NumClient, 'Amount' => $Amount, 'StartDate' => $StartDate, 'ClassType' => $JsonMemberType, 'Status' => $Status, 'ExtraAmount' => $ExtraAmount, 'NoneShow' => $NoneShow, 'LateCancel' => $LateCancel));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'EditMenegmentMemberShip':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId'], 'ActivityId' => $_POST['ActivityId']),

                array('ClientId' => 'Required', 'ActivityId' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;

                $ClientId = $_POST['ClientId'];

                $ActivityId = $_POST['ActivityId'];

                $ItemPrice = $_POST['ItemPrice'];

                $KevaAction = $_POST['KevaAction'];

                $Act = $_POST['Act'];

                $Status = $_POST['Status'];



                if ($Status == '2') {

                    $CancelStatus = '1';

                } else {

                    $CancelStatus = '0';

                }





                $CheckClientPrice = DB::table('client_activities')->where('id', '=', $ActivityId)->where('CompanyNum', $CompanyNum)->first();



                if (@$CheckClientPrice->ItemPrice < $ItemPrice) {

                    json_message(lang('error_debt_to_item_ajax').' '.@$CheckClientPrice->ItemPrice.' '.lang('shekels_ajax'), false);

                    exit();

                }





                DB::table('client_activities')
                    ->where('id', $ActivityId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('BalanceMoney' => $ItemPrice, 'Status' => $Status, 'KevaAction' => $KevaAction, 'CancelStatus' => $CancelStatus));





                //// בדיקת כרטיסית אב



                $CheckCleintPayment = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                $BalanceAmount = '0.00';





                if (@$CheckCleintPayment->PayClientId != '0') {

                    $PayClientId = $CheckCleintPayment->PayClientId;



                    $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $PayClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                    DB::table('client')

                        ->where('id', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('BalanceAmount' => '0.00'));



                } else {

                    $PayClientId = $ClientId;



                    $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $ClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                }



                $CheckClientInfoer = DB::table('client')->where('CompanyNum', $CompanyNum)->where('PayClientId', $PayClientId)->get();

                if (!empty($CheckClientInfoer)) {

                    foreach ($CheckClientInfoer as $CheckClientInfo) {

                        if (@$CheckClientInfo->id != '') {

                            $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $CheckClientInfo->id)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');

                        }

                    }

                }





                $MemberShipText = '';

                $MemberShipText .= '{"data": [';

                $Taski = '1';

                $GetTasks = DB::table('client_activities')

                    ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                    ->orderBy('CardNumber', 'ASC')->get();

                $TaskCount = count($GetTasks);



                foreach ($GetTasks as $GetTask) {



                    if ($Taski < $TaskCount) {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                    } else {

                        $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                    }





                    ++$Taski;

                }

                $MemberShipText .= ']}';





                DB::table('client')

                    ->where('id', $PayClientId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('BalanceAmount' => $BalanceAmount, 'MemberShipText' => $MemberShipText));





                if($Status == '2' || $Status == '3') {

                    if ($Act == '1') {

                        $deleteRegular = DB::table('classstudio_dateregular')
                            ->where('CompanyNum', '=', $CompanyNum)
                            ->where('ClientActivitiesId', '=', $ActivityId)
                            ->delete();

                        if($deleteRegular) {
                            CreateLogMovement(//FontAwesome Icon
                                'הוסר שיבוץ קבוע בעקבות ביטול / השלמת מנוי ' . htmlentities(@$CheckClientPrice->ItemText), //LogContent
                                $ClientId //ClientId
                            );
                        }

                        $DeletesActClasses = ClassStudioAct::getToDeleteByClientActivityId($CompanyNum, $ActivityId, $ClientId);
                        foreach ($DeletesActClasses as $DeletesActClass) {
                            /** @var ClassStudioDate $ClassStudioDate */
                            $ClassStudioDate = ClassStudioDate::find($DeletesActClass->ClassId);
                            if(!$ClassStudioDate || !$ClassStudioDate->meetingTemplateId){
                                DB::table('classlog')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('ClientId', '=', $DeletesActClass->ClientId)
                                    ->where('ClassId', '=', $DeletesActClass->ClassId)
                                    ->delete();
                                DB::table('classlog')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('ClientId', '=', $DeletesActClass->TrueClientId)
                                    ->where('ClassId', '=', $DeletesActClass->ClassId)
                                    ->delete();

                                (new ClassStudioAct())->deleteActById($DeletesActClass->id, $CompanyNum);
                            } else { //if ClassStudioAct is meeting, not delete act, cancel ClassStudioAct and ClassStudioDate
                                $ClassStudioDate->setStatusToCanceledMeeting();
                                $DeletesActClass->changeStatus(ClassStudioAct::STATUS_MEETING_CANCELED_BY_STUDIO);
                            }

                            ///// ספירת שיעורים


                            $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('GroupNumber', '=', $DeletesActClass->GroupNumber)->where('ClassType', '=', '1')->orderBy('ClassCount', 'DESC')->first();

                            if($ClassInfo) {
                                $update = ClassStudioDate::updateClassRegistersCount($DeletesActClass->ClassId, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                            }


                        }


                    }
                }
                if($Status == '2'){
                    CreateLogMovement(//FontAwesome Icon

                        lang('canceled_subcription_ajax').' '. htmlentities(@$CheckClientPrice->ItemText),

                        $ClientId

                    );



                } elseif ($Status == '3') {



                    CreateLogMovement(//FontAwesome Icon

                        lang('moved_subscription_ajax').' '.htmlentities(@$CheckClientPrice->ItemText).' '.lang('to_completed_ajax'),

                        $ClientId

                    );



                }

                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // AddItemNewPopUp - Add



        case 'AddItemNewPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Membership' => $_POST['Membership'], 'membership_type' => $_POST['membership_type'], 'ItemName' => $_POST['ItemName'], 'ItemPrice' => $_POST['ItemPrice']),

                array('Membership' => 'Required', 'membership_type' => 'Required', 'ItemName' => 'Required', 'ItemPrice' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = Auth::user()->CompanyNum;

                $Department = $_POST['Membership'];

                $MemberShip = $_POST['membership_type'];

                $ItemName = trim($_POST['ItemName']);

                $ItemName = str_replace("\\",'/',$ItemName);

                $ItemPrice = trim($_POST['ItemPrice']);

                $CompanyVat = $SettingsInfo->CompanyVat;

                if (isset($_POST['LimitType'])) {
                    $LimitType = $_POST['LimitType'];
                } else {
                    $LimitType = '1'; // לפי תוקף המנוי
                }

                $Vat = $_POST['Vat'];



                if ($CompanyVat == '0') {



                    if ($Vat == '0') {



                        $Vat = $SettingsInfo->Vat;

                        $Vats = '1.' . $Vat;

                        $Vat = $Vat;



                        $TotalVatItemPrice = $ItemPrice / $Vats;

                        $TotalVatItemPrice = $TotalVatItemPrice;

                        $TotalVatItemPrice = round($ItemPrice - $TotalVatItemPrice, 2);



                        $ItemPriceVat = round($ItemPrice - $TotalVatItemPrice, 2);

                        $ItemPriceVat = $ItemPriceVat;

                        $ItemPrice = $ItemPrice;



                    } else {



                        $ItemPrice = $ItemPrice;

                        $ItemPriceVat = $ItemPrice;

                        $Vat = $SettingsInfo->Vat;

                        $Vat = $Vat;

                        $TotalVatItemPrice = $ItemPrice * $Vat / 100;

                        $TotalVatItemPrice = round($TotalVatItemPrice, 2);

                        $ItemPrice = $ItemPrice + $TotalVatItemPrice;



                    }





                } else {

                    $ItemPrice = $ItemPrice;

                    $ItemPriceVat = $ItemPrice;

                }





                $BalanceClass = $_POST['BalanceClass'];

                $MinusCards = $_POST['MinusCards'];





                $BalanceClassTry = @$_POST['BalanceClassTry'];





                if ($Department == '1') {

                    $BalanceClass = '0';

                }





                if ($Department == '3') {

                    $BalanceClass = $BalanceClassTry;

                }



                if ($Department == '4') {

                    $BalanceClass = '0';

                }



                $CostPrice = @$_POST['CostPrice'];

                $Vaild = @$_POST['Vaild'];

                $Vaild_Type = @$_POST['Vaild_Type'];

                $NotificationDays = $_POST['NotificationDays'] ?? 0;

                $FreezMemberShip = @$_POST['FreezMemberShip'];

                $FreezMemberShipDaysMin = @$_POST['FreezMemberShipDaysMin'];

                $FreezMemberShipDays = @$_POST['FreezMemberShipDays'];

                $FreezMemberShipCount = @$_POST['FreezMemberShipCount'];



                $GroupNumber = @$_POST['GroupNumber'];



                $tGroups = @$_POST['tGroups'];

                $tItems1 = @$_POST['tItems1'];



                $ClassMemberType1 = @$_POST['ClassMemberType1'];



                if ($Department == '1' && @$Vaild == '') {

                    json_message(lang('stage_two_subsciption_ajax'), false);

                    exit;

                }

                if ($Department == '2' && @$BalanceClass == '') {

                    json_message(lang('stage_one_classes_ajax'), false);

                    exit;

                }

                if ($Department == '3' && @$BalanceClass == '') {

                    json_message(lang('stage_one_classes_ajax'), false);

                    exit;

                }

                if (@$ClassMemberType1 == '' && $Department != '4') {

                    json_message(lang('stage_three_class_ajax'), false);

                    exit;

                }

                if (@$FreezMemberShipDaysMin == '') {

                    $FreezMemberShipDaysMin = '999';

                }

                if (@$FreezMemberShipDays == '') {

                    $FreezMemberShipDays = '999';

                }

                if (@$FreezMemberShipCount == '') {

                    $FreezMemberShipCount = '999';

                }



                if (@$Vaild == '') {

                    $Vaild = '0';

                }



                $count = $_POST['tGroups'];

                for ($i = 1; $i <= $count; $i++) {



                    $ClassMemberType = @$_POST['ClassMemberType' . $i];

                    $StandByOption = @$_POST['StandByOption' . $i];

                    $StandByCount = @$_POST['StandByCount' . $i];

                    $StandByVaild_Type = @$_POST['StandByVaild_Type' . $i];

                    $StandByTime = @$_POST['StandByTime' . $i];

                    $StandByTimeVaild_Type = @$_POST['StandByTimeVaild_Type' . $i];





                    if ($StandByOption == '1' && $StandByCount == '' && $ClassMemberType != '' || $StandByOption == '2' && $StandByCount == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_booking_ajax'), false);

                        exit;

                    }



                    if ($StandByOption == '1' && $StandByTime == '' && $ClassMemberType != '' || $StandByOption == '2' && $StandByTime == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_class_time_ajax'), false);

                        exit;

                    }





                    $UpSaleOption = @$_POST['UpSaleOption' . $i];

                    $UpSaleTitle = @$_POST['UpSaleTitle' . $i];

                    $UpSaleClass = @$_POST['UpSaleClass' . $i];

                    $UpSalePrice = @$_POST['UpSalePrice' . $i];

                    $UpSaleVaild = @$_POST['UpSaleVaild' . $i];

                    $UpSaleVaild_Type = @$_POST['UpSaleVaild_Type' . $i];



                    if ($UpSaleOption == '1' && $UpSaleTitle == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_upsale_ajax'), false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSaleClass == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_upsale_class_ajax'), false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSalePrice == '' && $ClassMemberType != '') {

                        json_message('שלב 3 - UPSALE יש לציין מחיר לרכישה', false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSaleVaild == '' && $ClassMemberType != '') {

                        $UpSaleVaild = '0';

                    }



                    if ($ClassMemberType != '') {



                        $countq = @$_POST['tItems' . $i];



                        for ($q = 1; $q <= $countq; $q++) {





                            $SelectType = @$_POST['SelectType' . $i . $q];

                            $MaxTime = @$_POST['MaxTime' . $i . $q];

                            $SelectType2 = @$_POST['SelectType2' . $i . $q];

                            $Days = @$_POST['Days' . $i . $q];

                            $FromTime = @$_POST['FromTime' . $i . $q];

                            $ToTime = @$_POST['ToTime' . $i . $q];



                            if ($SelectType == '1' && $MaxTime == '') {

                                json_message('שלב 3 - יש לציין מקסימום פעמים', false);

                                exit;

                            }



                            if ($SelectType == '1' && $SelectType2 == '') {

                                json_message(lang('stage_three_option_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '2' && $Days == '') {

                                json_message(lang('stage_three_days_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '3' && $FromTime == '') {

                                json_message(lang('stage_three_hours_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '3' && $ToTime == '') {

                                json_message(lang('stage_three_end_hour_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '3' && $ToTime <= $FromTime) {

                                json_message(lang('stage_three_error_hour_ajax'), false);

                                exit;

                            }





                        }



                    }





                }





                $BarndSelect = @$_POST['BarndSelect'];



                if ($BarndSelect == '' || $BarndSelect == '0') {

                    $JsonLimitLevel = 'BA999';

                } else {



                    $JsonLimitLevel = '';

                    foreach ($_POST['BarndSelect'] as $value) {

                        $JsonLimitLevel .= $value . ",";

                    }

                    $JsonLimitLevel = substr($JsonLimitLevel, 0, -1);





                }





                /////// סיום בדיקת נתונים פלוס קליטה בבסיס נתונים



                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;



                $ItemsId = DB::table('items')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemName' => $ItemName, 'ItemPrice' => $ItemPrice, 'ItemPriceVat' => $ItemPriceVat, 'Vat' => $Vat, 'CostPrice' => $CostPrice, 'Dates' => $Dates, 'UserId' => $UserId, 'Vaild' => $Vaild, 'Vaild_Type' => $Vaild_Type, 'NotificationDays' => $NotificationDays, 'BalanceClass' => $BalanceClass, 'MinusCards' => $MinusCards, 'FreezMemberShip' => $FreezMemberShip, 'FreezMemberShipDays' => $FreezMemberShipDays, 'FreezMemberShipCount' => $FreezMemberShipCount, 'FreezMemberShipDaysMin' => $FreezMemberShipDaysMin, 'LimitType' => $LimitType, 'Brands' => $JsonLimitLevel));





                //// הוספת חוקים ומגבלות פריט



                $count = $_POST['tGroups'];

                for ($i = 1; $i <= $count; $i++) {



                    $GroupId = $CompanyNum . '' . $ItemsId . '-' . $i;

                    $ClassMemberType = @$_POST['ClassMemberType' . $i];

                    $StandByOption = @$_POST['StandByOption' . $i];

                    $StandByCount = @$_POST['StandByCount' . $i];

                    $StandByVaild_Type = @$_POST['StandByVaild_Type' . $i];

                    $StandByTime = @$_POST['StandByTime' . $i];

                    $StandByTimeVaild_Type = @$_POST['StandByTimeVaild_Type' . $i];



                    $UpSaleOption = @$_POST['UpSaleOption' . $i];

                    $UpSaleTitle = @$_POST['UpSaleTitle' . $i];

                    $UpSaleClass = @$_POST['UpSaleClass' . $i];

                    $UpSalePrice = @$_POST['UpSalePrice' . $i];

                    $UpSaleVaild = @$_POST['UpSaleVaild' . $i];

                    $UpSaleVaild_Type = @$_POST['UpSaleVaild_Type' . $i];



                    if ($ClassMemberType != '') {



                        $JsonMemberType = '';

                        foreach (@$ClassMemberType as $value) {

                            $JsonMemberType .= $value . ",";

                        }

                        $JsonMemberType = substr($JsonMemberType, 0, -1);



                        $countq = @$_POST['tItems' . $i];



                        ///// הוספת סוגי שיעורים



                        $Group = 'Class';

                        $Item = 'Class';



                        $AddLaw = DB::table('items_roles')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => '', 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                        $countq = @$_POST['tItems' . $i];



                        for ($q = 1; $q <= $countq; $q++) {

                            $SelectType = @$_POST['SelectType' . $i . $q];

                            $MaxTime = @$_POST['MaxTime' . $i . $q];

                            $SelectType2 = @$_POST['SelectType2' . $i . $q];

                            $Days = @$_POST['Days' . $i . $q];

                            $FromTime = @$_POST['FromTime' . $i . $q];

                            $ToTime = @$_POST['ToTime' . $i . $q];



                            if ($SelectType == '1') {



                                $Group = 'Max';



                                if ($SelectType2 == '4') {

                                    $Item = 'Day';

                                } else if ($SelectType2 == '5') {

                                    $Item = 'Week';

                                } else if ($SelectType2 == '6') {

                                    $Item = 'Month';

                                } else if ($SelectType2 == '7') {

                                    $Item = 'Year';

                                } else if ($SelectType2 == '8') {

                                    $Item = 'Morning';

                                } else if ($SelectType2 == '9') {

                                    $Item = 'Evening';

                                }



                                $Value = $MaxTime;



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $Value, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));

                            } else if ($SelectType == '2') {

                                $Group = 'Day';

                                $Item = 'Days';



                                $JsonDay = '';

                                foreach (@$Days as $value) {

                                    $JsonDay .= $value . ",";

                                }

                                $JsonDay = substr($JsonDay, 0, -1);



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $JsonDay, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));



                            } else if ($SelectType == '3') {



                                $Group = 'Time';

                                $Item = 'Time';



                                $TimeValue = '';

                                $TimeValue .= '{"data": [';

                                $TimeValue .= '{"FromTime": "' . $FromTime . '", "ToTime": "' . $ToTime . '" }';

                                $TimeValue .= ']}';



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $TimeValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                            }





                        } /// לולאה מגבלות



                        if ($StandByOption == '1' || $StandByOption == '2') {



                            $Group = 'Item';

                            $Item = 'StandBy';





                            $StandByValue = '';

                            $StandByValue .= '{"data": [';

                            $StandByValue .= '{"StandByCount": "' . $StandByCount . '", "StandByVaild_Type": "' . $StandByVaild_Type . '", "StandByTime": "' . $StandByTime . '", "StandByTimeVaild_Type": "' . $StandByTimeVaild_Type . '", "StandByOption": "' . $StandByOption . '" }';

                            $StandByValue .= ']}';





                            $AddLaw = DB::table('items_roles')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $StandByValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));



                        }

                        if ($UpSaleOption == '1') {



                            $Group = 'Item';

                            $Item = 'UpSale';



                            $UpSaleValue = '';

                            $UpSaleValue .= '{"data": [';

                            $UpSaleValue .= '{"UpSaleTitle": "' . $UpSaleTitle . '", "UpSaleClass": "' . $UpSaleClass . '", "UpSalePrice": "' . $UpSalePrice . '", "UpSaleVaild": "' . $UpSaleVaild . '", "UpSaleVaild_Type": "' . $UpSaleVaild_Type . '", "UpSaleOption": "' . $UpSaleOption . '" }';

                            $UpSaleValue .= ']}';





                            $AddLaw = DB::table('items_roles')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $UpSaleValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                        }





                    }

                } /// ללואה קבוצות





                DB::table('templistclass')->where('GroupNumber', '=', $GroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();

                DB::table('templistclass_option')->where('GroupNumber', '=', $GroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();



                if ($LimitType == '0') {

                    $ContentLog = lang('added_new_item_ajax').' '.$ItemName.' '.lang('monthly_restrict_ajax');

                    CreateLogMovement($ContentLog, '0');

                } else {

                    $ContentLog = lang('added_new_item_ajax').' '.$ItemName.' '.lang('monthly_restrict_ajax');

                    CreateLogMovement($ContentLog, '0');

                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        /////////////



        // EditItemNewPopUp - Add



        case 'EditItemNewPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Membership' => $_POST['Membership'], 'membership_type' => $_POST['membership_type'], 'ItemName' => $_POST['ItemName'], 'ItemPrice' => $_POST['ItemPrice']),

                array('Membership' => 'Required', 'membership_type' => 'Required', 'ItemName' => 'Required', 'ItemPrice' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = Auth::user()->CompanyNum;

                $Department = $_POST['Membership'];

                $MemberShip = $_POST['membership_type'];

                $ItemName = $_POST['ItemName'];

                $ItemPrice = $_POST['ItemPrice'];


                $CompanyVat = $SettingsInfo->CompanyVat;



                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];

                $item = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ItemId)->first();


                if (isset($_POST['LimitType'])) {
                    $LimitType = $_POST['LimitType'];
                } else {
                    $LimitType = $item->LimitType;
                }



                $Vat = $_POST['Vat'];



                if ($CompanyVat == '0') {



                    if ($Vat == '0') {



                        $Vat = $SettingsInfo->Vat;

                        $Vats = '1.' . $Vat;

                        $Vat = $Vat;



                        $TotalVatItemPrice = $ItemPrice / $Vats;

                        $TotalVatItemPrice = $TotalVatItemPrice;

                        $TotalVatItemPrice = round($ItemPrice - $TotalVatItemPrice, 2);



                        $ItemPriceVat = round($ItemPrice - $TotalVatItemPrice, 2);

                        $ItemPriceVat = $ItemPriceVat;

                        $ItemPrice = $ItemPrice;



                    } else {



                        $ItemPrice = $ItemPrice;

                        $ItemPriceVat = $ItemPrice;

                        $Vat = $SettingsInfo->Vat;

                        $Vat = $Vat;

                        $TotalVatItemPrice = $ItemPrice * $Vat / 100;

                        $TotalVatItemPrice = round($TotalVatItemPrice, 2);

                        $ItemPrice = $ItemPrice + $TotalVatItemPrice;



                    }





                } else {

                    $ItemPrice = $ItemPrice;

                    $ItemPriceVat = $ItemPrice;

                }





                $BalanceClass = $_POST['BalanceClass'];

                $MinusCards = $_POST['MinusCards'];





                $BalanceClassTry = @$_POST['BalanceClassTry'];





                if ($Department == '1') {

                    $BalanceClass = '0';

                }





                if ($Department == '3') {

                    $BalanceClass = $BalanceClassTry;

                }



                if ($Department == '4') {

                    $BalanceClass = '0';

                }



                $CostPrice = @$_POST['CostPrice'];

                $Vaild = @$_POST['Vaild'];

                $Vaild_Type = @$_POST['Vaild_Type'];

                $NotificationDays = $_POST['NotificationDays'] ?? 0;

                $FreezMemberShip = @$_POST['FreezMemberShip'];

                $FreezMemberShipDaysMin = @$_POST['FreezMemberShipDaysMin'];

                $FreezMemberShipDays = @$_POST['FreezMemberShipDays'];

                $FreezMemberShipCount = @$_POST['FreezMemberShipCount'];



                $GroupNumber = @$_POST['GroupNumber'];



                $tGroups = @$_POST['tGroups'];

                $tItems1 = @$_POST['tItems1'];



                $ClassMemberType1 = @$_POST['ClassMemberType1'];



                if ($Department == '1' && @$Vaild == '') {

                    json_message(lang('stage_two_period_ajax'), false);

                    exit;

                }

                if ($Department == '2' && @$BalanceClass == '') {

                    json_message(lang('stage_one_number_class_ajax'), false);

                    exit;

                }

                if ($Department == '3' && @$BalanceClass == '') {

                    json_message(lang('stage_one_number_class_ajax'), false);

                    exit;

                }

                if (@$ClassMemberType1 == '' && $Department != '4') {

                    json_message(lang('stage_three_one_class_ajax'), false);

                    exit;

                }

                if (@$FreezMemberShipDaysMin == '') {

                    $FreezMemberShipDaysMin = '999';

                }

                if (@$FreezMemberShipDays == '') {

                    $FreezMemberShipDays = '999';

                }

                if (@$FreezMemberShipCount == '') {

                    $FreezMemberShipCount = '999';

                }



                if (@$Vaild == '') {

                    $Vaild = '0';

                }



                $count = $_POST['tGroups'];

                for ($i = 1; $i <= $count; $i++) {



                    $ClassMemberType = @$_POST['ClassMemberType' . $i];

                    $StandByOption = @$_POST['StandByOption' . $i];

                    $StandByCount = @$_POST['StandByCount' . $i];

                    $StandByVaild_Type = @$_POST['StandByVaild_Type' . $i];

                    $StandByTime = @$_POST['StandByTime' . $i];

                    $StandByTimeVaild_Type = @$_POST['StandByTimeVaild_Type' . $i];





                    if ($StandByOption == '1' && $StandByCount == '' && $ClassMemberType != '' || $StandByOption == '2' && $StandByCount == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_booking_number_ajax'), false);

                        exit;

                    }



                    if ($StandByOption == '1' && $StandByTime == '' && $ClassMemberType != '' || $StandByOption == '2' && $StandByTime == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_class_time_ajax'), false);

                        exit;

                    }





                    $UpSaleOption = @$_POST['UpSaleOption' . $i];

                    $UpSaleTitle = @$_POST['UpSaleTitle' . $i];

                    $UpSaleClass = @$_POST['UpSaleClass' . $i];

                    $UpSalePrice = @$_POST['UpSalePrice' . $i];

                    $UpSaleVaild = @$_POST['UpSaleVaild' . $i];

                    $UpSaleVaild_Type = @$_POST['UpSaleVaild_Type' . $i];



                    if ($UpSaleOption == '1' && $UpSaleTitle == '' && $ClassMemberType != '') {

                        json_message('שלב 3 - UPSALE יש לציין כותרת לפריט', false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSaleClass == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_upsale_class_ajax'), false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSalePrice == '' && $ClassMemberType != '') {

                        json_message(lang('stage_three_upsale_price_ajax'), false);

                        exit;

                    }



                    if ($UpSaleOption == '1' && $UpSaleVaild == '' && $ClassMemberType != '') {

                        $UpSaleVaild = '0';

                    }



                    if ($ClassMemberType != '') {



                        $countq = @$_POST['tItems' . $i];



                        for ($q = 1; $q <= $countq; $q++) {





                            $SelectType = @$_POST['SelectType' . $i . $q];

                            $MaxTime = @$_POST['MaxTime' . $i . $q];

                            $SelectType2 = @$_POST['SelectType2' . $i . $q];

                            $Days = @$_POST['Days' . $i . $q];

                            $FromTime = @$_POST['FromTime' . $i . $q];

                            $ToTime = @$_POST['ToTime' . $i . $q];



                            if ($SelectType == '1' && $MaxTime == '') {

                                json_message(lang('stage_three_max_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '1' && $SelectType2 == '') {

                                json_message(lang('stage_three_option_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '2' && $Days == '') {

                                json_message(lang('stage_three_days_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '3' && $FromTime == '') {

                                json_message(lang('stage_three_hours_ajax'), false);

                                exit;

                            }



                            if ($SelectType == '3' && $ToTime == '') {

                                json_message('שלב 3 - יש לציין עד שעה', false);

                                exit;

                            }



                            if ($SelectType == '3' && $ToTime <= $FromTime) {

                                json_message(lang('stage_three_error_hour_ajax'), false);

                                exit;

                            }





                        }



                    }





                }





                $BarndSelect = @$_POST['BarndSelect'];



                if ($BarndSelect == '' || $BarndSelect == '0') {

                    $JsonLimitLevel = 'BA999';

                } else {



                    $JsonLimitLevel = '';

                    foreach ($_POST['BarndSelect'] as $value) {

                        $JsonLimitLevel .= $value . ",";

                    }

                    $JsonLimitLevel = substr($JsonLimitLevel, 0, -1);





                }





                /////// סיום בדיקת נתונים פלוס קליטה בבסיס נתונים



                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;





                DB::table('items')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('MemberShip' => $MemberShip, 'ItemName' => $ItemName, 'ItemPrice' => $ItemPrice, 'ItemPriceVat' => $ItemPriceVat, 'Vat' => $Vat, 'CostPrice' => $CostPrice, 'Dates' => $Dates, 'UserId' => $UserId, 'Vaild' => $Vaild, 'Vaild_Type' => $Vaild_Type, 'NotificationDays' => $NotificationDays, 'BalanceClass' => $BalanceClass, 'MinusCards' => $MinusCards, 'FreezMemberShip' => $FreezMemberShip, 'FreezMemberShipDays' => $FreezMemberShipDays, 'FreezMemberShipCount' => $FreezMemberShipCount, 'FreezMemberShipDaysMin' => $FreezMemberShipDaysMin, 'Status' => $Status, 'LimitType' => $LimitType, 'Brands' => $JsonLimitLevel));



                DB::table('payment_pages')

                    ->where('ItemId', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Brands' => $JsonLimitLevel));





                $ItemsId = $ItemId;



                DB::table('items_roles')->where('ItemId', '=', $ItemId)->where('CompanyNum', '=', $CompanyNum)->delete();



                //// הוספת חוקים ומגבלות פריט



                $count = $_POST['tGroups'];

                for ($i = 1; $i <= $count; $i++) {



                    $GroupId = $CompanyNum . '' . $ItemsId . '-' . $i;

                    $ClassMemberType = @$_POST['ClassMemberType' . $i];

                    $StandByOption = @$_POST['StandByOption' . $i];

                    $StandByCount = @$_POST['StandByCount' . $i];

                    $StandByVaild_Type = @$_POST['StandByVaild_Type' . $i];

                    $StandByTime = @$_POST['StandByTime' . $i];

                    $StandByTimeVaild_Type = @$_POST['StandByTimeVaild_Type' . $i];



                    $UpSaleOption = @$_POST['UpSaleOption' . $i];

                    $UpSaleTitle = @$_POST['UpSaleTitle' . $i];

                    $UpSaleClass = @$_POST['UpSaleClass' . $i];

                    $UpSalePrice = @$_POST['UpSalePrice' . $i];

                    $UpSaleVaild = @$_POST['UpSaleVaild' . $i];

                    $UpSaleVaild_Type = @$_POST['UpSaleVaild_Type' . $i];



                    if ($ClassMemberType != '') {



                        $JsonMemberType = '';

                        foreach (@$ClassMemberType as $value) {

                            $JsonMemberType .= $value . ",";

                        }

                        $JsonMemberType = substr($JsonMemberType, 0, -1);



                        $countq = @$_POST['tItems' . $i];



                        ///// הוספת סוגי שיעורים



                        $Group = 'Class';

                        $Item = 'Class';



                        $AddLaw = DB::table('items_roles')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => '', 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                        $countq = @$_POST['tItems' . $i];



                        for ($q = 1; $q <= $countq; $q++) {

                            $SelectType = @$_POST['SelectType' . $i . $q];

                            $MaxTime = @$_POST['MaxTime' . $i . $q];

                            $SelectType2 = @$_POST['SelectType2' . $i . $q];

                            $Days = @$_POST['Days' . $i . $q];

                            $FromTime = @$_POST['FromTime' . $i . $q];

                            $ToTime = @$_POST['ToTime' . $i . $q];



                            if ($SelectType == '1') {



                                $Group = 'Max';



                                if ($SelectType2 == '4') {

                                    $Item = 'Day';

                                } else if ($SelectType2 == '5') {

                                    $Item = 'Week';

                                } else if ($SelectType2 == '6') {

                                    $Item = 'Month';

                                } else if ($SelectType2 == '7') {

                                    $Item = 'Year';

                                } else if ($SelectType2 == '8') {

                                    $Item = 'Morning';

                                } else if ($SelectType2 == '9') {

                                    $Item = 'Evening';

                                }



                                $Value = $MaxTime;



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $Value, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));

                            } else if ($SelectType == '2') {

                                $Group = 'Day';

                                $Item = 'Days';



                                $JsonDay = '';

                                foreach (@$Days as $value) {

                                    $JsonDay .= $value . ",";

                                }

                                $JsonDay = substr($JsonDay, 0, -1);



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $JsonDay, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));



                            } else if ($SelectType == '3') {



                                $Group = 'Time';

                                $Item = 'Time';



                                $TimeValue = '';

                                $TimeValue .= '{"data": [';

                                $TimeValue .= '{"FromTime": "' . $FromTime . '", "ToTime": "' . $ToTime . '" }';

                                $TimeValue .= ']}';



                                $AddLaw = DB::table('items_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $TimeValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                            }





                        } /// לולאה מגבלות



                        if ($StandByOption == '1' || $StandByOption == '2') {



                            $Group = 'Item';

                            $Item = 'StandBy';





                            $StandByValue = '';

                            $StandByValue .= '{"data": [';

                            $StandByValue .= '{"StandByCount": "' . $StandByCount . '", "StandByVaild_Type": "' . $StandByVaild_Type . '", "StandByTime": "' . $StandByTime . '", "StandByTimeVaild_Type": "' . $StandByTimeVaild_Type . '", "StandByOption": "' . $StandByOption . '" }';

                            $StandByValue .= ']}';





                            $AddLaw = DB::table('items_roles')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $StandByValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));



                        }

                        if ($UpSaleOption == '1') {



                            $Group = 'Item';

                            $Item = 'UpSale';



                            $UpSaleValue = '';

                            $UpSaleValue .= '{"data": [';

                            $UpSaleValue .= '{"UpSaleTitle": "' . $UpSaleTitle . '", "UpSaleClass": "' . $UpSaleClass . '", "UpSalePrice": "' . $UpSalePrice . '", "UpSaleVaild": "' . $UpSaleVaild . '", "UpSaleVaild_Type": "' . $UpSaleVaild_Type . '", "UpSaleOption": "' . $UpSaleOption . '" }';

                            $UpSaleValue .= ']}';





                            $AddLaw = DB::table('items_roles')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ItemId' => $ItemsId, 'Class' => $JsonMemberType, 'Group' => $Group, 'Item' => $Item, 'Value' => $UpSaleValue, 'Dates' => $Dates, 'UserId' => $UserId, 'GroupId' => $GroupId));





                        }





                    }

                } /// ללואה קבוצות





                DB::table('templistclass')->where('GroupNumber', '=', $GroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();

                DB::table('templistclass_option')->where('GroupNumber', '=', $GroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();



                if ($LimitType == '0') {

                    $ContentLog = lang('edited_item_ajax').' '.$ItemName.' '. lang('monthly_restrict_ajax');

                    CreateLogMovement($ContentLog, '0');

                } else {

                    $ContentLog = lang('edited_item_ajax') .' '.$ItemName .' '. lang('monthly_restrict_ajax');

                    CreateLogMovement($ContentLog, '0');

                }



                if ($NotificationDays >= '1' && $Vaild >= '1') {



                    DB::table('client_activities')

                        ->where('ItemId', $ItemsId)

                        ->where('Status', '0')

                        ->where('Department', '!=', '4')

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('ChangeStatus' => '1'));



                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddUsersClock  - Add



        case 'AddUsersClock':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('UserId' => $_POST['UserId']),

                array('UserId' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = $CompanyNum;



                $Dates = date('Y-m-d');

                $Times = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;

                $options = @$_POST['options'];



                if (@$options == '') {

                    json_message(lang('select_entrance_exit_ajax'), false);

                }



                DB::table('timekeeper')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'UserId' => $UserId, 'Dates' => $Dates, 'Times' => $Times, 'Act' => $options, 'UserAction' => $UserId));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        case 'signInReport':

            if (Auth::guest()) exit;
            $CompanyNum = $_POST['companyNum'];
            $totalDayOld = $_POST['totalDay'];
            $totalMonthOld = $_POST['totalMonth'];
            $Dates = $_POST['date'];
            $UserId = $_POST['guide'];
            $arrEntry = $_POST['entries'] ?? '';
            $arrExit = $_POST['exit'] ?? '';
            $UserIdWrite = Auth::user()->id;

            //delete data from database, add instead of it data from report page
            DB::table('timekeeper')->where('CompanyNum', $CompanyNum)->where('UserId',$UserId)->where('Dates', $Dates)->delete();
            if ($arrEntry != '') {
                foreach ($arrEntry as $entrie) {
                    $Times = $Dates . ' ' . $entrie;
                    DB::table('timekeeper')->insert(
                        array(
                            'CompanyNum' => $CompanyNum,
                            'UserId' => $UserId,
                            'Times' => $Times,
                            'Dates' => $Dates,
                            'Act' => 0,
                            'UserAction' => $UserIdWrite
                        )
                    );
                }
            }
            if ($arrExit != '') {
                foreach ($arrExit as $exit) {
                    $Times = $Dates . ' ' . $exit;
                    DB::table('timekeeper')->insert(
                        array(
                            'CompanyNum' => $CompanyNum,
                            'UserId' => $UserId,
                            'Times' => $Times,
                            'Dates' => $Dates,
                            'Act' => 1,
                            'UserAction' => $UserIdWrite
                        )
                    );
                }
            }


             //count total time for day and for month
            $totalDayNew = 0;
            $isError = false;
            $utils = new Utils();
            if ($totalDayOld!= "00:00" && $totalDayOld != lang('error_no_info')){
                $totalMonthNew = $totalMonthOld == 0 ? 0 : $utils->timeCalc($totalMonthOld, $totalDayOld,"-");
            }
            else{
                $totalMonthNew = $totalMonthOld;
            }
            if (empty($arrEntry)&&empty($arrExit)){
                $totalDayNew = '00:00';
            }
            elseif (
                (empty($arrEntry)&&!empty($arrExit)) ||
                (!empty($arrEntry)&&empty($arrExit)) ||
                (count($arrEntry) != count($arrExit))
            ){
                $isError = true;
            }
            else{
                $count = count($arrEntry);
                for ($i=0; $i<$count; $i++){
                    $entry = $utils->timeToSec($arrEntry[$i]);
                    $exit = $utils->timeToSec($arrExit[$i]);

                    if ($exit < $entry){
                        $isError = true;
                        break;
                    }
                    else {
                        $timePair = $utils->timeCalc($arrExit[$i],$arrEntry[$i],"-");
                        $totalDayNew = $totalDayNew == 0 ? $timePair : $utils->timeCalc($totalDayNew,$timePair,"+" );
                    }
                }
            }
            if($isError) {
                $totalDayNew = lang('error_no_info');
            }
            else{
                $totalMonthNew = $totalMonthNew == 0 ? $totalDayNew : $utils->timeCalc($totalMonthNew,$totalDayNew,"+" );
            }



            json_message(array('totalMonth' => $totalMonthNew,"totalDay"=>$totalDayNew));
            break;


        // EditRegularClass  - Add



        case 'EditRegularClass':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {

                $ClientId = $_POST['ClientId'];

                $ClassId = $_POST['ClassId'];

                $RowId = $_POST['RowId'];



                $RegularClassMemberShip = $_POST['RegularClassMemberShip'];

                $RegularClassStatus = $_POST['RegularClassStatus'];

                $EditRegularClassAll = $_POST['EditRegularClassAll'];

                $TillDate = $_POST['TillDate'];

                $ClientActivitiesId = $_POST['ClientActivitiesId'];

                $OldStatus = $_POST['OldStatus'];



                /// עריכה בודדת

                if ($EditRegularClassAll == '0') {



                    $Client = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RowId)->first();



                    $AppSettings = DB::table('appsettings')->where('CompanyNum', '=', $CompanyNum)->first();

                    $MemberShipLimitMoney = $AppSettings->MemberShipLimitMoney;



                    if ($RegularClassMemberShip != $ClientActivitiesId) {





                        //// טיפול במנוי קודם



                        $ClientOldBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClientActivitiesId)->first();



                        if ($ClientOldBalanceValue->Department == '2' || $ClientOldBalanceValue->Department == '3') {



                            $CheckOldStatus = DB::table('class_status')->where('id', '=', $OldStatus)->first();

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', '3')->first();

                            $TrueBalanceValue = $ClientOldBalanceValue->TrueBalanceValue;

                            $ActBalanceValue = $ClientOldBalanceValue->ActBalanceValue;



                            $StatusCount = $CheckNewStatus->StatusCount;



                            if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            }



                            DB::table('client_activities')

                                ->where('CompanyNum', '=', $CompanyNum)

                                ->where('id', '=', $ClientActivitiesId)

                                ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                            if ($Client->ActStatus == '1') {

                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $ClientActivitiesId)

                                    ->update(array('ActBalanceValue' => $FinalActBalanceValue));

                            }





                        }



                        //// סיום טיפול במנוי קודם



                        $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RegularClassMemberShip)->first();

                        $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

                        $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

                        $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;



                        /// בדיקת סטטוס הלקוח

                        $CheckOldStatus = DB::table('class_status')->where('id', '=', '12')->first();

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularClassStatus)->first();



                        $StatusCount = $CheckNewStatus->StatusCount;



                        /// מנוי תקופתי

                        if ($ClientBalanceValue->Department == '1') {



                            if ($RegularClassStatus == '4' || $RegularClassStatus == '8') {

                                $KnasOption = '1';

                                $KnasOptionVule = $MemberShipLimitMoney;

                            }





                        } /// כרטיסיה

                        elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {



                            if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            }





                            DB::table('client_activities')

                                ->where('CompanyNum', '=', $CompanyNum)

                                ->where('id', '=', $RegularClassMemberShip)

                                ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                            if ($Client->ActStatus == '1') {



                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $RegularClassMemberShip)

                                    ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                            }





                        }



                        // תיעוד שינוי סטטוס



                        $Dates = date('Y-m-d G:i:s');

                        $UserId = Auth::user()->id;



                        $UserNameInfo = DB::table('users')->where('id', '=', $UserId)->first();

                        $UserName = $UserNameInfo->display_name;



                        $StatusJson = '';

                        $StatusJson .= '{"data": [';



                        if ($Client->StatusJson != '') {

                            $Loops = json_decode($Client->StatusJson, true);

                            foreach ($Loops['data'] as $key => $val) {



                                $DatesDB = $val['Dates'];

                                $UserIdDB = $val['UserId'];

                                $StatusDB = $val['Status'];

                                $StatusTitleDB = $val['StatusTitle'];

                                $UserNameDB = $val['UserName'];



                                $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                            }

                        }



                        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $RegularClassStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                        $StatusJson .= ']}';


                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();


                        ///// Class Log

                        DB::table('classlog')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ClassId' => $Client->ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                        /////////////////////////////////////////





                    } else {





                        $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RegularClassMemberShip)->first();

                        $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

                        $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

                        $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;

                        /// בדיקת סטטוס הלקוח

                        $CheckOldStatus = DB::table('class_status')->where('id', '=', $OldStatus)->first();

                        $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularClassStatus)->first();



                        $StatusCount = $CheckNewStatus->StatusCount;



                        /// מנוי תקופתי

                        if ($ClientBalanceValue->Department == '1') {



                            if ($RegularClassStatus == '4' || $RegularClassStatus == '8') {

                                $KnasOption = '1';

                                $KnasOptionVule = $MemberShipLimitMoney;

                            }





                        } /// כרטיסיה

                        elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {



                            if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue + 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                $FinalActBalanceValue = $ActBalanceValue - 1;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                $FinalActBalanceValue = $ActBalanceValue;

                            }





                            DB::table('client_activities')

                                ->where('CompanyNum', '=', $CompanyNum)

                                ->where('id', '=', $RegularClassMemberShip)

                                ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                            if ($Client->ActStatus == '1') {



                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $RegularClassMemberShip)

                                    ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                            }



                        }



                        // תיעוד שינוי סטטוס



                        $Dates = date('Y-m-d G:i:s');

                        $UserId = Auth::user()->id;

                        $UserNameInfo = DB::table('users')->where('id', '=', $UserId)->first();

                        $UserName = $UserNameInfo->display_name;

                        $StatusJson = '';

                        $StatusJson .= '{"data": [';



                        if ($Client->StatusJson != '') {

                            $Loops = json_decode($Client->StatusJson, true);

                            foreach ($Loops['data'] as $key => $val) {



                                $DatesDB = $val['Dates'];

                                $UserIdDB = $val['UserId'];

                                $StatusDB = $val['Status'];

                                $StatusTitleDB = $val['StatusTitle'];

                                $UserNameDB = $val['UserName'];



                                $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                            }

                        }



                        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $RegularClassStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                        $StatusJson .= ']}';


                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();


                        ///// Class Log

                        DB::table('classlog')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'ClassId' => $Client->ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                        /////////////////////////////////////////





                    }



                    if ($RegularClassStatus == $OldStatus) {

                        $StatusJson = $Client->StatusJson;

                    }



                    $ClassInfo = DB::table('classstudio_date')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Client->ClassId)->first();


                    $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ClientBalanceValue->ItemId, $ClassInfo->ClassNameType);
                    if ($CheckItemsRole) {
                        $TrueClasessFinal = $CheckItemsRole->GroupId;
                    } else {

                        $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', $ClientBalanceValue->ItemId)->first();

                        $TrueClasessFinal = @$CheckItemsRoleTwo->GroupId;

                    }

                    (new ClassStudioAct($RowId))->update([
                        'ClientActivitiesId' => $RegularClassMemberShip,
                        'Department' => $ClientBalanceValue->Department,
                        'MemberShip' => $ClientBalanceValue->MemberShip,
                        'StatusCount' => $StatusCount,
                        'Status' => $RegularClassStatus,
                        'StatusJson' => $StatusJson,
                        'TrueClasess' => $TrueClasessFinal,
                    ]);

                    DB::table('classstudio_dateregular')

                        ->where('id', $Client->RegularClassId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('ClientActivitiesId' => $RegularClassMemberShip, 'MemberShipType' => $ClientBalanceValue->MemberShip));



                    //// עדכון שיעור ברשימת משתתפים



                    $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                    $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();





                    DB::table('classstudio_date')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $Client->ClassId)

                        ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList));





                } /// עריכה כקבוצה

                else {



                    $Client = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RowId)->first();

                    $StartDate = $Client->ClassDate;





                    if ($RegularClassStatus == '12' || $RegularClassStatus == '9') {

                        DB::table('classstudio_dateregular')

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->where('id', '=', $Client->RegularClassId)

                            ->where('ClientId', '=', $ClientId)

                            ->update(array('StatusType' => $RegularClassStatus));

                    }



                    if (@$TillDate != '') {

                        $GetClasses = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->whereBetween('ClassDate', array($StartDate, $TillDate))->where('RegularClassId', '=', $ClassId)->get();

                    } else {

                        $GetClasses = DB::table('classstudio_act')->where('CompanyNum', '=', $CompanyNum)->where('ClassDate', '>=', $StartDate)->where('RegularClassId', '=', $ClassId)->get();

                    }



                    foreach ($GetClasses as $GetClass) {



                        $Old_ClientActivitiesId = $GetClass->ClientActivitiesId;

                        $OldStatus = $GetClass->Status;





                        if ($RegularClassMemberShip != $Old_ClientActivitiesId) {





                            //// טיפול במנוי קודם



                            $ClientOldBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Old_ClientActivitiesId)->first();



                            if ($ClientOldBalanceValue->Department == '2' || $ClientOldBalanceValue->Department == '3') {



                                $CheckOldStatus = DB::table('class_status')->where('id', '=', $OldStatus)->first();

                                $CheckNewStatus = DB::table('class_status')->where('id', '=', '3')->first();

                                $TrueBalanceValue = $ClientOldBalanceValue->TrueBalanceValue;

                                $ActBalanceValue = $ClientOldBalanceValue->ActBalanceValue;

                                $StatusCount = $CheckNewStatus->StatusCount;



                                if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                }



                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $Old_ClientActivitiesId)

                                    ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                                if ($Client->ActStatus == '1') {



                                    DB::table('client_activities')

                                        ->where('CompanyNum', '=', $CompanyNum)

                                        ->where('id', '=', $Old_ClientActivitiesId)

                                        ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                                }



                            }



                            //// סיום טיפול במנוי קודם



                            $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RegularClassMemberShip)->first();

                            $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

                            $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

                            $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;



                            /// בדיקת סטטוס הלקוח

                            $CheckOldStatus = DB::table('class_status')->where('id', '=', '12')->first();

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularClassStatus)->first();



                            $StatusCount = $CheckNewStatus->StatusCount;



                            /// מנוי תקופתי

                            if ($ClientBalanceValue->Department == '1') {



                                if ($RegularClassStatus == '4' || $RegularClassStatus == '8') {

                                    $KnasOption = '1';

                                    $KnasOptionVule = $MemberShipLimitMoney;

                                }





                            } /// כרטיסיה

                            elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {



                                if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                }





                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $RegularClassMemberShip)

                                    ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                                if ($Client->ActStatus == '1') {



                                    DB::table('client_activities')

                                        ->where('CompanyNum', '=', $CompanyNum)

                                        ->where('id', '=', $RegularClassMemberShip)

                                        ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                                }



                            }



                            // תיעוד שינוי סטטוס



                            $Dates = date('Y-m-d G:i:s');

                            $UserId = Auth::user()->id;



                            $UserNameInfo = DB::table('users')->where('id', '=', $UserId)->first();

                            $UserName = $UserNameInfo->display_name;



                            $StatusJson = '';

                            $StatusJson .= '{"data": [';



                            if ($Client->StatusJson != '') {

                                $Loops = json_decode($Client->StatusJson, true);

                                foreach ($Loops['data'] as $key => $val) {



                                    $DatesDB = $val['Dates'];

                                    $UserIdDB = $val['UserId'];

                                    $StatusDB = $val['Status'];

                                    $StatusTitleDB = $val['StatusTitle'];

                                    $UserNameDB = $val['UserName'];



                                    $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                                }

                            }



                            $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $RegularClassStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                            $StatusJson .= ']}';


                            $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $GetClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                            ///// Class Log

                            DB::table('classlog')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ClassId' => $GetClass->ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                            /////////////////////////////////////////



                        } else {



                            $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $RegularClassMemberShip)->first();

                            $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

                            $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

                            $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;



                            /// בדיקת סטטוס הלקוח

                            $CheckOldStatus = DB::table('class_status')->where('id', '=', $OldStatus)->first();

                            $CheckNewStatus = DB::table('class_status')->where('id', '=', $RegularClassStatus)->first();



                            $StatusCount = $CheckNewStatus->StatusCount;



                            /// מנוי תקופתי

                            if ($ClientBalanceValue->Department == '1') {



                                if ($RegularClassStatus == '4' || $RegularClassStatus == '8') {

                                    $KnasOption = '1';

                                    $KnasOptionVule = $MemberShipLimitMoney;

                                }





                            } /// כרטיסיה

                            elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {



                                if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue + 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                                    $FinalActBalanceValue = $ActBalanceValue - 1;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                                    $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                                    $FinalActBalanceValue = $ActBalanceValue;

                                }





                                DB::table('client_activities')

                                    ->where('CompanyNum', '=', $CompanyNum)

                                    ->where('id', '=', $RegularClassMemberShip)

                                    ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                                if ($Client->ActStatus == '1') {



                                    DB::table('client_activities')

                                        ->where('CompanyNum', '=', $CompanyNum)

                                        ->where('id', '=', $RegularClassMemberShip)

                                        ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                                }



                            }



                            // תיעוד שינוי סטטוס



                            $Dates = date('Y-m-d G:i:s');

                            $UserId = Auth::user()->id;

                            $UserNameInfo = DB::table('users')->where('id', '=', $UserId)->first();

                            $UserName = $UserNameInfo->display_name;

                            $StatusJson = '';

                            $StatusJson .= '{"data": [';



                            if ($Client->StatusJson != '') {

                                $Loops = json_decode($Client->StatusJson, true);

                                foreach ($Loops['data'] as $key => $val) {



                                    $DatesDB = $val['Dates'];

                                    $UserIdDB = $val['UserId'];

                                    $StatusDB = $val['Status'];

                                    $StatusTitleDB = $val['StatusTitle'];

                                    $UserNameDB = $val['UserName'];



                                    $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                                }

                            }



                            $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $RegularClassStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';



                            $StatusJson .= ']}';

                            $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $GetClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                            ///// Class Log

                            DB::table('classlog')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ClassId' => $GetClass->ClassId, 'ClientId' => $ClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));

                            /////////////////////////////////////////





                        }





                        if ($RegularClassStatus == $OldStatus) {

                            $StatusJson = $Client->StatusJson;

                        }




                        $TrueClasess = '';

                        $TrueClasessFinal = '';

                        $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClass->ClassId)->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->first();



                        $ActivityInfo = DB::table('client_activities')->where('id', '=', $RegularClassMemberShip)->where('CompanyNum', '=', $CompanyNum)->first();





                        if(!empty($ActivityInfo) && !empty($ClassInfo)) {
                            $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ActivityInfo->ItemId, $ClassInfo->ClassNameType);
                            if ($CheckItemsRole) {
                                $GroupId = $CheckItemsRole->GroupId;

                                $TrueClasessFinal = $CheckItemsRole->GroupId;

                                $TrueClasess = $CheckItemsRole->Class;
                            } else {

                                $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', @$ActivityInfo->ItemId)->first();

                                $TrueClasessFinal = @$CheckItemsRoleTwo->GroupId;

                            }
                        }
                        if(!isset($TrueClasessFinal)){
                            $TrueClasessFinal = "";
                        }


                        (new ClassStudioAct($GetClass->id))->update([
                            'ClientActivitiesId' => $RegularClassMemberShip,
                            'Department' => $ActivityInfo->Department,
                            'MemberShip' => $ActivityInfo->MemberShip,
                            'StatusCount' => $StatusCount,
                            'Status' => $RegularClassStatus,
                            'StatusJson' => $StatusJson,
                            'TrueClasess' => $TrueClasessFinal,
                        ]);

                        DB::table('classstudio_dateregular')

                            ->where('id', $GetClass->RegularClassId)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('ClientActivitiesId' => $RegularClassMemberShip, 'MemberShipType' => $ActivityInfo->MemberShip));





                        //// עדכון שיעור ברשימת משתתפים

                        if ($ClassInfo) {
                            $update = ClassStudioDate::updateClassRegistersCount($ClassInfo->id, $ClassInfo->GroupNumber, $ClassInfo->Floor, $ClassInfo->StartDate);
                        }

//                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $GetClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();
//
//                        $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $GetClass->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();
//
//
//
//                        $ClientRegisterRegular1 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GetClass->GroupNumber)->where('DayNum', '=', $GetClass->DayNum)->where('ClassTime', '=', $GetClass->ClassStartTime)->where('Floor', '=', $GetClass->FloorId)->where('RegularClassType', '=', '1')->where('StatusType', '=', '12')
//
//                            ->count();
//
//                        $ClientRegisterRegularWating1 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GetClass->GroupNumber)->where('DayNum', '=', $GetClass->DayNum)->where('ClassTime', '=', $GetClass->ClassStartTime)->where('Floor', '=', $GetClass->FloorId)->where('RegularClassType', '=', '1')->where('StatusType', '=', '9')
//
//                            ->count();
//
//
//
//
//
//                        $ClientRegisterRegular2 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GetClass->GroupNumber)->where('DayNum', '=', $GetClass->DayNum)->where('ClassTime', '=', $GetClass->ClassStartTime)->where('Floor', '=', $GetClass->FloorId)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $GetClass->ClassDate)->where('StatusType', '=', '12')
//
//                            ->count();
//
//                        $ClientRegisterRegularWating2 = DB::table('classstudio_dateregular')
//
//                            ->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GetClass->GroupNumber)->where('DayNum', '=', $GetClass->DayNum)->where('ClassTime', '=', $GetClass->ClassStartTime)->where('Floor', '=', $GetClass->FloorId)->where('RegularClassType', '=', '2')->where('EndDate', '>=', $GetClass->ClassDate)->where('StatusType', '=', '9')
//
//                            ->count();
//
//
//
//                        $ClientRegisterRegular = $ClientRegisterRegular1 + $ClientRegisterRegular2;
//
//                        $ClientRegisterRegularWating = $ClientRegisterRegularWating1 + $ClientRegisterRegularWating2;
//
//
//
//
//
//                        DB::table('classstudio_date')
//
//                            ->where('CompanyNum', '=', $CompanyNum)
//
//                            ->where('id', '=', $GetClass->ClassId)
//
//                            ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList, 'ClientRegisterRegular' => $ClientRegisterRegular, 'ClientRegisterRegularWating' => $ClientRegisterRegularWating));





                    }





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // AddClientLevel - Add



        case 'AddClientLevel':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = trim($_POST['Type']);



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                $Items = DB::table('clientlevel')->insertGetId(

                    array('Level' => $Type, 'CompanyNum' => $CompanyNum));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // EditClientLevel - Edit



        case 'EditClientLevel':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {

                $Type = trim($_POST['Type']);

                $ItemId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                DB::table('clientlevel')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Level' => $Type));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'SendPipeFormClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $TypeSend = $_POST['TypeSend'];

                $Email = @$_POST['Email'];





                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                $Brands = $ClientInfo->Brands;





                $Dates = date('Y-m-d G:i:s');

                $Date = date('Y-m-d');

                $Time = date('H:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $GroupNumber = rand(1262055681, 1262055681);

                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                $CreateCode = uniqid($GroupNumber);

                $CreateCode;

                $time = strtotime(date('Y-m-d'));

                $TimeOut = date("Y-m-d", strtotime("+1 month", $time));



                $AddTempClient = DB::table('tempclient')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Brands' => $Brands, 'CreateCode' => $CreateCode, 'UserId' => $UserId, 'TimeOut' => $TimeOut, 'ClientId' => $ClientId));





                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();



                if ($TypeSend == '1') {

                    $SMSPrice = $SettingsInfo->SMSPrice;

                    $LunchName = $SettingsInfo->AppName;

                    $ContentTrue = lang('join_form_ajax').' '. $LunchName . '

' . get_tiny_url('https://new.boostapp.co.il/online.php?CreateCode=' . $CreateCode);

                    $Subject = lang('join_form_ajax').' '. $LunchName;



                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => '1', 'Date' => $Date, 'Time' => $Time, 'System' => '0', 'SMSPrice' => $SMSPrice, 'SMSSumPrice' => '0', 'Count' => '0'));



                } else {

/// שליחת מייל הצטרפות לשותף

                    $LunchLink = 'https://new.boostapp.co.il/online.php?CreateCode=' . $CreateCode;

                    $LunchName = $SettingsInfo->AppName;

                    $ClientEmail = $Email;

                    $subject = lang('join_form_ajax').' '.$LunchName;

                    $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180"  /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_two_ajax').'</span><br /><br />



			 '.lang('join_link_ajax').' ' . $LunchName . ':<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

	 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';





                    $mail = new PHPMailer();



                    $mail->IsSMTP(); // enable SMTP

                    $mail->SMTPAuth = true; // authentication enabled

                    $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                    $mail->Host = "smtp.sendgrid.net";

                    $mail->Port = 587; // or 587

                    $mail->IsHTML(true);

                    $mail->Username = EmailService::USERNAME_SENDGRID;

                    $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                    $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                    $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                    $mail->AddAddress($ClientEmail);

//Set the subject line

                    $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                    $mail->MsgHTML($message);

//Replace the plain text body with one created manually

                    $mail->AltBody = ($message);



//Send the message, check for errors

                    if (!$mail->Send()) {

                        "Mailer Error: " . $mail->ErrorInfo;

                    } else {

                        "Message sent!";

                    }





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'SendPipeFormMedicalClient':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = $_POST['ClientId'];

                $TypeSend = $_POST['TypeSend'];

                $Email = @$_POST['Email'];





                $ClientInfo = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                $Brands = $ClientInfo->Brands;





                $Dates = date('Y-m-d G:i:s');

                $Date = date('Y-m-d');

                $Time = date('H:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;





                $SettingsInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();

                $CreateCode = $SettingsInfo->StudioUrl;

                if ($TypeSend == '1') {

                    $SMSPrice = $SettingsInfo->SMSPrice;

                    $LunchName = $SettingsInfo->AppName;

                    $ContentTrue = lang('send_health_to_ajax').' '.$LunchName. '

' . get_tiny_url('https://app.boostapp.co.il/MedicalSend.php?GetUrl=' . $CreateCode . '&Id=' . $ClientId);

                    $Subject = lang('join_form_ajax').' '.$LunchName;



                    $AddNotification = DB::table('appnotification')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'Subject' => $Subject, 'Text' => $ContentTrue, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => '1', 'Date' => $Date, 'Time' => $Time, 'System' => '0', 'SMSPrice' => $SMSPrice, 'SMSSumPrice' => '0', 'Count' => '0'));



                } else {

/// שליחת מייל הצטרפות לשותף

                    $LunchLink = 'https://app.boostapp.co.il/MedicalSend.php?GetUrl=' . $CreateCode . '&Id=' . $ClientId;

                    $LunchName = $SettingsInfo->AppName;

                    $ClientEmail = $Email;

                    $subject = lang('send_health_to_ajax').' '.$LunchName;

                    $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

</head>

<body>

<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0" dir="rtl">

  <tr>

    <td><table width= "650" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="border:10px solid #e1e1e1;">

        <tr>

          <td align="left" valign="top"><table width="650" border="0" cellspacing="0" cellpadding="0" style="border-bottom:1px solid #cccccc;">

            <tr>

              <td width="275" align="right" valign="middle" style="padding:30px;"><img src="' . $EmailsLogo . '" alt="Boostapp" title="Boostapp" width="180"  /></td>

              <td width="255" align="left" valign="middle" style="font-family:Arial; font-size:14px; color:#555555; padding:30px;"><strong>'.lang('system_notice').'</strong><br />

                ' . date('d/m/Y') . '</td>

            </tr>

          </table></td>

        </tr>

        <tr>

          <td align="left" valign="top"><table width="650" border="0" style="padding: 30px 30px 30px 30px;" cellpadding="0">

           		  

			<tr><td style="font-family:Arial; font-size:12px;padding-bottom:15px;">

             <span style="color:#000;font-family:Arial; font-size:14px; font-weight:bold;">'.lang('hello_two_ajax').'</span><br /><br />



			 '.lang('send_link_health_to_ajax').' '.$LunchName. ':<br>

             <a href="' . $LunchLink . '">' . $LunchLink . '</a>

			

			 <br><br>

	 

			 

			 <br /><br /> 

             '.lang('good_luck_ajax').'<br />

             '.lang('team_ajax').' <strong>' . $LunchName . '</strong>

			  </td>

			  </tr>

          

          </table></td>

        </tr>

      </table>

    <p align="center" style="font-family:Arial; font-size:11px;">&nbsp;</p></td>

  </tr>

</table>



</body>

</html>';





                    $mail = new PHPMailer();



                    $mail->IsSMTP(); // enable SMTP

                    $mail->SMTPAuth = true; // authentication enabled

                    $mail->SMTPSecure = 'tls'; // secure transfer enabled REQUIRED for GMail

                    $mail->Host = "smtp.sendgrid.net";

                    $mail->Port = 587; // or 587

                    $mail->IsHTML(true);

                    $mail->Username = EmailService::USERNAME_SENDGRID;

                    $mail->Password = EmailService::PASSWORD_SENDGRID;



//Set who the message is to be sent from

                    $mail->SetFrom($EmailReplay, $EmailReplayName);

//Set an alternative reply-to address

                    $mail->AddReplyTo($EmailReplay, $EmailReplayName);

//Set who the message is to be sent to



//Set who the message is to be sent to

                    $mail->AddAddress($ClientEmail);

//Set the subject line

                    $mail->Subject = ($subject);



//Read an HTML message body from an external file, convert referenced images to embedded, convert HTML into a basic plain-text alternative body

                    $mail->MsgHTML($message);

//Replace the plain text body with one created manually

                    $mail->AltBody = ($message);



//Send the message, check for errors

                    if (!$mail->Send()) {

                        "Mailer Error: " . $mail->ErrorInfo;

                    } else {

                        "Message sent!";

                    }





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'CheckInAppSettings':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ShowClassType' => $_POST['ShowClassType']),

                array('ShowClassType' => 'Required')

            );



            if ($validator->passes()) {



                $ShowClass = @$_POST['ShowClass'];

                $ShowClassType = $_POST['ShowClassType'];

                $ShowLateClass = @$_POST['ShowLateClass'];

                $ShowLateClassType = $_POST['ShowLateClassType'];

                $RefreshTime = @$_POST['RefreshTime'];

                $RefreshTimeType = $_POST['RefreshTimeType'];

                $ShowFullName = $_POST['ShowFullName'];

                $StatusClose = $_POST['StatusClose'];

                $language = isset($_POST['language-select']) ? $_POST['language-select'] : 'he';





                if ($ShowClass == '') {

                    json_message(lang('set_class_times_ajax'), false);

                    exit;

                }



                if ($ShowLateClass == '') {

                    json_message(lang('extra_time_class_ajax'), false);

                    exit;

                }



                if ($RefreshTime == '') {

                    json_message(lang('time_auto_refresh_ajax'), false);

                    exit;

                }





                $CompanyNum = $CompanyNum;



                DB::table('checkinsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ShowClass' => $ShowClass, 'ShowClassType' => $ShowClassType, 'ShowLateClass' => $ShowLateClass, 'ShowLateClassType' => $ShowLateClassType, 'RefreshTime' => $RefreshTime, 'RefreshTimeType' => $RefreshTimeType, 'ShowFullName' => $ShowFullName, 'StatusClose' => $StatusClose, 'language' => $language));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'LogCallRecord':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClientId' => $_POST['ClientId']),

                array('ClientId' => 'Required')

            );



            if ($validator->passes()) {



                $ClientId = @$_POST['ClientId'];

                $StartDate = @$_POST['StartDate'];

                $EndDate = @$_POST['EndDate'];

                $StartTime = @$_POST['StartTime'];

                $EndTime = @$_POST['EndTime'];



                if ($StartDate == '') {

                    json_message(lang('set_start_date_ajax'), false);

                    exit;

                }



                if ($EndDate == '') {

                    json_message(lang('set_end_date_ajax'), false);

                    exit;

                }



                if ($StartTime == '') {

                    json_message(lang('set_start_hour_ajax'), false);

                    exit;

                }



                if ($EndTime == '') {

                    json_message(lang('set_end_hour_class_ajax'), false);

                    exit;

                }



                if ($StartDate > $EndDate) {

                    json_message(lang('start_date_high_end_ajax'), false);

                    exit;

                }



                if ($StartDate == $EndDate && $StartTime > $EndTime) {

                    json_message(lang('start_hour_high_end_hour_ajax'), false);

                    exit;

                }



                $CompanyNum = $CompanyNum;

                $LogUserId = Auth::user()->id;

                $Settings = DB::table('settings')->where('CompanyNum', $CompanyNum)->first();

                $Supplier = DB::table('client')->where('id', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                $UserInfo = DB::table('users')->where('id', $LogUserId)->where('CompanyNum', $CompanyNum)->first();

                if (empty($Supplier->ContactMobile)) {
                    json_message(lang('mobile_phone_not_found_ajax'), false);
                    exit;
                }
                $mobileRegex = Client::mobileRegex;
                if(!preg_match($mobileRegex, $Supplier->ContactMobile)) {
                    json_message(lang('phone_format_incorrect_ajax'), false);
                    exit;
                }

                $AgentNumber = @$UserInfo->AgentNumber;

                if (strlen($AgentNumber) <= 9) {

                    $AgentNumber = @$Settings->VoiceCenterNumber;

                }

                if ($AgentNumber == '') {

                    $AgentNumber = @$Settings->VoiceCenterNumber;

                }

                $AgentExt = @$UserInfo->AgentEXT;

                $Mobile = substr($Supplier->ContactMobile, 0,4) == "+972" ? str_replace("+972", "0",$Supplier->ContactMobile) : $Supplier->ContactMobile;
                $Mobile = substr($Mobile, 0,1) != '0' ? '0'.$Mobile : $Mobile;

                $Token = $Settings->VoiceCenterToken;





                $todate = $EndDate . 'T' . $EndTime;

                $fromdate = $StartDate . 'T' . $StartTime;





                $Url = 'https://api1.voicenter.co.il/hub/cdr/?code=' . $Token . '&format=JSON&todate=' . $todate . '&fromdate=' . $fromdate . '&phones=' . $Mobile . '&fields=Date&fields=Type&Fields=DID&Fields=CallerNumber&Fields=CallerExtension&Fields=Duration&Fields=RecordURL&Fields=RepresentativeName&Fields=DialStatus';



                $ch = curl_init();

                curl_setopt($ch, CURLOPT_URL, $Url);

                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

                $server_output = curl_exec($ch);

                curl_close($ch);



                $json = $server_output;



                ///// לוג

                $Content = lang('log_generated_call_center_ajax');

                CreateLogMovement($Content, @$ClientId);





                json_message(array('json' => $json));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddStatus - Add



        case 'AddCalType':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $Color = $_POST['DocsBackgroundColor'];





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('caltype')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Type' => $Type, 'Color' => $Color));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'EditCalType':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Type = $_POST['Type'];

                $ItemId = $_POST['ItemId'];

                $Status = $_POST['Status'];

                $Color = $_POST['DocsBackgroundColor'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('caltype')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Type' => $Type, 'Status' => $Status, 'Color' => $Color));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddPipeReasons':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId']),

                array('ItemId' => 'Required')

            );



            if ($validator->passes()) {

                $ReasonId = $_POST['ReasonId'] ?? 0;

                $Remarks = $_POST['Remarks'] ?? '';

                $ItemId = $_POST['ItemId'];



                DB::table('pipeline')

                    ->where('id', $ItemId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('ReasonsId' => $ReasonId, 'FreeText' => $Remarks));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'MoveLeadProfile':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemId' => $_POST['ItemId']),

                array('ItemId' => 'Required')

            );



            if ($validator->passes()) {



                $ItemId = $_POST['ItemId'];



                $GetId = DB::table('pipeline')->where('id', $ItemId)->where('CompanyNum', $CompanyNum)->first();



                $AddClient = $GetId->ClientId;



                json_message(array('redirect' => '/office/ClientProfile.php?u=' . $AddClient));



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'MembershipTypes':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('MembershipType' => $_POST['MembershipType']),

                array('MembershipType' => 'Required')

            );



            if ($validator->passes()) {

                $MembershipType = $_POST['MembershipType'];



                DB::table('appsettings')

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('MembershipType' => $MembershipType));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'EditClassStatusPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ClassId' => $_POST['ClassId']),

                array('ClassId' => 'Required')

            );



            if ($validator->passes()) {

                $ClassId = $_POST['ClassId'];

                $Status = $_POST['Status'];



                DB::table('classstudio_date')

                    ->where('id', $ClassId)

                    ->where('CompanyNum', $CompanyNum)

                    ->update(array('Status' => $Status, 'displayCancel' => null));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // AddClassNewPrivatePopUp - Edit



        case 'AddClassNewPrivatePopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('FloorId' => @$_POST['FloorId']),

                array('FloorId' => 'Required')

            );





            if ($validator->passes()) {



                $CalendarId = @$_POST['CalendarId'];



                $FloorId = @$_POST['FloorId'];

                $ClassNameType = $_POST['ClassNameType'];

                $ShowApp = $_POST['ShowApp'];

                $ClassName = $_POST['ClassName'];

                $GuideId = $_POST['GuideId'];

                $ExtraGuideId = $_POST['ExtraGuideId'];

                $FixGroupNumber = $_POST['FixGroupNumber'];





                $MaxClient = $_POST['MaxClient'];

                $ClassLimitTypes = $_POST['ClassLimitTypes'] ?? 0; /// למשוך מגבלה לפי סוג מנוי

                $ClassMemberType = @$_POST['ClassMemberType'];



                $MinClass = $_POST['MinClass'];

                $MinClassNum = @$_POST['MinClassNum'];

                $ClassTimeCheck = @$_POST['ClassTimeCheck'];

                $ClassTimeTypeCheck = @$_POST['ClassTimeTypeCheck']; /// 1=min, 2=hour





                $ClassWating = $_POST['ClassWating'];

                $MaxWatingList = @$_POST['MaxWatingList'];

                $NumMaxWatingList = @$_POST['NumMaxWatingList'];



                if ($MaxWatingList == '1' && $NumMaxWatingList == '' || $MaxWatingList == '1' && $NumMaxWatingList == '0') {

                    $NumMaxWatingList = '0';

                }



                $JsonLimitLevel = '';

                foreach ($_POST['LimitLevel'] as $value) {

                    $JsonLimitLevel .= $value . ",";

                }

                $JsonLimitLevel = substr($JsonLimitLevel, 0, -1);



                $GenderLimit = $_POST['GenderLimit'];



//           $ClassLevel = $_POST['ClassLevel'];



                $SendReminder = $_POST['SendReminder'];

                $TypeReminder = $_POST['TypeReminder'];

                $TimeReminder = $_POST['TimeReminder'];



                $CancelLaw = $_POST['CancelLaw'];

                $CancelDays = @$_POST['CancelDay'];

                $FreeClass = $_POST['FreeClass'] ?? 0;



                if (@$CancelDays == '') {

                    $CancelDays = '0';

                    $CancelDayMinus = '7';

                }



                $DayNums = '0';



                $CancelDay = $CancelDays;



                if ($DayNums == '0') {



                    $Day = lang('sunday');

                    $DayNum = '0';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '1';

                    }





                } else if ($DayNums == '1') {



                    $Day = lang('monday');

                    $DayNum = '1';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '2';

                    }





                } else if ($DayNums == '2') {



                    $Day = lang('tuesday');

                    $DayNum = '2';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '3';

                    }



                } else if ($DayNums == '3') {



                    $Day = lang('wednesday');

                    $DayNum = '3';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '4';

                    }



                } else if ($DayNums == '4') {



                    $Day = lang('thursday');

                    $DayNum = '4';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '5';

                    }



                } else if ($DayNums == '5') {



                    $Day = lang('friday');

                    $DayNum = '5';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '6';

                    }



                } else if ($DayNums == '6') {



                    $Day = lang('saturday');

                    $DayNum = '6';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '7';

                    }



                }





                if (@$CancelDays == '') {

                    $CancelDays = $DayNums;

                    $CancelDay = $CancelDays;

                }





                if ($DayNums == '0') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '1') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    }



                } else if ($DayNums == '2') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('thursday');

                    }



                } else if ($DayNums == '3') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('saturday');

                    }





                } else if ($DayNums == '4') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '5') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '6') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('saturday');

                    }



                }





                $CancelTillTime = $_POST['CancelTillTime'];



                $StopCancel = $_POST['StopCancel'];

                $StopCancelTime = @$_POST['StopCancelTime'];

                $StopCancelType = @$_POST['StopCancelType'];





                $ShowClientNum = $_POST['ShowClientNum'];

                $ShowClientName = $_POST['ShowClientName'];

                $WatingListOrederShow = $_POST['WatingListOrederShow'];

                $ClassDevice = $_POST['ClassDevice'];


                //// בדיקת מגבלה סוגי מנוי

                $CheckLimitCounts = DB::table('templistmember')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->count();



                //// בדיקת שדות חובה



                if (@$ClassNameType == '') {

                    json_message(lang('req_field_class_type_ajax'), false);

                    exit;

                } else if (@$ClassName == '') {

                    json_message(lang('req_field_class_title_ajax'), false);

                    exit;

                } else if (@$GuideId == '') {

                    json_message(lang('req_field_class_title_ajax'), false);

                    exit;

                } else if (@$MaxClient == '') {

                    json_message(lang('req_field_max_participant_ajax'), false);

                    exit;

                } else if (@$MinClass == '1' && @$MinClassNum == '' || @$MinClass == '1' && @$ClassTimeCheck == '') {

                    json_message(lang('req_field_min_participant_time_ajax'), false);

                    exit;

                } else if (@$ClassType == '2' && @$ClassCount == '') {

                    json_message(lang('req_field_cycle_num_ajax'), false);

                    exit;

                } else if (@$ClassLimitTypes == '1' && @$CheckLimitCounts == '0') {

                    json_message(lang('select_membership_type_ajax'), false);

                    exit;

                } else if (@$TimeReminder == '' && @$SendReminder == '0') {

                    json_message(lang('set_notification_time_ajax'), false);

                    exit;

                } else if (@$CancelLaw == '1' && @$CancelTillTime == '' || @$CancelLaw == '2' && @$CancelTillTime == '') {

                    json_message(lang('set_cancel_time_ajax'), false);

                    exit;

                } else if (@$CancelLaw == '3' && @$CancelDay == '' || @$CancelLaw == '3' && @$CancelTillTime == '') {

                    json_message(lang('select_day_cancel_ajax'), false);

                    exit;

                }





                if ($MaxWatingList == '0' && $NumMaxWatingList == '' || $MaxWatingList == '0' && $NumMaxWatingList == '0') {

                    json_message(lang('set_max_waiting_ajax'), false);

                    exit;

                }





                //// סיום בדיקת שדות חובה



                $JsonMemberType = '';



                //// בדיקת משתנים מוסתרים



                if (@$MinClass != '1') {

                    $MinClassNum = '0';

                    $ClassTimeCheck = '0';

                }



                if (@$CancelLaw != '3') {

                    $CancelDay = '0';

                    $CancelDayName = '';

                }



                if (@$ClassDevice == '') {

                    $ClassDevice = '0';

                }



                $CompanyNum = $CompanyNum;

                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;



                ////  מחולל מספר ייחודי לקבוצה

                $GroupNumber = rand(1262055681, 1262055681);

                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                $GroupNumber = uniqid($GroupNumber);





                $GuideNames = DB::table('users')->where('id', '=', $GuideId)->first();





                if (@$ExtraGuideId == '0' || @$ExtraGuideId == '') {

                    $ExtraGuideId = '0';

                    $ExtraGuideNames_display_name = null;

                } else {

                    $ExtraGuideNames = DB::table('users')->where('id', '=', $ExtraGuideId)->first();

                    $ExtraGuideNames_display_name = $ExtraGuideNames->display_name;

                }



                $ClassNameTypeTitle = DB::table('class_type')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ClassNameType)->first();



                $color = $ClassNameTypeTitle->Color;



                $CalendarId = @$_POST['CalendarId'];



                /// הוספת שיעור חדש



                if (@$CalendarId == '') {



                    /// הגדרת שיעור חד פעמי



                    $ClassCount = '1';





                    $AddClassDesk = DB::table('classstudio_date_template')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'text' => $ClassNameTypeTitle->Type, 'color' => $color, 'Floor' => $FloorId, 'ClassNameType' => $ClassNameType, 'ShowApp' => $ShowApp, 'ClassName' => $ClassName, 'GuideId' => $GuideId, 'GuideName' => $GuideNames->display_name, 'ExtraGuideId' => $ExtraGuideId, 'ExtraGuideName' => @$ExtraGuideNames_display_name, 'MaxClient' => $MaxClient, 'MinClass' => $MinClass, 'MinClassNum' => $MinClassNum, 'ClassTimeCheck' => $ClassTimeCheck, 'ClassType' => '4', 'ClassCount' => $ClassCount, 'ClassDevice' => $ClassDevice, 'ClassMemberType' => 'BA999', 'ClassWating' => $ClassWating, 'ShowClientNum' => $ShowClientNum, 'ShowClientName' => $ShowClientName, 'SendReminder' => $SendReminder, 'TypeReminder' => $TypeReminder, 'TimeReminder' => $TimeReminder, 'CancelLaw' => $CancelLaw, 'CancelDay' => $CancelDay, 'CancelDayMinus' => $CancelDayMinus, 'CancelDayName' => $CancelDayName, 'CancelTillTime' => $CancelTillTime, 'UserId' => $UserId, 'GroupNumber' => $GroupNumber, 'Dates' => $Dates, 'MaxWatingList' => $MaxWatingList, 'NumMaxWatingList' => $NumMaxWatingList, 'ClassTimeTypeCheck' => $ClassTimeTypeCheck, 'ClassLimitTypes' => $ClassLimitTypes, 'LimitLevel' => $JsonLimitLevel, 'GenderLimit' => $GenderLimit, 'FreeClass' => $FreeClass, 'StopCancel' => $StopCancel, 'StopCancelTime' => $StopCancelTime, 'StopCancelType' => $StopCancelType, 'WatingListOrederShow' => $WatingListOrederShow));





                    if ($ClassLimitTypes == '1') {



                        $count = $_POST['tGroups'];

                        for ($e = 1; $e <= $count; $e++) {



                            $ClassMemberType = @$_POST['ClassMemberType' . $e];



                            if ($ClassMemberType != '') {



                                $JsonMemberType = '';

                                foreach (@$ClassMemberType as $value) {

                                    $JsonMemberType .= $value . ",";

                                }

                                $JsonMemberType = substr($JsonMemberType, 0, -1);



                                $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                if (@$MaxClientMemberShip == '') {

                                    $MaxClientMemberShip = $MaxClient;

                                }



                                $AddClassLimit = DB::table('classstudio_date_roles_template')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ClassId' => $AddClassDesk, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                            }





                        }



                    }





                } /// עריכה

                else {



                    $ClassStatus = $_POST['ClassStatus'];

                    $CalendarId = $CalendarId;



                    $CheckClassInfo = DB::table('classstudio_date_template')->where('id', '=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->first();

                    $GroupNumber = $CheckClassInfo->GroupNumber;





                    DB::table('classstudio_date_template')

                        ->where('id', $CalendarId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('Floor' => $FloorId, 'text' => $ClassNameTypeTitle->Type, 'color' => $color, 'ClassNameType' => $ClassNameType, 'ShowApp' => $ShowApp, 'ClassName' => $ClassName, 'GuideId' => $GuideId, 'GuideName' => $GuideNames->display_name, 'ExtraGuideId' => $ExtraGuideId, 'ExtraGuideName' => @$ExtraGuideNames_display_name, 'MaxClient' => $MaxClient, 'MinClass' => $MinClass, 'MinClassNum' => $MinClassNum, 'ClassTimeCheck' => $ClassTimeCheck, 'ClassDevice' => $ClassDevice, 'ClassWating' => $ClassWating, 'ShowClientNum' => $ShowClientNum, 'ShowClientName' => $ShowClientName, 'SendReminder' => $SendReminder, 'TypeReminder' => $TypeReminder, 'TimeReminder' => $TimeReminder, 'CancelLaw' => $CancelLaw, 'CancelDay' => $CancelDay, 'CancelDayMinus' => $CancelDayMinus, 'CancelDayName' => $CancelDayName, 'CancelTillTime' => $CancelTillTime, 'MaxWatingList' => $MaxWatingList, 'NumMaxWatingList' => $NumMaxWatingList, 'ClassTimeTypeCheck' => $ClassTimeTypeCheck, 'Change' => '1', 'ClassLimitTypes' => $ClassLimitTypes, 'LimitLevel' => $JsonLimitLevel, 'GenderLimit' => $GenderLimit, 'FreeClass' => $FreeClass, 'StopCancel' => $StopCancel, 'StopCancelTime' => $StopCancelTime, 'StopCancelType' => $StopCancelType, 'WatingListOrederShow' => $WatingListOrederShow, 'Status' => $ClassStatus));





                    if ($ClassLimitTypes == '1') {



                        DB::table('classstudio_date_roles_template')->where('ClassId', '=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->delete();



                        $count = $_POST['tGroups'];

                        for ($e = 1; $e <= $count; $e++) {



                            $ClassMemberType = @$_POST['ClassMemberType' . $e];



                            if ($ClassMemberType != '') {



                                $JsonMemberType = '';

                                foreach (@$ClassMemberType as $value) {

                                    $JsonMemberType .= $value . ",";

                                }

                                $JsonMemberType = substr($JsonMemberType, 0, -1);



                                $MaxClientMemberShip = @$_POST['MaxClientMemberShip' . $e];



                                if (@$MaxClientMemberShip == '') {

                                    $MaxClientMemberShip = $MaxClient;

                                }



                                $AddClassLimit = DB::table('classstudio_date_roles_template')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ClassId' => $CalendarId, 'MemberShipType' => $JsonMemberType, 'Value' => $MaxClientMemberShip));



                            }





                        }



                    } else {

                        DB::table('classstudio_date_roles_template')->where('ClassId', '=', $CalendarId)->where('CompanyNum', '=', $CompanyNum)->delete();

                    }





                }





                DB::table('templistmember')->where('GroupNumber', '=', $FixGroupNumber)->where('CompanyNum', '=', $CompanyNum)->delete();





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddsClassNewPopUp':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('SetDate' => @$_POST['SetDate'], 'SetTime' => @$_POST['SetTime'], 'SetToTime' => @$_POST['SetToTime'], 'Template' => @$_POST['Template'], 'Day' => @$_POST['Day']),

                array('SetDate' => 'Required', 'SetTime' => 'Required', 'SetToTime' => 'Required', 'Template' => 'Required', 'Day' => 'Required')

            );





            if ($validator->passes()) {



                $Template = @$_POST['Template'];



                $FixGroupNumber = $_POST['FixGroupNumber'];



                $StartDate = @$_POST['SetDate'];

                if (empty($StartDate) || ($StartDate && strtotime($StartDate) > strtotime("+1 year"))) {
                    json_message(lang('unvalid_update_date'), false);
                    exit;
                }

                $DayNums = @$_POST['Day'];

                $StartTime = @$_POST['SetTime'];

                $EndTime = @$_POST['SetToTime'];

                $ClassType = @$_POST['ClassType'];

                $ClassCount = $_POST['ClassCount'] ?? 0;

                $ClassRepeat = @$_POST['ClassRepeat'];

                $image = $_POST["pageImgPath"] ?? null;


                $SendReminder = $_POST['SendReminder'];

                $TypeReminder = $_POST['TypeReminder'];

                $TimeReminder = $_POST['TimeReminder'];



                $CancelLaw = $_POST['CancelLaw'];

                $CancelDays = @$_POST['CancelDay'];



                if (@$CancelDays == '') {

                    $CancelDays = '0';

                    $CancelDayMinus = '7';

                }



                $CancelDay = $CancelDays;



                if ($DayNums == '0') {



                    $Day = lang('sunday');

                    $DayNum = '0';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '1';

                    }





                } else if ($DayNums == '1') {



                    $Day = lang('monday');

                    $DayNum = '1';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '2';

                    }





                } else if ($DayNums == '2') {



                    $Day = lang('tuesday');

                    $DayNum = '2';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '3';

                    }



                } else if ($DayNums == '3') {



                    $Day = lang('wednesday');

                    $DayNum = '3';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '4';

                    }



                } else if ($DayNums == '4') {



                    $Day = lang('thursday');

                    $DayNum = '4';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '5';

                    }



                } else if ($DayNums == '5') {



                    $Day = lang('friday');

                    $DayNum = '5';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '6';

                    }



                } else if ($DayNums == '6') {



                    $Day = lang('saturday');

                    $DayNum = '6';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '7';

                    }



                }





                if (@$CancelDays == '') {

                    $CancelDays = $DayNums;

                    $CancelDay = $CancelDays;

                }





                if ($DayNums == '0') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '1') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('wednesday');
                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '2') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '3') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('saturday');

                    }





                } else if ($DayNums == '4') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '5') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '6') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('saturday');

                    }



                }


                $CancelTillTime = $_POST['CancelTillTime'];

                $DeviceId = '0';



                $CheckTemplate = DB::table('classstudio_date_template')->where('id', '=', $Template)->where('CompanyNum', '=', $CompanyNum)->first();

                $CheckSection = DB::table('sections')->where('id', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->first();

                $MaxClientPrivate = $CheckSection->MaxClient;



                //// בדיקת שדות חובה




                if (@$Template == '') {
                    json_message(lang('select_class_template_ajax'), false);
                    exit;
                } elseif (@$ClassType == '2' && ($ClassCount == '' || $ClassCount <= 0)) {
                    json_message(lang('req_field_cycle_num_ajax'), false);
                    exit;
                } elseif (@$ClassType == '2' && $ClassCount > 30) {
                    json_message(lang('incorret_quantity_js'), false);
                    exit;
                } elseif (@$TimeReminder == '' && @$SendReminder == '0') {
                    json_message(lang('set_notification_time_ajax'), false);
                    exit;
                } elseif ((@$CancelLaw == '1' && @$CancelTillTime == '') || (@$CancelLaw == '2' && @$CancelTillTime == '')) {
                    json_message(lang('set_cancel_time_ajax'), false);
                    exit;
                } elseif ((@$CancelLaw == '3' && @$CancelDay == '') || (@$CancelLaw == '3' && @$CancelTillTime == '')) {
                    json_message(lang('select_day_cancel_ajax'), false);
                    exit;
                }



                //// בדיקת בחירת מנוי ללקוחות



                $TempMemberLists = DB::table('tempclient_private')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->get();

                foreach ($TempMemberLists as $TempMemberList) {



                    if ($TempMemberList->ActivityId == '0') {

                        json_message(lang('select_subscription_booking_ajax'), false);

                        exit;

                    }



                    if ($TempMemberList->ActivityId == 'X999' && $TempMemberList->NewActivityId == '0') {

                        json_message(lang('select_subscription_booking_ajax'), false);

                        exit;

                    }



                }



                //// סיום בדיקת שדות חובה





                $TempMemberLists = DB::table('tempclient_private')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->where('ActivityId', '=', 'X999')->get();

                foreach ($TempMemberLists as $TempMemberList) {





                    $CompanyNum = Auth::user()->CompanyNum;

                    $Vat = $SettingsInfo->Vat;

                    $ClientId = $TempMemberList->ClientId;

                    $Items = $TempMemberList->NewActivityId;

                    $StartDates = @$_POST['ClassDate'];

                    $Vaild_LastCalss = @$_POST['Vaild_LastCalss'];



                    $ItemNamep = trim(@$_POST['ItemNamep']);

                    $ItemPricep = trim(@$_POST['ItemPricep']);

                    $ClassDateEnd = @$_POST['ClassDateEnd'];



                    if (@$Items == '') {

                        json_message(lang('select_membership_ajax'), false);

                        exit;

                    }



                    if (@$StartDates == '') {

                        $Today = date('Y-m-d');

                        $StartDate = date('Y-m-d');

                    } else {

                        $Today = $StartDates;

                        $StartDate = $StartDates;

                    }



                    /// קליטת פרטי פעילות



                    $ItemsInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Items)->first();





                    $ItemText = $ItemsInfo->ItemName;

                    if ($ItemNamep != '') {

                        $ItemText = $ItemNamep;

                    }


                    $ItemPrice = $ItemsInfo->ItemPrice;
                    $ItemPriceVat = $ItemsInfo->ItemPriceVat;
                    $Department = $ItemsInfo->Department; // חוק מנוי
                    $MemberShip = $ItemsInfo->MemberShip; // סוג מנו
                    $Vaild = $ItemsInfo->Vaild; // חישוב תוקף

                    $Vaild_Type = $ItemsInfo->Vaild_Type; // סוג חישוב

                    $LimitClass = $ItemsInfo->LimitClass; // הגבלת שיעורים

                    $NotificationDays = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->NotificationDays ?? 0;


                    $BalanceClass = $ItemsInfo->BalanceClass; // כמות שיעורים
                    $MinusCards = (new CompanyProductSettings())->getSingleByCompanyNum($CompanyNum)->offsetMemberships ?? 1;

                    $StartTime = $ItemsInfo->StartTime; // הגבלת הזמנת שיעורים

                    $EndTime = $ItemsInfo->EndTime; // הגבלת הזמנת שיעורים

                    $CancelLImit = $ItemsInfo->CancelLImit; // ביטול הגבלה

                    $ClassSameDay = $ItemsInfo->ClassSameDay; // הזמנת שיעור באותו היום

                    $FreezMemberShip = $ItemsInfo->FreezMemberShip; // ניתן להקפאה?

                    $FreezMemberShipDays = $ItemsInfo->FreezMemberShipDays; // מספר ימים מקסימלי להקפאה

                    $FreezMemberShipCount = $ItemsInfo->FreezMemberShipCount; // מספר פעמים שניתן להקפיא מנוי





                    $LimitClassMorning = $ItemsInfo->LimitClassMorning;

                    $LimitClassEvening = $ItemsInfo->LimitClassEvening;

                    $LimitClassMonth = $ItemsInfo->LimitClassMonth;



                    $TrueBalanceClass = $BalanceClass;

                    $BalanceValueLog = NULL;





                    $MemberShipRule = '';

                    $MemberShipRule .= '{"data": [';

                    $MemberShipRule .= '{"LimitClass": "' . $LimitClass . '", "NotificationDays": "' . $NotificationDays . '", "StartTime": "' . $StartTime . '", "EndTime": "' . $EndTime . '", "CancelLImit": "' . $CancelLImit . '", "ClassSameDay": "' . $ClassSameDay . '", "FreezMemberShip": "' . $FreezMemberShip . '", "FreezMemberShipDays": "' . $FreezMemberShipDays . '", "FreezMemberShipCount": "' . $FreezMemberShipCount . '", "LimitClassMorning": "' . $LimitClassMorning . '", "LimitClassEvening": "' . $LimitClassEvening . '", "LimitClassMonth": "' . $LimitClassMonth . '"}';

                    $MemberShipRule .= ']}';





                    // מנוי תקופתי

                    if ($Department == '1') {



                        /// חישוב תוקף מהשיעור האחרון במידה וקיים

                        if ($Vaild_LastCalss == '2') {

                            /// חישוב תוקף מהמנוי האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)->orderBy('id', 'DESC')->first();

                            } else {

                                $LastClass = DB::table('client_activities')

                                    ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->orderBy('id', 'DESC')->first();

                            }



                            if (@$LastClass->TrueDate != '') {

                                $StartDate = $LastClass->TrueDate;

                            }



                        } else if ($Vaild_LastCalss == '3') {

                            /// חישוב תוקף מהשיעור האחרון במידה וקיים

                            if ($MembershipType == '0') {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->where('MemberShip', '=', $MemberShip)
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();

                            } else {

                                $LastClass = DB::table('classstudio_act')
                                    ->where('CompanyNum', '=', $CompanyNum)
                                    ->where('FixClientId', '=', $ClientId)
                                    ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                    ->orderBy('ClassDate', 'DESC')
                                    ->first();

                            }



                            if (@$LastClass->ClassDate != '') {

                                $StartDate = $LastClass->ClassDate;

                            }



                        }



                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($StartDate);

                        $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));





                    } // כרטיסיה

                    else if ($Department == '2') {



                        $ClassDate = NULL;



                        /// חישוב תוקף

                        if ($Vaild != '0') {





                            /// חישוב תוקף מהשיעור האחרון במידה וקיים

                            if ($Vaild_LastCalss == '2') {

                                /// חישוב תוקף מהמנוי האחרון במידה וקיים

                                if ($MembershipType == '0') {

                                    $LastClass = DB::table('client_activities')

                                        ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->where('MemberShip', '=', $MemberShip)->orderBy('id', 'DESC')->first();

                                } else {

                                    $LastClass = DB::table('client_activities')

                                        ->where('Status', '=', '0')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->orderBy('id', 'DESC')->first();

                                }



                                if (@$LastClass->TrueDate != '') {

                                    $StartDate = $LastClass->TrueDate;

                                }



                            } else if ($Vaild_LastCalss == '3') {

                                /// חישוב תוקף מהשיעור האחרון במידה וקיים

                                if ($MembershipType == '0') {

                                    $LastClass = DB::table('classstudio_act')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('FixClientId', '=', $ClientId)
                                        ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                        ->where('MemberShip', '=', $MemberShip)
                                        ->orderBy('ClassDate', 'DESC')
                                        ->first();

                                } else {

                                    $LastClass = DB::table('classstudio_act')
                                        ->where('CompanyNum', '=', $CompanyNum)
                                        ->where('FixClientId', '=', $ClientId)
                                        ->whereIn('Status', [1, 2, 4, 6, 8, 10, 11, 12, 15, 16, 21, 23])
                                        ->orderBy('ClassDate', 'DESC')
                                        ->first();

                                }



                                if (@$LastClass->ClassDate != '') {

                                    $StartDate = $LastClass->ClassDate;

                                }
                            }

                            $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                            $ItemsTime = '+' . $Vaild . ' ' . $Vaild_TypeOptions;



                            $time = strtotime($StartDate);

                            $ClassDate = date("Y-m-d", strtotime($ItemsTime, $time));

                        }

                    } else if ($Department == '3') {

                        $ClassDate = NULL;

                        $MemberShipRule = NULL;

                        $LimitClass = '999';

                    } elseif ($Department == '4') {

                        $ClassDate = NULL;

                        $MemberShipRule = NULL;

                        $LimitClass = '0';

                        $BalanceClass = '0';

                    }



                    // מספור מספר המנויים שהלקוח רכש

                    $CardNum = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('ClientId', '=', $ClientId)->count();

                    $CardNumber = $CardNum + 1;



                    if (($ClassDateEnd != '' && $Department == '1') || ($ClassDateEnd != '' && $Department == '2')) {

                        $ClassDate = $ClassDateEnd;

                    }

                    /// הכנסת נתונים ועדכון טבלאות
                    $UserId = Auth::user()->id;

                    $Dates = date('Y-m-d G:i:s');

                    $Vaild_TypeOptions = @$Vaild_TypeOption['1'];

                    $ItemsTime = '-' . $NotificationDays . ' ' . $Vaild_TypeOptions;



                    $time = strtotime($ClassDate);

                    $NotificationDate = date("Y-m-d", strtotime($ItemsTime, $time));



                    if ($NotificationDays == '0' || $NotificationDays == '' || $Department == '4' || $Department == '3') {

                        $NotificationDate = NULL;

                    }





                    if ($ItemPricep != '') {



                        $ItemPrice = $ItemPricep;

                        $CompanyVat = $SettingsInfo->CompanyVat;



                        $Vat = $_POST['Vat'];



                        if ($CompanyVat == '0') {



                            if ($Vat == '0') {



                                $Vat = $SettingsInfo->Vat;

                                $Vats = '1.' . $Vat;


                                $TotalVatItemPrice = $ItemPrice / $Vats;

                                $TotalVatItemPrice = round($ItemPrice - $TotalVatItemPrice, 2);



                                $ItemPriceVat = round($ItemPrice - $TotalVatItemPrice, 2);



                            } else {


                                $ItemPriceVat = $ItemPrice;

                                $Vat = $SettingsInfo->Vat;

                                $TotalVatItemPrice = $ItemPrice * $Vat / 100;

                                $TotalVatItemPrice = round($TotalVatItemPrice, 2);

                                $ItemPrice = $ItemPrice + $TotalVatItemPrice;



                            }





                        } else {

                            $ItemPriceVat = $ItemPrice;

                        }





                    }



                    $VatAmount = $ItemPrice - $ItemPriceVat;

                    $AddClientActivity = DB::table('client_activities')->insertGetId(array(
                        'CompanyNum' => $CompanyNum,
                        'CardNumber' => $CardNumber,
                        'ClientId' => $ClientId,
                        'Department' => $Department,
                        'MemberShip' => $MemberShip,
                        'ItemId' => $Items,
                        'ItemText' => $ItemText,
                        'ItemPrice' => $ItemPrice,
                        'ItemPriceVat' => $ItemPriceVat,
                        'ItemPriceVatDiscount' => $ItemPriceVat,
                        'Vat' => $Vat,
                        'VatAmount' => $VatAmount,
                        'StartDate' => $StartDate,
                        'VaildDate' => $ClassDate,
                        'TrueDate' => $ClassDate,
                        'BalanceValue' => $BalanceClass,
                        'TrueBalanceValue' => $TrueBalanceClass,
                        'LimitClass' => $LimitClass,
                        'Dates' => $Dates,
                        'UserId' => $UserId,
                        'BalanceMoney' => $ItemPrice,
                        'MemberShipRule' => $MemberShipRule,
                        'NotificationDays' => $NotificationDate,

                    ));

                    $data = [
                        "CompanyNum" => $CompanyNum,
                        "ClientId" => $ClientId,
                        "ActivityId" => $AddClientActivity,
                        "MemberShip" => $MemberShip,
                        "MembershipType" => $MembershipType,
                        "MinusCards" => $MinusCards,
                        "Department" => $Department,
                        "TrueClasessFinal" => $TrueClasessFinal ?? '',
                        "BalanceClass" => $BalanceClass,
                        "StartDate" => $StartDate
                    ];
                    (new ClientActivities())->moveClassesToNewActivity($data);



                    //// עדכון חוב ללקוח



                    $MemberShipText = '';

                    $MemberShipText .= '{"data": [';

                    $Taski = '1';

                    $GetTasks = DB::table('client_activities')

                        ->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '1')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                        ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                        ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '2')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                        ->Orwhere('TrueBalanceValue', '>=', '1')->whereNull('TrueDate')->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                        ->Orwhere('TrueBalanceValue', '>=', '1')->where('TrueDate', '>=', date('Y-m-d'))->where('Department', '=', '3')->where('ClientId', '=', $ClientId)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')

                        ->orderBy('CardNumber', 'ASC')->get();

                    $TaskCount = count($GetTasks);



                    foreach ($GetTasks as $GetTask) {



                        if ($Taski < $TaskCount) {

                            $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"},';

                        } else {

                            $MemberShipText .= '{"ItemText": "' . $GetTask->ItemText . '", "TrueDate": "' . $GetTask->TrueDate . '", "TrueBalanceValue": "' . $GetTask->TrueBalanceValue . '", "Id": "' . $GetTask->id . '", "LimitClass": "' . $GetTask->LimitClass . '"}';

                        }





                        ++$Taski;

                    }

                    $MemberShipText .= ']}';





                    //// בדיקת כרטיסית אב



                    $CheckCleintPayment = DB::table('client')->where('id', '=', $ClientId)->where('CompanyNum', $CompanyNum)->first();

                    $BalanceAmount = '0.00';





                    if (@$CheckCleintPayment->PayClientId != '0') {

                        $PayClientId = $CheckCleintPayment->PayClientId;



                        $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $PayClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                        DB::table('client')

                            ->where('id', $ClientId)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('BalanceAmount' => '0.00'));



                        DB::table('client_activities')

                            ->where('ClientId', $ClientId)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('PayClientId' => $PayClientId));



                    } else {

                        $PayClientId = $ClientId;



                        $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $ClientId)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');



                        DB::table('client_activities')

                            ->where('ClientId', $ClientId)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('PayClientId' => '0'));



                    }



                    $CheckClientInfoer = DB::table('client')->where('CompanyNum', $CompanyNum)->where('PayClientId', $PayClientId)->get();

                    if (!empty($CheckClientInfoer)) {

                        foreach ($CheckClientInfoer as $CheckClientInfo) {

                            if (@$CheckClientInfo->id != '') {

                                $BalanceAmount += DB::table('client_activities')->where('ClientId', '=', $CheckClientInfo->id)->where('CompanyNum', $CompanyNum)->where('CancelStatus', '=', '0')->where('isDisplayed',  1)->sum('BalanceMoney');

                            }

                        }

                    }





                    DB::table('client')

                        ->where('id', $PayClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->update(array('BalanceAmount' => $BalanceAmount, 'MemberShipText' => $MemberShipText));





                    //// סגירת מנוי קודם



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '1')

                        ->where('Status', '=', '0')

                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));





                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '2')

                        ->where('Status', '=', '0')

                        ->where('TrueBalanceValue', '<=', '0')

                        ->update(array('Status' => '3'));



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '2')

                        ->where('Status', '=', '0')

                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));





                    ///// סגירת מנוי היכרות/התנסות



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '3')

                        ->where('Status', '=', '0')

                        ->where('TrueBalanceValue', '<=', '0')

                        ->update(array('Status' => '3'));



                    DB::table('client_activities')

                        ->where('ClientId', $ClientId)

                        ->where('CompanyNum', $CompanyNum)

                        ->where('Department', '=', '3')

                        ->where('Status', '=', '0')

                        ->where('TrueDate', '<=', date('Y-m-d'))

                        ->update(array('Status' => '3'));





                    //// עדכון מנוי שיבוץ קבוע



                    $CheckClientRegular = DB::table('classstudio_dateregular')->where('CompanyNum', $CompanyNum)->where('ClientId', $ClientId)->first();



                    if (@$CheckClientRegular->id != '') {



                        $ClientActivitiesId = $CheckClientRegular->ClientActivitiesId;

                        $CheckClientActivites = DB::table('client_activities')->where('CompanyNum', $CompanyNum)->where('id', $ClientActivitiesId)->first();



                        if (@$CheckClientActivites->Status != '0' && $Department != '4') {



                            DB::table('classstudio_dateregular')

                                ->where('ClientId', $ClientId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('ClientActivitiesId' => $AddClientActivity));





                            DB::table('classstudio_act')

                                ->where('ClientId', $ClientId)

                                ->where('CompanyNum', $CompanyNum)

                                ->where('ClassDate', '>=', date('Y-m-d'))

                                ->whereIn('Status', array(12, 9))

                                ->update(array('ClientActivitiesId' => $AddClientActivity));





                        }



                    }





                    /// עדכון ספירה לסוג המנוי

                    if ($Department == '1' || $Department == '2' || $Department == '3') {





                        if ($Department == '1') {



                            $GetActivityCount = DB::table('client_activities')->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('MemberShip', '=', $MemberShip)->where('Department', '=', '1')->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                        } else if ($Department == '2') {



                            $GetActivityCount = DB::table('client_activities')->where('ActBalanceValue', '>=', '1')->where('StartDate', '<=', date('Y-m-d'))->whereNull('TrueDate')->where('Department', '=', '2')

                                ->where('MemberShip', '=', $MemberShip)->where('CompanyNum', '=', $CompanyNum)->where('Status', '=', '0')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')->Orwhere('ActBalanceValue', '>=', '1')

                                ->where('TrueDate', '>=', date('Y-m-d'))->where('StartDate', '<=', date('Y-m-d'))->where('Department', '=', '2')->where('MemberShip', '=', $MemberShip)->where('CompanyNum', '=', $CompanyNum)->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')

                                ->where('Status', '=', '0')->count();



                        } else if ($Department == '3') {



                            $GetActivityCount = DB::table('client_activities')->where('CompanyNum', $CompanyNum)->where('StartDate', '<=', date('Y-m-d'))->where('Department', '3')->where('MemberShip', $MemberShip)->where('ActBalanceValue', '>=', '1')->where('Status', '=', '0')->where('ClientStatus', '=', '0')->where('FirstDateStatus', '=', '0')->count();



                        }





                        DB::table('membership_type')

                            ->where('id', $MemberShip)

                            ->where('CompanyNum', $CompanyNum)

                            ->update(array('Count' => $GetActivityCount));



                    }





                    DB::table('tempclient_private')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $TempMemberList->id)

                        ->update(array('TrueActivityId' => $AddClientActivity));



                }





                $Template = @$_POST['Template'];



                $FixGroupNumber = $_POST['FixGroupNumber'];



                $StartDate = @$_POST['SetDate'];

                $DayNums = @$_POST['Day'];

                $StartTime = @$_POST['SetTime'];

                $EndTime = @$_POST['SetToTime'];

                $ClassType = @$_POST['ClassType'];

                $ClassCount = $_POST['ClassCount'] ?? 0;

                $ClassRepeat = @$_POST['ClassRepeat'];





                $SendReminder = $_POST['SendReminder'];

                $TypeReminder = $_POST['TypeReminder'];

                $TimeReminder = $_POST['TimeReminder'];



                $CancelLaw = $_POST['CancelLaw'];

                $CancelDays = @$_POST['CancelDay'];



                if (@$CancelDays == '') {

                    $CancelDays = '0';

                    $CancelDayMinus = '7';

                }



                $CancelDay = $CancelDays;



                if ($DayNums == '0') {



                    $Day = lang('sunday');

                    $DayNum = '0';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '1';

                    }





                } else if ($DayNums == '1') {



                    $Day = lang('monday');

                    $DayNum = '1';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '2';

                    }





                } else if ($DayNums == '2') {



                    $Day = lang('tuesday');

                    $DayNum = '2';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '3';

                    }



                } else if ($DayNums == '3') {



                    $Day = lang('wednesday');

                    $DayNum = '3';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '4';

                    }



                } else if ($DayNums == '4') {



                    $Day = lang('thursday');

                    $DayNum = '4';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '5';

                    }



                } else if ($DayNums == '5') {



                    $Day = lang('friday');

                    $DayNum = '5';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '7';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '6';

                    }



                } else if ($DayNums == '6') {



                    $Day = lang('saturday');

                    $DayNum = '6';



                    if ($CancelDays == '0') {

                        $CancelDayMinus = '6';

                    } else if ($CancelDays == '1') {

                        $CancelDayMinus = '5';

                    } else if ($CancelDays == '2') {

                        $CancelDayMinus = '4';

                    } else if ($CancelDays == '3') {

                        $CancelDayMinus = '3';

                    } else if ($CancelDays == '4') {

                        $CancelDayMinus = '2';

                    } else if ($CancelDays == '5') {

                        $CancelDayMinus = '1';

                    } else if ($CancelDays == '6') {

                        $CancelDayMinus = '7';

                    }



                }





                if (@$CancelDays == '') {

                    $CancelDays = $DayNums;

                    $CancelDay = $CancelDays;

                }





                if ($DayNums == '0') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '1') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '2') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '3') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('saturday');

                    }





                } else if ($DayNums == '4') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '5') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('saturday');

                    }



                } else if ($DayNums == '6') {



                    $CancelDay = $CancelDays;



                    if ($CancelDay == '0') {

                        $CancelDayMinus = '6';

                        $CancelDayName = lang('sunday');

                    } else if ($CancelDay == '1') {

                        $CancelDayMinus = '5';

                        $CancelDayName = lang('monday');

                    } else if ($CancelDay == '2') {

                        $CancelDayMinus = '4';

                        $CancelDayName = lang('tuesday');

                    } else if ($CancelDay == '3') {

                        $CancelDayMinus = '3';

                        $CancelDayName = lang('wednesday');

                    } else if ($CancelDay == '4') {

                        $CancelDayMinus = '2';

                        $CancelDayName = lang('thursday');

                    } else if ($CancelDay == '5') {

                        $CancelDayMinus = '1';

                        $CancelDayName = lang('friday');

                    } else if ($CancelDay == '6') {

                        $CancelDayMinus = '7';

                        $CancelDayName = lang('saturday');

                    }



                }





                $CancelTillTime = $_POST['CancelTillTime'];

                $DeviceId = '0';



                $CheckTemplate = DB::table('classstudio_date_template')->where('id', '=', $Template)->where('CompanyNum', '=', $CompanyNum)->first();

                $CheckSection = DB::table('sections')->where('id', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->first();

                $MaxClientPrivate = $CheckSection->MaxClient;



                $BrandId = @$CheckSection->Brands;



                if ($BrandId == '') {

                    $BrandId = '0';

                }



                //// בדיקת משתנים מוסתרים



                if (@$CancelLaw != '3') {

                    $CancelDay = '0';

                    $CancelDayName = '';

                }

                $Dates = date('Y-m-d H:i:s');

                $UserId = Auth::user()->id;



                ////  מחולל מספר ייחודי לקבוצה

                $GroupNumber = rand(1262055681, 1262055681);

                $GroupNumber = uniqid() . '' . strtotime(date('YmdHis')) . '' . $GroupNumber . '' . rand(1, 9999999);

                $GroupNumber = uniqid($GroupNumber);




                /// הגדרת שיעור קבוע ו/או מוגבל בזמן

                if ($ClassType == '1' || $ClassType == '2') {



                    //// מציאת תאריכים לימים שנבחרו



                    if ($ClassType == '1') {

                        $ClassCount = '30';

                    }



                    $ItemsDay = '+' . $ClassCount . ' week';

                    $Today = date('Y-m-d', strtotime($StartDate));

                    $EndDates = date('Y-m-d', strtotime($Today . $ItemsDay));



                    function getDateForSpecificDayBetweenDates($startDate, $endDate, $weekdayNumber)

                    {


                        $endDate = $endDate;



                        $dateArr = array();



                        do {

                            if (date("w", strtotime($startDate)) != $weekdayNumber) {

                                $startDate = date('Y-m-d', strtotime('+1 day', strtotime($startDate))); // add 1 day

                            }

                        } while (date("w", strtotime($startDate)) != $weekdayNumber);





                        while ($startDate <= $endDate) {

                            $dateArr[] = date('Y-m-d', strtotime($startDate));

                            $startDate = date('Y-m-d', strtotime('+7 day', strtotime($startDate))); // add 7 days



                        }



                        return ($dateArr);

                    }





                    $dateArr = getDateForSpecificDayBetweenDates($Today, $EndDates, $DayNums);





                    // מספר חזרות

                    $i = '1';

                    foreach ($dateArr as $key => $value) {



                        $start_date = $value . ' ' . $StartTime;

                        $end_date = $value . ' ' . $EndTime;





                        //// בדיקת שיעור קיים באותו יום,שעה,אולם



                        $CheckFloor = DB::table('classstudio_date')->where('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('Private', '=', '0')->Orwhere('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('Status', '!=', '2')->where('Private', '=', '0')->first();



                        if (@$CheckFloor->id != '') {

                            $ErrorText = lang('date_class_found_ajax').' '.with(new DateTime($CheckFloor->StartDate))->format('d/m/Y').' '.lang('hours_selected_ajax').' '.'<br>' .lang('group_lesson_exist_ajax');

                            json_message(lang('error_booking_ajax').' '. $ErrorText, false);

                            exit;

                        }



                        //// בדיקת שיעור קיים פרטי באותו יום,שעה,אולם


                        $CheckFloorSum = DB::table('classstudio_date')->where('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('Private', '=', '1')->Orwhere('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $value)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('Status', '!=', '2')->where('Private', '=', '1')->sum('MaxClient');



                        if ($CheckFloorSum == '') {

                            $CheckFloorSum = '0';

                        }



                        if (@$CheckFloorSum >= $MaxClientPrivate && $MaxClientPrivate != '') {

                            $ErrorText = lang('date_class_found_ajax').' '. with(new DateTime($value))->format('d/m/Y') .' ' .lang('hours_selected_ajax').'.';

                            json_message(lang('error_booking_ajax') . $ErrorText, false);

                            exit;

                        }



                        if(isset($_POST['liveClass'])){
                            if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                            if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                        }else{
                            $is_zoom_class = 0;
                        }

                        $AddClassDesk = DB::table('classstudio_date')->insertGetId(

                            array('CompanyNum' => $CompanyNum, 'Brands' => $BrandId, 'start_date' => $start_date,
                                'end_date' => $end_date, 'text' => $CheckTemplate->text, 'color' => $CheckTemplate->color,
                                'Floor' => $CheckTemplate->Floor, 'ClassNameType' => $CheckTemplate->ClassNameType,
                                'ShowApp' => $CheckTemplate->ShowApp, 'ClassName' => $CheckTemplate->ClassName,
                                'GuideId' => $CheckTemplate->GuideId, 'GuideName' => $CheckTemplate->GuideName,
                                'ExtraGuideId' => $CheckTemplate->ExtraGuideId, 'ExtraGuideName' => $CheckTemplate->ExtraGuideName,
                                'MaxClient' => $CheckTemplate->MaxClient, 'MinClass' => $CheckTemplate->MinClass,
                                'MinClassNum' => $CheckTemplate->MinClassNum, 'ClassTimeCheck' => $CheckTemplate->ClassTimeCheck,
                                'StartDate' => $value, 'DayNum' => $DayNums, 'Day' => $Day, 'StartTime' => $StartTime,
                                'EndDate' => $value, 'EndTime' => $EndTime, 'ClassType' => $ClassType, 'ClassCount' => $i,
                                'ClassDevice' => $CheckTemplate->ClassDevice, 'ClassMemberType' => 'BA999',
                                'ClassWating' => $CheckTemplate->ClassWating, 'ShowClientNum' => $CheckTemplate->ShowClientNum,
                                'ShowClientName' => $CheckTemplate->ShowClientName, 'SendReminder' => $SendReminder,
                                'TypeReminder' => $TypeReminder, 'TimeReminder' => $TimeReminder, 'CancelLaw' => $CancelLaw,
                                'CancelDay' => $CancelDay, 'CancelDayMinus' => $CancelDayMinus, 'CancelDayName' => $CancelDayName,
                                'CancelTillTime' => $CancelTillTime, 'UserId' => $UserId, 'GroupNumber' => $GroupNumber,
                                'Dates' => $Dates, 'MaxWatingList' => $CheckTemplate->MaxWatingList,
                                'NumMaxWatingList' => $CheckTemplate->NumMaxWatingList, 'ClassTimeTypeCheck' => $CheckTemplate->ClassTimeTypeCheck,
                                'ClassLimitTypes' => $CheckTemplate->ClassLimitTypes, 'LimitLevel' => $CheckTemplate->LimitLevel,
                                'GenderLimit' => $CheckTemplate->GenderLimit, 'FreeClass' => $CheckTemplate->FreeClass,
                                'StopCancel' => $CheckTemplate->StopCancel, 'StopCancelTime' => $CheckTemplate->StopCancelTime,
                                'StopCancelType' => $CheckTemplate->StopCancelType, 'WatingListOrederShow' => $CheckTemplate->WatingListOrederShow,
                                'Private' => '1', 'PrivateId' => $Template,'is_zoom_class'=>$is_zoom_class, 'image' => $image)
                        );

                        if($AddClassDesk > 0) {
                            if( $is_zoom_class == 1) {
                                insertIntoClass_zoom($AddClassDesk);
                            }

                            $tagsStudio = new TagsStudio([
                                'studio_date_id' => $AddClassDesk,
                                'tags_id' => Tags::PERSONAL_TRAINING,
                                'company_num' => $CompanyNum,
                                'isCron' => 0
                            ]);
                            $tagsStudio->save();
                        }

                        if ($CheckTemplate->ClassLimitTypes == '1') {
                            $CheckTemplateRoles = DB::table('classstudio_date_roles_template')->where('ClassId', '=', $Template)->where('CompanyNum', '=', $CompanyNum)->get();

                            foreach ($CheckTemplateRoles as $CheckTemplateRole) {

                                $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                    array('CompanyNum' => $CompanyNum, 'ClassId' => $AddClassDesk, 'MemberShipType' => $CheckTemplateRole->MemberShipType, 'Value' => $CheckTemplateRole->Value));

                            }

                        }



                        ////// שבץ מתאמן לשיעור



                        $TempMemberLists = DB::table('tempclient_private')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->get();

                        foreach ($TempMemberLists as $TempMemberList) {



                            $ClientId = $TempMemberList->ClientId;

                            $ActivityId = $TempMemberList->ActivityId;



                            if ($ActivityId == 'X999') {

                                $ActivityId = $TempMemberList->TrueActivityId;

                            }



                            $TestClass = '1';

                            $ClassStartDate = $value;

                            $ClassStartTime = $StartTime;

                            $ClassDay = $Day;

                            $ClassName = $CheckTemplate->ClassName;

                            $DayNum = $DayNums;

                            $ClassFloor = $CheckTemplate->Floor;

                            $ClassNameType = $CheckTemplate->ClassNameType;





                            $ReminderStatus = $SendReminder;

                            $CancelLaw1 = $CancelLaw;

                            $CancelDay1 = $CancelDay;

                            $CancelDayMinus1 = $CancelDayMinus;

                            $CancelDayName1 = $CancelDayName;

                            $ClassDate = $value;

                            $ClassEndTime = $EndTime;





                            if ($ReminderStatus == '1') {

                                $ReminderStatus = '2';

                            }





                            if ($CancelLaw1 == '1') {

                                $CancelDate = $ClassDate;

                                $CancelDay1 = '';

                                $CancelTime = $CancelTillTime;

                            } else if ($CancelLaw1 == '2') {

                                $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                                $CancelDay1 = '';

                                $CancelTime = $CancelTillTime;

                            } else if ($CancelLaw1 == '3') {

                                $CancelDayNum = '-' . $CancelDayMinus1 . ' day';

                                $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));

                                $CancelDay1 = $CancelDayName1;

                                $CancelTime = $CancelTillTime;

                            } else if ($CancelLaw1 == '4') {

                                $CancelDate = '';

                                $CancelDay1 = '';

                                $CancelTime = '';

                            } else if ($CancelLaw1 == '5') {

                                $CancelDate = '';

                                $CancelDay1 = '';

                                $CancelTime = '';

                            }



                            $CancelJson = '';

                            $CancelJson .= '{"data": [';

                            $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay1 . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw1 . '"}';

                            $CancelJson .= ']}';



                            if ($TypeReminder == '1') {

                                $ReminderDate = $ClassDate;

                            } else {

                                $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                            }



                            /// בדיקת הגדרות אפליקציה



                            $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן

                            $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות

                            $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא

                            $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי

                            $SendSMSWeb = $AppSettings->SendSMS;





                            if ($Watinglist == '2') {

                                $TimeAutoWatinglist = null;

                                $StatusTimeAutoWatinglist = '1';

                            } else {

                                $TimeAutoWatinglist = null;

                                $StatusTimeAutoWatinglist = '0';

                            }





                            if ($DifrentTime == '1') {



                                $ItemsMin = '-' . $DifrentTimeMin . ' minutes';

                                $time = strtotime($ClassStartTime);

                                $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));

                                $ChangeClassStatus = '0';

                            } else {

                                $ChangeClassTime = '';

                                $ChangeClassStatus = '1';

                            }



                            $TrueClasessFinal = '';

                            $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();

                            $TrueClientId = $ActivityInfo->TrueClientId;

                            $FixClientId = $ActivityInfo->ClientId;

                            $ItemId = $ActivityInfo->ItemId;

                            $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ItemId, $ClassNameType);
                            if ($CheckItemsRole) {
                                $TrueClasessFinal = $CheckItemsRole->GroupId;
                            } else {

                                $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', $ItemId)->first();

                                $TrueClasessFinal = @$CheckItemsRoleTwo->GroupId;

                            }



                            $Department = $ActivityInfo->Department;

                            $MemberShip = $ActivityInfo->MemberShip;

                            $ItemText = $ActivityInfo->ItemText;

                            $LimitClass = $ActivityInfo->LimitClass;



                            /// נתוני מנוי פנימי

                            $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();



                            $StartTimes = $MemberInfo->StartTime;

                            $EndTimes = $MemberInfo->EndTime;

                            $MemberShip = $MemberInfo->MemberShip;

                            $CancelLImit = $MemberInfo->CancelLImit;

                            $ClassSameDay = $MemberInfo->ClassSameDay;

                            $BalanceClass = $MemberInfo->BalanceClass;



                            $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;



                            $Status = '1';    /// שובץ פעיל/מומש

                            $StatusCount = '0';



                            if ($Department == '3') {



                                $Status = '11';    /// שיעור נסיון

                                $StatusCount = '0';

                                $TestClass = '2';



                            }



                            $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();

                            $StatusTitle = $CheckNewStatus->Title;

                            $UserName = Auth::user()->display_name;



                            $StatusJson = '';

                            $StatusJson .= '{"data": [';

                            $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';

                            $StatusJson .= ']}';


                            // תיקון חישוב שבוע בשנה
                            $WeekNumber = date("Wo", strtotime("+1 day",strtotime($StartDate)));



                            //// שמירת נתונים בטבלה
                            if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                                $AddClassClient = DB::table('classstudio_act')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'ClassId' => $AddClassDesk, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassTime' => $ChangeClassTime, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $CheckTemplate->GuideId, 'FloorId' => $CheckTemplate->Floor, 'GroupNumber' => $GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'FixClientId' => $ClientId));
                            } else {
                                $AddClassClient = DB::table('classstudio_act')->insertGetId(
                                    array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'TrueClientId' => $ClientId, 'ClassId' => $AddClassDesk, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassTime' => $ChangeClassTime, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $CheckTemplate->GuideId, 'FloorId' => $CheckTemplate->Floor, 'GroupNumber' => $GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'FixClientId' => $ClientId));
                            }
                            GoogleCalendarService::checkChangedAndSync($AddClassClient, [], true);

                            if ($Department == '2' && $AddClassClient != '0') {



                                ////  ניקוב כרטיסיה



                                $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                                DB::table('client_activities')

                                    ->where('id', $ActivityId)

                                    ->where('CompanyNum', $CompanyNum)

                                    ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                            } else if ($Department == '3' && $AddClassClient != '0') {



                                $Status = '11';    /// שיעור נסיון

                                $StatusCount = '0';

                                $TestClass = '2';



                                ////  ניקוב כרטיסיה



                                $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                                DB::table('client_activities')

                                    ->where('id', $ActivityId)

                                    ->where('CompanyNum', $CompanyNum)

                                    ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                            }





                            //// עדכון שיעור ברשימת משתתפים



                            DB::table('classstudio_date')

                                ->where('CompanyNum', '=', $CompanyNum)

                                ->where('id', '=', $AddClassDesk)

                                ->update(array('ClientRegister' => '1'));





                        }





                        ++$i;



                    }





                } /// הגדרת שיעור חד פעמי

                else if ($ClassType == '3') {



                    $ClassCount = '1';





                    $start_date = $StartDate . ' ' . $StartTime;

                    $end_date = $StartDate . ' ' . $EndTime;



                    //// יום שיעור לפי תאריך שנבחר



                    $FindDay = date('l', strtotime($StartDate));



                    if ($FindDay == 'Sunday') {

                        $DayNums = '0';

                        $Day = 'ראשון';

                    } else if ($FindDay == 'Monday') {

                        $DayNums = '1';

                        $Day = 'שני';

                    } else if ($FindDay == 'Tuesday') {

                        $DayNums = '2';

                        $Day = 'שלישי';

                    } else if ($FindDay == 'Wednesday') {

                        $DayNums = '3';

                        $Day = 'רביעי';

                    } else if ($FindDay == 'Thursday') {

                        $DayNums = '4';

                        $Day = 'חמישי';

                    } else if ($FindDay == 'Friday') {

                        $DayNums = '5';

                        $Day = 'שישי';

                    } else if ($FindDay == 'Saturday') {

                        $DayNums = '6';

                        $Day = 'שבת';

                    }





                    //// בדיקת שיעור קיים באותו יום,שעה,אולם



                    $CheckFloor = DB::table('classstudio_date')->where('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('Private', '=', '0')->Orwhere('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('Status', '!=', '2')->where('Private', '=', '0')->first();



                    if (@$CheckFloor->id != '') {

                        $ErrorText = 'נמצא שיעור בתאריך ' . with(new DateTime($CheckFloor->StartDate))->format('d/m/Y') . ' ובשעות שנבחרו.<br> שים לב! קיים שיעור קבוצתי במיקום השיעור';

                        json_message('לא ניתן לשבץ שיעור במתחם זה בתאריך ובשעה שנבחרה. ' . $ErrorText, false);

                        exit;

                    }



                    //// בדיקת שיעור קיים פרטי באותו יום,שעה,אולם

                    $CheckFloorSum = DB::table('classstudio_date')->where('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '>=', $StartTime)->where('EndTime', '<=', $EndTime)->where('Status', '!=', '2')->where('Private', '=', '1')->Orwhere('Floor', '=', $CheckTemplate->Floor)->where('CompanyNum', '=', $CompanyNum)->where('StartDate', '=', $StartDate)->where('StartTime', '<', $EndTime)->where('EndTime', '>', $StartTime)->where('Status', '!=', '2')->where('Private', '=', '1')->sum('MaxClient');



                    if ($CheckFloorSum == '') {

                        $CheckFloorSum = '0';

                    }



                    if (@$CheckFloorSum >= $MaxClientPrivate && $MaxClientPrivate != '') {

                        $ErrorText = lang('date_class_found_ajax').' '.with(new DateTime($StartDate))->format('d/m/Y').' '. lang('hours_selected_ajax'). '<br>' .lang('private_lesson_ajax');

                        json_message(lang('error_booking_ajax').' '.$ErrorText, false);

                        exit;

                    }

                    if(isset($_POST['liveClass'])){
                        if($_POST['liveClass']=='online' || $_POST['liveClass'] =='studio') $is_zoom_class = 0;
                        if($_POST['liveClass']=='zoom') $is_zoom_class = 1;
                    }else{
                        $is_zoom_class = 0;
                    }

                    $AddClassDesk = DB::table('classstudio_date')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'Brands' => $BrandId, 'start_date' => $start_date, 'end_date' => $end_date,
                            'text' => $CheckTemplate->text, 'color' => $CheckTemplate->color, 'Floor' => $CheckTemplate->Floor,
                            'ClassNameType' => $CheckTemplate->ClassNameType, 'ShowApp' => $CheckTemplate->ShowApp,
                            'ClassName' => $CheckTemplate->ClassName, 'GuideId' => $CheckTemplate->GuideId,
                            'GuideName' => $CheckTemplate->GuideName, 'ExtraGuideId' => $CheckTemplate->ExtraGuideId,
                            'ExtraGuideName' => $CheckTemplate->ExtraGuideName, 'MaxClient' => $CheckTemplate->MaxClient,
                            'MinClass' => $CheckTemplate->MinClass, 'MinClassNum' => $CheckTemplate->MinClassNum,
                            'ClassTimeCheck' => $CheckTemplate->ClassTimeCheck, 'StartDate' => $StartDate, 'DayNum' => $DayNums,
                            'Day' => $Day, 'StartTime' => $StartTime, 'EndDate' => $StartDate, 'EndTime' => $EndTime,
                            'ClassType' => $ClassType, 'ClassCount' => $ClassCount, 'ClassDevice' => $CheckTemplate->ClassDevice,
                            'ClassMemberType' => 'BA999', 'ClassWating' => $CheckTemplate->ClassWating,
                            'ShowClientNum' => $CheckTemplate->ShowClientNum, 'ShowClientName' => $CheckTemplate->ShowClientName,
                            'SendReminder' => $SendReminder, 'TypeReminder' => $TypeReminder, 'TimeReminder' => $TimeReminder,
                            'CancelLaw' => $CancelLaw, 'CancelDay' => $CancelDay, 'CancelDayMinus' => $CancelDayMinus,
                            'CancelDayName' => $CancelDayName, 'CancelTillTime' => $CancelTillTime, 'UserId' => $UserId,
                            'GroupNumber' => $GroupNumber, 'Dates' => $Dates, 'MaxWatingList' => $CheckTemplate->MaxWatingList,
                            'NumMaxWatingList' => $CheckTemplate->NumMaxWatingList, 'ClassTimeTypeCheck' => $CheckTemplate->ClassTimeTypeCheck,
                            'ClassLimitTypes' => $CheckTemplate->ClassLimitTypes, 'LimitLevel' => $CheckTemplate->LimitLevel,
                            'GenderLimit' => $CheckTemplate->GenderLimit, 'FreeClass' => $CheckTemplate->FreeClass,
                            'StopCancel' => $CheckTemplate->StopCancel, 'StopCancelTime' => $CheckTemplate->StopCancelTime,
                            'StopCancelType' => $CheckTemplate->StopCancelType, 'WatingListOrederShow' => $CheckTemplate->WatingListOrederShow,
                            'Private' => '1', 'PrivateId' => $Template,'is_zoom_class'=>$is_zoom_class, 'image' => $image));

                    if($AddClassDesk > 0) {
                        if($is_zoom_class == 1) {
                            insertIntoClass_zoom($AddClassDesk);
                        }

                        $tagsStudio = new TagsStudio([
                            'studio_date_id' => $AddClassDesk,
                            'tags_id' => Tags::PERSONAL_TRAINING,
                            'company_num' => $CompanyNum,
                            'isCron' => 0
                        ]);
                        $tagsStudio->save();
                    }

                    if ($CheckTemplate->ClassLimitTypes == '1') {


                        $CheckTemplateRoles = DB::table('classstudio_date_roles_template')->where('ClassId', '=', $Template)->where('CompanyNum', '=', $CompanyNum)->get();

                        foreach ($CheckTemplateRoles as $CheckTemplateRole) {

                            $AddClassLimit = DB::table('classstudio_date_roles')->insertGetId(

                                array('CompanyNum' => $CompanyNum, 'ClassId' => $AddClassDesk, 'MemberShipType' => $CheckTemplateRole->MemberShipType, 'Value' => $CheckTemplateRole->Value));

                        }

                    }





                    ////// שבץ מתאמן לשיעור



                    $TempMemberLists = DB::table('tempclient_private')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $FixGroupNumber)->get();

                    foreach ($TempMemberLists as $TempMemberList) {



                        $ClientId = $TempMemberList->ClientId;

                        $ActivityId = $TempMemberList->ActivityId;



                        if ($ActivityId == 'X999') {

                            $ActivityId = $TempMemberList->TrueActivityId;

                        }



                        $TestClass = '1';

                        $ClassStartDate = $StartDate;

                        $ClassStartTime = $StartTime;

                        $ClassDay = $Day;

                        $ClassName = $CheckTemplate->ClassName;

                        $DayNum = $DayNums;

                        $ClassFloor = $CheckTemplate->Floor;

                        $ClassNameType = $CheckTemplate->ClassNameType;





                        $ReminderStatus = $SendReminder;

                        $ClassDate = $StartDate;

                        $ClassEndTime = $EndTime;





                        if ($ReminderStatus == '1') {

                            $ReminderStatus = '2';

                        }





                        if ($CancelLaw == '1') {

                            $CancelDate = $ClassDate;

                            $CancelDay = '';

                            $CancelTime = $CancelTillTime;

                        } else if ($CancelLaw == '2') {

                            $CancelDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                            $CancelDay = '';

                            $CancelTime = $CancelTillTime;

                        } else if ($CancelLaw == '3') {

                            $CancelDayNum = '-' . $CancelDayMinus . ' day';

                            $CancelDate = date("Y-m-d", strtotime($CancelDayNum, strtotime($ClassDate)));

                            $CancelDay = $CancelDayName;

                            $CancelTime = $CancelTillTime;

                        } else if ($CancelLaw == '4') {

                            $CancelDate = '';

                            $CancelDay = '';

                            $CancelTime = '';

                        } else if ($CancelLaw == '5') {

                            $CancelDate = '';

                            $CancelDay = '';

                            $CancelTime = '';

                        }



                        $CancelJson = '';

                        $CancelJson .= '{"data": [';

                        $CancelJson .= '{"CancelDate": "' . $CancelDate . '", "CancelDay": "' . $CancelDay . '", "CancelTime": "' . $CancelTime . '", "CancelLaw": "' . $CancelLaw . '"}';

                        $CancelJson .= ']}';



                        if ($TypeReminder == '1') {

                            $ReminderDate = $ClassDate;

                        } else {

                            $ReminderDate = date("Y-m-d", strtotime('-1 day', strtotime($ClassDate)));

                        }



                        /// בדיקת הגדרות אפליקציה



                        $DifrentTime = $AppSettings->DifrentTime; /// לאפשר החלפת שיעור באותו היום? 1 כן

                        $DifrentTimeMin = $AppSettings->DifrentTimeMin; /// זמן בדקות

                        $Watinglist = $AppSettings->Watinglist; /// בדיקת שיבוץ אוטומטי 2 לא

                        $WatinglistMin = $AppSettings->WatinglistMin; // זמן תגובה ללא שיבוץ אוטומטי

                        $SendSMSWeb = $AppSettings->SendSMS;





                        if ($Watinglist == '2') {

                            $TimeAutoWatinglist = null;

                            $StatusTimeAutoWatinglist = '1';

                        } else {

                            $TimeAutoWatinglist = null;

                            $StatusTimeAutoWatinglist = '0';

                        }





                        if ($DifrentTime == '1') {



                            $ItemsMin = '-' . $DifrentTimeMin . ' minutes';

                            $time = strtotime($ClassStartTime);

                            $ChangeClassTime = date("H:i", strtotime($ItemsMin, $time));

                            $ChangeClassStatus = '0';

                        } else {

                            $ChangeClassTime = '';

                            $ChangeClassStatus = '1';

                        }



                        $TrueClasessFinal = '';

                        $ActivityInfo = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityId)->first();

                        $TrueClientId = $ActivityInfo->TrueClientId;

                        $FixClientId = $ActivityInfo->ClientId;

                        $ItemId = $ActivityInfo->ItemId;


                        $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $ItemId, $ClassNameType);
                        if ($CheckItemsRole) {
                            $TrueClasessFinal = $CheckItemsRole->GroupId;
                        } else {

                            $CheckItemsRoleTwo = DB::table('items_roles')->where('CompanyNum', '=', $CompanyNum)->where('ItemId', '=', $ItemId)->first();

                            $TrueClasessFinal = @$CheckItemsRoleTwo->GroupId;

                        }





                        $Department = $ActivityInfo->Department;

                        $MemberShip = $ActivityInfo->MemberShip;

                        $ItemText = $ActivityInfo->ItemText;

                        $LimitClass = $ActivityInfo->LimitClass;



                        /// נתוני מנוי פנימי

                        $MemberInfo = DB::table('items')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $ActivityInfo->ItemId)->first();


                        $MemberShip = $MemberInfo->MemberShip;

                        $CancelLImit = $MemberInfo->CancelLImit;

                        $ClassSameDay = $MemberInfo->ClassSameDay;

                        $BalanceClass = $MemberInfo->BalanceClass;

                        $TrueBalanceClass = $ActivityInfo->TrueBalanceValue;



                        $Status = '1';    /// שובץ פעיל/מומש

                        $StatusCount = '0';



                        if ($Department == '3') {



                            $Status = '11';    /// שיעור נסיון

                            $StatusCount = '0';

                            $TestClass = '2';



                        }



                        $CheckNewStatus = DB::table('class_status')->where('id', '=', $Status)->first();

                        $StatusTitle = $CheckNewStatus->Title;

                        $UserName = $UserName = Auth::user()->display_name;



                        $StatusJson = '';

                        $StatusJson .= '{"data": [';

                        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $Status . '", "StatusTitle": "' . $StatusTitle . '", "UserName": "' . $UserName . '"}';

                        $StatusJson .= ']}';

                        // תיקון חישוב שבוע בשנה
                        $WeekNumber = date("Wo", strtotime("+1 day",strtotime($StartDate)));





                        //// שמירת נתונים בטבלה
                        if ($TrueClientId == '0' || $ClientId == $FixClientId) {
                            $AddClassClient = DB::table('classstudio_act')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $ClientId, 'TrueClientId' => '0', 'ClassId' => $AddClassDesk, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassTime' => $ChangeClassTime, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $CheckTemplate->GuideId, 'FloorId' => $CheckTemplate->Floor, 'GroupNumber' => $GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'FixClientId' => $ClientId));
                        } else {
                            $AddClassClient = DB::table('classstudio_act')->insertGetId(
                                array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'TrueClientId' => $ClientId, 'ClassId' => $AddClassDesk, 'ClassNameType' => $ClassNameType, 'ClassName' => $ClassName, 'ClassDate' => $ClassDate, 'ClassStartTime' => $ClassStartTime, 'ClassEndTime' => $ClassEndTime, 'ClientActivitiesId' => $ActivityId, 'Department' => $Department, 'MemberShip' => $MemberShip, 'ItemText' => $ItemText, 'WeekNumber' => $WeekNumber, 'DeviceId' => $DeviceId, 'StatusCount' => $StatusCount, 'Status' => $Status, 'Dates' => $Dates, 'UserId' => $UserId, 'CancelJson' => $CancelJson, 'StatusJson' => $StatusJson, 'ReminderStatus' => $ReminderStatus, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'ReminderDate' => $ReminderDate, 'ReminderTime' => $TimeReminder, 'WatinglistMin' => $WatinglistMin, 'TimeAutoWatinglist' => $TimeAutoWatinglist, 'StatusTimeAutoWatinglist' => $StatusTimeAutoWatinglist, 'SendSMSWeb' => $SendSMSWeb, 'ChangeClassTime' => $ChangeClassTime, 'ChangeClassStatus' => $ChangeClassStatus, 'GuideId' => $CheckTemplate->GuideId, 'FloorId' => $CheckTemplate->Floor, 'GroupNumber' => $GroupNumber, 'TestClass' => $TestClass, 'DayNum' => $DayNum, 'Day' => $ClassDay, 'TrueClasess' => $TrueClasessFinal, 'FixClientId' => $ClientId));
                        }
                        GoogleCalendarService::checkChangedAndSync($AddClassClient, [], true);

                        if ($Department == '2' && $AddClassClient != '0') {



                            ////  ניקוב כרטיסיה



                            $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                            DB::table('client_activities')

                                ->where('id', $ActivityId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                        } else if ($Department == '3' && $AddClassClient != '0') {



                            $Status = '11';    /// שיעור נסיון

                            $StatusCount = '0';

                            $TestClass = '2';



                            ////  ניקוב כרטיסיה



                            $TrueBalanceValue = $ActivityInfo->TrueBalanceValue - 1;





                            DB::table('client_activities')

                                ->where('id', $ActivityId)

                                ->where('CompanyNum', $CompanyNum)

                                ->update(array('TrueBalanceValue' => $TrueBalanceValue));





                        }





                        //// עדכון שיעור ברשימת משתתפים



                        $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $AddClassDesk)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();

                        $WatingList = DB::table('classstudio_act')->where('ClassId', '=', $AddClassDesk)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '1')->count();





                        DB::table('classstudio_date')

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->where('id', '=', $AddClassDesk)

                            ->update(array('ClientRegister' => $ClientRegister, 'WatingList' => $WatingList));





                    }





                }





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'ChangeActivityClass':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('ClassId' => $_POST['ClassId']),

                array('ClassId' => 'Required')

            );



            if ($validator->passes()) {



                $OldActivityId = $_POST['OldActivityId'];

                $ClassId = $_POST['ClassId'];

                $FixClientId = $_POST['FixClientId'];

                $ClassYear = $_POST['ClassYear'];

                $ClassMonth = $_POST['ClassMonth'];

                $NewActivityId = $_POST['NewActivityId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;

                $UserName = Auth::user()->display_name;





                if ($NewActivityId == '') {

                    json_message(lang('select_subscription_list_ajax'), false);

                    exit;

                }



                //// מעבר שיעור/ניקוב ממנוי למנוי



                $OldActivity = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $OldActivityId)->first();

                $NewActivity = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $NewActivityId)->first();



                $GetClassAct = DB::table('classstudio_act')->where('id', '=', $ClassId)->where('CompanyNum', '=', $CompanyNum)->first();

                $ClassInfo = DB::table('classstudio_date')->where('id', '=', $GetClassAct->ClassId)->where('CompanyNum', '=', $CompanyNum)->first();

                $TrueClasessFinal = '';



                $CheckItemsRole = ItemRoles::getFirstGroupClassByItemIdAndClassType($CompanyNum, $NewActivity->ItemId, @$ClassInfo->ClassNameType);
                if ($CheckItemsRole) {
                    $GroupId = $CheckItemsRole->GroupId;

                    $TrueClasessFinal = $CheckItemsRole->GroupId;

                    $TrueClasess = $CheckItemsRole->Class;
                }
                if ($TrueClasessFinal == '') {

                    json_message(lang('error_transfer_subscription_ajax'), false);

                    exit;

                }





                if ($OldActivity->Department == '2' || $OldActivity->Department == '3') {



                    $TrueBalanceValue = $OldActivity->TrueBalanceValue;

                    $OrigenalBalanceValue = $OldActivity->BalanceValue;

                    $ActBalanceValue = $OldActivity->ActBalanceValue;



                    $NewStatus = '3';

                    /// בדיקת סטטוס הלקוח

                    $CheckOldStatus = DB::table('class_status')->where('id', '=', $GetClassAct->Status)->first();

                    $CheckNewStatus = DB::table('class_status')->where('id', '=', $NewStatus)->first();



                    $StatusCount = $CheckNewStatus->StatusCount;





                    if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue + 1;

                    } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue + 1;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue - 1;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue - 1;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    }





                    DB::table('client_activities')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $OldActivityId)

                        ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                    if ($GetClassAct->ActStatus == '1') {



                        DB::table('client_activities')

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->where('id', '=', $OldActivityId)

                            ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                    }





                    DB::table('classlogtest')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'ActivityId' => $OldActivityId, 'OldBalance' => $TrueBalanceValue, 'FinalBalance' => $FinalTrueBalanceValue, 'UserId' => $UserId));





                }





                $TrueBalanceValue = $NewActivity->TrueBalanceValue;

                $OrigenalBalanceValue = $NewActivity->BalanceValue;

                $ActBalanceValue = $NewActivity->ActBalanceValue;



                $NewStatus = $GetClassAct->Status;

                /// בדיקת סטטוס הלקוח

                $CheckOldStatus = DB::table('class_status')->where('id', '=', '3')->first();

                $CheckNewStatus = DB::table('class_status')->where('id', '=', $NewStatus)->first();



                $StatusCount = $CheckNewStatus->StatusCount;



                if ($NewActivity->Department == '2' || $NewActivity->Department == '3') {



                    if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue + 1;

                    } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue + 1;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue - 1;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                        $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                        $FinalActBalanceValue = $ActBalanceValue - 1;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                        $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                        $FinalActBalanceValue = $ActBalanceValue;

                    }





                    DB::table('client_activities')

                        ->where('CompanyNum', '=', $CompanyNum)

                        ->where('id', '=', $NewActivityId)

                        ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



                    if ($GetClassAct->ActStatus == '1') {



                        DB::table('client_activities')

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->where('id', '=', $NewActivityId)

                            ->update(array('ActBalanceValue' => $FinalActBalanceValue));





                    }



                    DB::table('classlogtest')->insertGetId(

                        array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'ActivityId' => $NewActivityId, 'OldBalance' => $TrueBalanceValue, 'FinalBalance' => $FinalTrueBalanceValue, 'UserId' => $UserId));





                }



                // תיעוד שינוי סטטוס



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;



                $StatusJson = '';

                $StatusJson .= '{"data": [';



                if ($GetClassAct->StatusJson != '') {

                    $Loops = json_decode($GetClassAct->StatusJson, true);

                    foreach ($Loops['data'] as $key => $val) {



                        $DatesDB = $val['Dates'];

                        $UserIdDB = $val['UserId'];

                        $StatusDB = $val['Status'];

                        $StatusTitleDB = $val['StatusTitle'];

                        $UserNameDB = $val['UserName'];



                        $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';



                    }

                }



                $NewStatusTitle = @$CheckNewStatus->Title.' '.lang('class_transfered_to_ajax').' '.@$OldActivity->CardNumber.' '.lang('to_subscription_ajax').' '.@$NewActivity->CardNumber;

                $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $NewStatus . '", "StatusTitle": "' . $NewStatusTitle . '", "UserName": "' . $UserName . '"}';



                $StatusJson .= ']}';



                DB::table('classstudio_act')

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->where('id', '=', $ClassId)

                    ->update(array('StatusJson' => $StatusJson, 'MemberShip' => $NewActivity->MemberShip, 'ClientActivitiesId' => $NewActivityId, 'TrueClasess' => $TrueClasessFinal));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        case 'AddAutomation':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Type' => $_POST['Type']),

                array('Type' => 'Required')

            );



            if ($validator->passes()) {



                $Category = $_POST['Category'];

                $Type = $_POST['Type'];

                $Value = $_POST['Value'];

                $Status = $_POST['Status'];

                $VaildType = $_POST['VaildType'];





                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('automation')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'Category' => $Category, 'Type' => $Type, 'Value' => $Value, 'Status' => $Status, 'VaildType' => $VaildType));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        case 'EditAutomation':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('Value' => $_POST['Value']),

                array('Value' => 'Required')

            );



            if ($validator->passes()) {



                $Value = $_POST['Value'];

                $Status = $_POST['Status'];

                $VaildType = $_POST['VaildType'];



                $AutomationId = $_POST['ItemId'];



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                DB::table('automation')

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->where('id', '=', $AutomationId)

                    ->update(array('Value' => $Value, 'Status' => $Status, 'VaildType' => $VaildType));





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        case 'ActSendDocumentModal':



            if (Auth::guest()) exit;



            $validator = Validator::make(



                array('DocId' => $_POST['DocId']),

                array('DocId' => 'Required')

            );



            if ($validator->passes()) {



                $DocId = $_POST['DocId'];

                $DocType = $_POST['DocType'];

                $EmailAddress = @$_POST['EmailAddress'];

                $PhoneNumber = @$_POST['PhoneNumber'];



                $Via = $_POST['Via'];



                if ($Via == 'Email' && $EmailAddress == '') {

                    json_message(lang('type_email_ajax'), false);

                    exit;

                } else if ($Via == 'Sms' && $PhoneNumber == '') {

                    json_message(lang('type_mobile_number_ajax'), false);

                    exit;

                }



                if ($Via == 'Email') {

                    $SendType = '2';

                } else {

                    $SendType = '1';

                }



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $DocsInfo = DB::table('docs')->where('CompanyNum', '=', $CompanyNum)->where('TypeNumber', '=', $DocId)->where('TypeDoc', '=', $DocType)->first();





                $Date = date('Y-m-d');

                $Time = date('H:i:s');

                $Dates = date('Y-m-d H:i:s');



                $Template = (new Notificationcontent())->getByTypeAndCompany($CompanyNum, 23);

                $ClientInfo = DB::table('client')->where('id', '=', $DocsInfo->ClientId)->where('CompanyNum', '=', $CompanyNum)->first();

                $CompanyInfo = Company::getInstance();
                /// עדכון תבנית הודעה


                $FullLinks = 'https://new.boostapp.co.il/office/PDF/DocsClient.php?RandomUrl=' . $DocsInfo->RandomUrl . '&ClientId=' . $DocsInfo->ClientId;

                $TrueFullLinks = get_tiny_url($FullLinks);



                $DocUrlTrue = '<a href="' . $TrueFullLinks . '">'.lang('view_doc_ajax').'</a>';





                $TypeDoc = $DocsInfo->TypeDoc;  //88

                $DocsTypeInfo = DB::table('docstable')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $TypeDoc)->first();

                $TypeDocName = $DocsTypeInfo->TypeTitleSingle;  //חשבונית עסקה



                $TypeNumber = $DocId;

                $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Template->Content);
                $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
                $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
                $Content4 = str_replace(Notificationcontent::REPLACE_ARR["doc_number"], $TypeNumber ?? '', $Content3);
                $Content5 = str_replace(Notificationcontent::REPLACE_ARR["doc_type"], $TypeDocName ?? '', $Content4);
                $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["doc_link"], $DocUrlTrue ?? '', $Content5);

//                $ContentTrue = $Content6;

                $Subject1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Template->Subject);
                $Subject = str_replace(Notificationcontent::REPLACE_ARR["doc_type"], $TypeDocName ?? '', $Subject1);

//                $SubjectTrue = $Subject2;





                if ($Via == 'Email') {

                    $TextNotification = $ContentTrue; /// משיכת הודעת ביטול שיעור מבסיס הנתונים

                } else {

                    $TextNotification = 'מצ"ב ' . @$TypeDocName . ' מספר ' . @$TypeNumber . ' לחץ לצפייה

            ' . $TrueFullLinks;

                }



//                $Subject = $SubjectTrue;



                $AddNotification = DB::table('appnotification')->insertGetId(

                    array('CompanyNum' => $CompanyNum, 'ClientId' => $DocsInfo->ClientId, 'TrueClientId' => '0', 'Subject' => $Subject, 'Text' => $TextNotification, 'Dates' => $Dates, 'UserId' => $UserId, 'Type' => $SendType, 'Date' => $Date, 'Time' => $Time, 'ClassId' => '0', 'SendType' => '1', 'EmailAddress' => $EmailAddress, 'PhoneNumber' => $PhoneNumber));

                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





        // UpdateCancelDocumentModalRefound  - Add



        case 'UpdateCancelDocumentModalRefound':
            if (Auth::guest()) exit;

            $validator = Validator::make(
                array('DocsId' => $_POST['DocsId']),
                array('DocsId' => 'Required')
            );

            if (!$validator->passes()) {
                json_message($validator->errors()->toArray(), false);
            }

            $result = DocumentService::cancelDocument((int)$_POST['DocsId']);

            $StatusPay = $result['StatusPay'];
            $StatusNew = $result['StatusNew'];

            json_message(array('Status' => $StatusPay, 'StatusNew' => $StatusNew));
            break;


        // UpdateForms - Add



        case 'UpdateForms':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('Title' => $_POST['Title']),

                array('Title' => 'Required')

            );



            if ($validator->passes()) {



                $Title = trim($_POST['Title']);

                $FormsId = trim($_POST['FormsId']);



                $BarndSelect = @$_POST['BarndSelect'];



                if ($BarndSelect == '' || $BarndSelect == '0') {

                    $JsonBarnd = 'BA999';

                } else if ($BarndSelect == 'A0') {

                    $JsonBarnd = '0';

                } else {

                    $JsonBarnd = '';

                    foreach ($_POST['BarndSelect'] as $value) {

                        $JsonBarnd .= $value . ",";

                    }

                    $JsonBarnd = substr($JsonBarnd, 0, -1);

                }





                $VaildType = $_POST['VaildType'];

                $VaileVaule = $_POST['VaileVaule'];



                $Status = trim(@$_POST['Status']);



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;

                $CompanyNum = Auth::user()->CompanyNum;



                $item = DB::table('dynamicforms')

                    ->where('id', '=', $FormsId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->first();



                $GroupNumber = $item->GroupNumber;



                DB::table('dynamicforms')

                    ->where('id', '=', $FormsId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->update(array('name' => $Title, 'Brands' => $JsonBarnd, 'VaildType' => $VaildType, 'VaileVaule' => $VaileVaule, 'Status' => $Status));





                $GetForms = DB::table('dynamicforms_answers')->where('FormId', $FormsId)->where('CompanyNum', $CompanyNum)->whereIn('ActStatus', array(0, 2))->where('AnswerStatus', '0')->get();



                foreach ($GetForms as $GetForm) {



                    //// חישוב תוקף התראה עתידית

                    if ($VaildType != '0') {



                        $Created = $GetForm->created;



                        if ($VaildType == '1') {

                            $Vaild_Type = '2';

                        } else if ($VaildType == '2') {

                            $Vaild_Type = '3';

                        } else if ($VaildType == '3') {

                            $Vaild_Type = '4';

                        }





                        $Vaild_TypeOptions = @$Vaild_TypeOption[$Vaild_Type];

                        $ItemsTime = '+' . $VaileVaule . ' ' . $Vaild_TypeOptions;



                        $time = strtotime($Created);

                        $VaildDate = date("Y-m-d", strtotime($ItemsTime, $time));



                    } else {

                        $VaildDate = NULL;

                    }



                    if ($Status == '0') {

                        $ActStatus = '0';

                    } else {

                        $ActStatus = '2';

                    }





                    if ($VaildDate >= date('Y-m-d') || $VaildDate == NULL) {

                        DB::table('dynamicforms_answers')

                            ->where('id', '=', $GetForm->id)

                            ->where('FormId', '=', $FormsId)

                            ->where('CompanyNum', '=', $CompanyNum)

                            ->update(array('VaildDate' => $VaildDate, 'ActStatus' => $ActStatus));

                    }



                }





                $TextLog = lang('log_edited_dynamic_form_ajax'). '<u>' . $Title . '</u>' .lang('dynamice_version_ajax') . $GroupNumber;

                CreateLogMovement(

                    $TextLog,

                    '0');





                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;



        // EditRegistrationFees - Add



        case 'EditRegistrationFees':



            if (Auth::guest()) exit;



            $validator = Validator::make(

                array('ItemName' => $_POST['ItemName']),

                array('ItemName' => 'Required')

            );



            if ($validator->passes()) {



                $CompanyNum = Auth::user()->CompanyNum;

                $ItemName = trim($_POST['ItemName']);

                $ItemId = trim($_POST['ItemId']);



                $ItemPrice = trim($_POST['ItemPrice']);



                $Vat = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->pluck('Vat');

                $CompanyVat = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->pluck('CompanyVat');

                if ($Vat == '0' || $CompanyVat == '1') {

                    $Vat = '1.17';

                    $ItemPriceVat = $ItemPrice;

                    $VatAmount = '0';

                } else {

                    $Vat = '1.' . $Vat;

                    $ItemPriceVat = $ItemPrice / $Vat;

                    $ItemPriceVat = round($ItemPriceVat, 2);

                    $VatAmount = round($ItemPrice - $ItemPriceVat, 2);

                }



                $VaildType = trim($_POST['VaildType']);



                if ($VaildType == '0') {

                    $Vaild = trim($_POST['Vaild']);

                    $Vaild_Type = trim($_POST['Vaild_Type']);

                    $NotificationDays = trim($_POST['NotificationDays']);

                } else {

                    $Vaild = '0';

                    $Vaild_Type = '3';

                    $NotificationDays = '3';

                }



                $Status = trim(@$_POST['Status']);



                $Dates = date('Y-m-d G:i:s');

                $UserId = Auth::user()->id;





                DB::table('registration_fees')

                    ->where('id', '=', $ItemId)

                    ->where('CompanyNum', '=', $CompanyNum)

                    ->update(array('ItemName' => $ItemName, 'ItemPrice' => $ItemPrice, 'ItemPriceVat' => $ItemPriceVat, 'VatAmount' => $VatAmount, 'Vaild' => $Vaild, 'Vaild_Type' => $Vaild_Type, 'NotificationDays' => $NotificationDays, 'Status' => $Status));



                $TextLog = 'ערך את <u>' . $ItemName . '</u>';

                CreateLogMovement(

                    $TextLog,

                    '0');



                json_message();



            } else {

                json_message($validator->errors()->toArray(), false);

            }



            break;





    }

}





function CancelClass($CalendarId, $GroupNumber, $StartDate)

{



    $ItemId = $CalendarId;

    $CompanyNum = Auth::user()->CompanyNum;

    $UserName = Auth::user()->display_name;

    $ReClass = '1';

    $FinalTrueBalanceValue = '0';

    $KnasOption = '0';

    $KnasOptionVule = '0.00';

    $Cards = '';

    $WatingListSort = '0';



    $AppSettings = DB::table('appsettings')->where('CompanyNum', '=', $CompanyNum)->first();
    $CompanyInfo = DB::table('settings')->where('CompanyNum', '=', $CompanyNum)->first();


    $MemberShipLimitMoney = $AppSettings->MemberShipLimitMoney;
    $NewStatus = '5'; /// בוטל באמצעות הסטודיו


    $registerRegular = DB::table('classstudio_dateregular')->where('CompanyNum', '=', $CompanyNum)->where('GroupNumber', '=', $GroupNumber)->where('Status', '=', 0)->get();
    foreach($registerRegular as $registered) {

        $delete = DB::table('classstudio_dateregular')
            ->where('id', $registered->id)
            ->where('CompanyNum', '=', $CompanyNum)
            ->delete();

        if($delete) {
            $client_info = DB::table('client')->select('id', 'CompanyNum', 'FirstName', 'LastName', 'CompanyName')->where('id', $registered->ClientId)->where('CompanyNum', '=', $CompanyNum)->first();
            if($client_info) {
                $text = '<p>'.$client_info->FirstName.' '.lang('hello_ajax').',</p>';
                $text .= '<p>'.lang('regular_assignment').' '. $registered->ClassName.' '.lang('a_day').' '.$registered->ClassDay.' '.lang('and_in_time_cron').' '.$registered->ClassTime.' '.lang('cancelled_by_studio').'</p>';
                $text .= '<p>'.lang('best_regards') .', '.$CompanyInfo->AppName.'</p>';
                $Subject = lang('regular_assign_cancelled');

                $notification = DB::table('appnotification')->insertGetId(array(
                    'CompanyNum' => $CompanyNum,
                    'ClientId' => $registered->ClientId,
                    'Type' => '0',
                    'Subject' => $Subject,
                    'Text' => $text,
                    'Dates' => date('Y-m-d H:i:s'),
                    'UserId' => Auth::user()->id,
                    'Date' => date('Y-m-d'),
                    'Time' => date('H:i:s')
                ));

                $log = lang('regular_assignment').' '. $registered->ClassName.' '.lang('a_day').' '.$registered->ClassDay.' '.lang('in_hour').' '.date('H:i',strtotime($registered->ClassTime)).' '.lang('of_the_client').' '.$client_info->CompanyName.' '.lang('removed');
                CreateLogMovement($log, $registered->ClientId);
            }
        }

    }

    if ($ItemId != '0') {
        $Clients = DB::table('classstudio_act')->where('ClassId', '=', $ItemId)->where('CompanyNum', $CompanyNum)->whereIn('StatusCount', array(0, 1))->get();
    } else {
        $Clients = DB::table('classstudio_act')->where('GroupNumber', '=', $GroupNumber)->where('ClassDate', '>=', $StartDate)->where('CompanyNum', $CompanyNum)->whereIn('StatusCount', array(0, 1))->get();
    }

    foreach ($Clients as $Client) {

        $ClientBalanceValue = DB::table('client_activities')->where('CompanyNum', '=', $CompanyNum)->where('id', '=', $Client->ClientActivitiesId)->first();

        $TrueBalanceValue = $ClientBalanceValue->TrueBalanceValue;

        $OrigenalBalanceValue = $ClientBalanceValue->BalanceValue;

        $ActBalanceValue = $ClientBalanceValue->ActBalanceValue;

        /// בדיקת סטטוס הלקוח

        $CheckOldStatus = DB::table('class_status')->where('id', '=', $Client->Status)->first();

        $CheckNewStatus = DB::table('class_status')->where('id', '=', $NewStatus)->first();

        $StatusCount = $CheckNewStatus->StatusCount;

        /// מנוי תקופתי

        if ($Client->Department == '1') {

            if ($NewStatus == '4' || $NewStatus == '8') {

                $KnasOption = '1';

                $KnasOptionVule = $MemberShipLimitMoney;

            }

        } /// כרטיסיה

        elseif ($ClientBalanceValue->Department == '2' || $ClientBalanceValue->Department == '3') {

            if ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '0') {

                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                $FinalActBalanceValue = $ActBalanceValue;

            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '1') {

                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                $FinalActBalanceValue = $ActBalanceValue + 1;

            } elseif ($CheckOldStatus->Act == '0' && $CheckNewStatus->Act == '2') {

                $FinalTrueBalanceValue = $TrueBalanceValue + 1; // מחזיר ניקוב

                $FinalActBalanceValue = $ActBalanceValue + 1;

            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '0') {

                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                $FinalActBalanceValue = $ActBalanceValue - 1;

            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '1') {

                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                $FinalActBalanceValue = $ActBalanceValue;

            } elseif ($CheckOldStatus->Act == '1' && $CheckNewStatus->Act == '2') {

                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                $FinalActBalanceValue = $ActBalanceValue;

            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '0') {

                $FinalTrueBalanceValue = $TrueBalanceValue - 1; // מחסיר ניקוב

                $FinalActBalanceValue = $ActBalanceValue - 1;

            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '1') {

                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                $FinalActBalanceValue = $ActBalanceValue;

            } elseif ($CheckOldStatus->Act == '2' && $CheckNewStatus->Act == '2') {

                $FinalTrueBalanceValue = $TrueBalanceValue; // ללא שינוי

                $FinalActBalanceValue = $ActBalanceValue;

            }





            DB::table('client_activities')

                ->where('CompanyNum', '=', $CompanyNum)

                ->where('id', '=', $ClientBalanceValue->id)

                ->update(array('TrueBalanceValue' => $FinalTrueBalanceValue));



            $Cards = $FinalTrueBalanceValue . ' / ' . $OrigenalBalanceValue;



            if ($Client->ActStatus == '1') {
                DB::table('client_activities')
                    ->where('CompanyNum', '=', $CompanyNum)
                    ->where('id', '=', $ClientBalanceValue->id)
                    ->update(array('ActBalanceValue' => $FinalActBalanceValue));
            }
        }

        // תיעוד שינוי סטטוס
        $Dates = date('Y-m-d H:i:s');
        $UserId = Auth::user()->id;

        $StatusJson = '';
        $StatusJson .= '{"data": [';
        if ($Client->StatusJson != '') {
            $Loops = json_decode($Client->StatusJson, true);
            foreach ($Loops['data'] as $key => $val) {
                $DatesDB = $val['Dates'];
                $UserIdDB = $val['UserId'];
                $StatusDB = $val['Status'];
                $StatusTitleDB = $val['StatusTitle'];
                $UserNameDB = $val['UserName'];
                $StatusJson .= '{"Dates": "' . $DatesDB . '", "UserId": "' . $UserIdDB . '", "Status": "' . $StatusDB . '", "StatusTitle": "' . $StatusTitleDB . '", "UserName": "' . $UserNameDB . '"},';
            }
        }
        $StatusJson .= '{"Dates": "' . $Dates . '", "UserId": "' . $UserId . '", "Status": "' . $NewStatus . '", "StatusTitle": "' . $CheckNewStatus->Title . '", "UserName": "' . $UserName . '"}';
        $StatusJson .= ']}';

        //// השלמת שיעור
        if ($NewStatus == '10') {
            $ReClass = '2';
        }

        if($Client->RegularClassId != 0 && $Client->RegularClass == 1 && in_array($Client->Status, [3,9,12])) {
            (new ClassStudioAct())->deleteActById($Client->id, $CompanyNum);
        } else {
            /// עדכון לסטטוס חדש
            (new ClassStudioAct($Client->id))->update([
                'Status' => $NewStatus,
                'StatusJson' => $StatusJson,
                'StatusCount' => $StatusCount,
                'ReClass' => $ReClass,
                'KnasOption' => $KnasOption,
                'KnasOptionVule' => $KnasOptionVule,
                'WatingListSort' => $WatingListSort,
            ]);

            $FixClientId = $Client->FixClientId;

            $ClientRegister = DB::table('classstudio_act')->where('ClassId', '=', $Client->ClassId)->where('CompanyNum', '=', $CompanyNum)->where('StatusCount', '=', '0')->count();
            ///// Class Log
            DB::table('classlog')->insertGetId(
                array('CompanyNum' => $CompanyNum, 'ClassId' => $Client->ClassId, 'ClientId' => $FixClientId, 'Status' => $CheckNewStatus->Title, 'UserName' => $UserId, 'numOfClients' => $ClientRegister));



            /// הגדרת התראה



            $Date = date('Y-m-d');

            $Time = date('H:i:s');

            $Dates = date('Y-m-d H:i:s');

            $Template = DB::table('notificationcontent')->where('CompanyNum', '=', $CompanyNum)->where('Type', '=', '18')->first();

            $FixClientId = $Client->FixClientId;

            $ClientInfo = DB::table('client')->where('id', '=', $FixClientId)->where('CompanyNum', '=', $CompanyNum)->first();

            /// עדכון תבנית הודעה

            $ClassDate_Not = with(new DateTime($Client->ClassDate))->format('d/m/Y');

            $ClassTime_Not = with(new DateTime($Client->ClassStartTime))->format('H:i');

            $ClassName_Not = $Client->ClassName;

            $Content1 = str_replace(Notificationcontent::REPLACE_ARR["studio_name"], $CompanyInfo->AppName, $Template->Content);
            $Content2 = str_replace(Notificationcontent::REPLACE_ARR["name_table"], $ClientInfo->CompanyName ?? '', $Content1);
            $Content3 = str_replace(Notificationcontent::REPLACE_ARR["first_name"], $ClientInfo->FirstName ?? '', $Content2);
            $Content4 = str_replace(Notificationcontent::REPLACE_ARR["cal_new_class_type_name"], $ClassName_Not ?? '', $Content3);
            $Content5 = str_replace(Notificationcontent::REPLACE_ARR["class_date_single"], $ClassDate_Not ?? '', $Content4);
            $ContentTrue = str_replace(Notificationcontent::REPLACE_ARR["time_of_a_class"], $ClassTime_Not ?? '', $Content5);

//            $ContentTrue = $Content6;






            $Text = $ContentTrue; /// משיכת הודעת ביטול שיעור מבסיס הנתונים

            $Subject = $Template->Subject;


            if($Template->Status != 1) {
                $AddNotification = DB::table('appnotification')->insertGetId(
                    array('CompanyNum' => $CompanyNum, 'ClientId' => $FixClientId, 'Type' => '0', 'Subject' => $Subject, 'Text' => $Text, 'Dates' => $Dates, 'UserId' => $UserId, 'Date' => $Date, 'Time' => $Time));
            }
        }






    }





}

if (isset($_GET['action'])) {

    switch ($_GET['action']) {



        // Get the number of unread messages for the logged user.

        case 'countUnreadMessages':

            if (Auth::guest()) exit;



            json_message(Message::countUnread(Auth::user()->id));

            break;





        // Get the conversations for the logged user.

        case 'getConversations':

            if (Auth::guest()) exit;



            json_message(Message::getConversations(Auth::user()->id));

            break;





        // Get the conversation messages for the logged user.

        case 'getConversation':

            if (Auth::guest()) exit;



            if (!isset($_GET['id'])) exit;



            $timestamp = isset($_GET['timestamp']) ? $_GET['timestamp'] : null;



            json_message(Message::getConversation(Auth::user()->id, $_GET['id'], $timestamp));

            break;





        // Get the user contacts

        case 'getContacts':

            if (Auth::guest()) exit;



            json_message(Contact::all(Auth::user()->id));

            break;





        // Search Contact

        case 'searchContact':

            if (Auth::guest()) exit;



            if (!isset($_GET['user']) || strlen($_GET['user']) < 2) exit;



            $user = $_GET['user'];



            $usersTable = User::getTable();

            $contactsTable = Contact::getTable();



            $query = User::select("{$usersTable}.id as id", 'username', 'display_name', 'email');



            if (!isset($_GET['admin']) || !Auth::userCan('message_users')) {

                $query->join($contactsTable, function ($join) use ($usersTable) {

                    $join->on("{$usersTable}.id", '=', 'user1')->orOn("{$usersTable}.id", '=', 'user2');

                })

                    ->where(function ($q) {

                        $q->where('user1', Auth::user()->id)->orWhere('user2', Auth::user()->id);

                    })

                    ->where("{$usersTable}.id", '!=', Auth::user()->id)->where('accepted', 1);

            }



            $query->where('status', 1)

                ->where(function ($q) use ($user) {

                    $q->where('username', 'like', "{$user}%");

                    $q->orWhere('display_name', 'like', "{$user}%");

                    $q->orWhere('email', 'like', "{$user}%");

                })

                ->limit(5);



            $contacts = array();



            foreach ($query->get() as $user) {

                $contacts[] = array(

                    'id' => $user->id,

                    'name' => $user->display_name,

                    'avatar' => $user->avatar,

                    'username' => $user->username

                );

            }



            json_message($contacts);

            break;





        // Get avatar preview

        case 'avatarPreview':

            if (Auth::guest()) exit;



            json_message(User::generateAvatar(Auth::user()->usermeta, Auth::user()->email, @$_GET['type']));

            break;





        // Get users for DataTables (admin)

        case 'getUsers':

            if (!Auth::userCan('list_users')) exit;



            $usersTable = User::getTable();

            $rolesTable = Role::getTable();



            $columns = array(

                array('db' => "{$usersTable}.id", 'dt' => 0, 'as' => 'id'),

                array('db' => 'username', 'dt' => 1),

                array('db' => 'email', 'dt' => 2),

                array('db' => 'display_name', 'dt' => 3),

                array('db' => 'joined', 'dt' => 4,

                    'formatter' => function ($data, $row) {

                        $date = new DateTime($data);

                        return '<span title="' . $date->format('Y-m-d H:i:s') . '">' . $date->format('M j, Y') . '</span>';

                    }

                ),

                array('db' => 'status', 'dt' => 5),

                array('db' => "{$rolesTable}.name", 'dt' => 6, 'as' => 'role'),

            );



            $query = User::join($rolesTable, "{$usersTable}.role_id", '=', "{$rolesTable}.id", 'left');



            $dt = new Hazzard\Support\DataTables($_GET, $columns, $query);



            echo json_encode($dt->get());

            break;





        // Get messages for DataTables (admin)

        case 'getMessages':

            if (!Auth::userCan('message_users')) exit;



            $userId = Config::get('pms.webmaster');



            $columns = array(

                array('db' => 'id', 'dt' => 0),

                array('db' => 'message', 'dt' => 1),

                array('db' => 'from_user', 'dt' => 2),

                array('db' => 'date', 'dt' => 3,

                    'formatter' => function ($data, $row) {

                        $date = new DateTime($data);

                        return '<span title="' . $date->format('Y-m-d H:i:s') . '">' . $date->format('M j, Y') . '</span>';

                    }

                ),

                array('db' => 'read', 'dt' => 4),

                array('db' => 'to_user', 'dt' => 5)

            );



            $dt = new Hazzard\Support\DataTables($_GET, $columns, Message::newQuery()->orderBy('date', 'desc'));



            $result = $dt->get();



            $messages = array();

            foreach ($result['data'] as $message) {

                $id = ($message[2] == $userId) ? $message[5] : $message[2];

                $user = User::find($id);



                if (!$user || isset($messages[$user->id])) continue;



                $messages[$user->id] = array(

                    $message[0],

                    mb_strlen($message[1]) > 70 ? mb_substr($message[1], 0, 70) . '...' : $message[1],

                    empty($user->display_name) ? $user->email : $user->display_name,

                    $message[3],

                    (bool)$message[4],

                    $user->id,

                    $message[2] == $userId

                );

            }



            $result['data'] = array_values($messages);



            echo json_encode($result);

            break;





    }

}
